{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyMultiTasking A set of tools for achieving concurrency in Python 3 easily. PyMultiTasking Paradigm This follows the paradigm of Worker/Pool/Task/Decorator for both Threading and Multi-Process (future update). Worker : A ThreadWorker inherits from threading.Thread. It has additional parameters that extend is functionality. Examples includes adding extra support too easily kill or otherwise stop the thread, a queue so it can keep receiving more functions to execute and so on. Pool : Manages multiple Workers. Pools use a PriorityQueue to send Tasks into a given number of Threads/Processes. It can attempt to spin up and down the number of necessary Workers depending on the number of tasks and the number of CPU Cores on the machine. A programmer can adjust the number of workers in a pool as well. The Pool provides many additional methods, properties, functionality that is helpful when dealing with large amounts of threads. Task : A Task object inherits from threading.Event and thus can be waited on. The event is set when the Task is complete. The Task can also sync with other events via a Semaphore. It saves the results of a given function, it can handle a call back function, it can inject itself into given functions whenever possible, and it is serializable, and much more. Decorator : This toolkit comes with 3 Decorators for threading. 'Limiter', 'Threaded', and 'Processed' (future update). Limiter works to limit how many times a function/method can be run simultaneously. While Threaded is a simple way to make a Function/Method threaded. Whenever @Threaded is used the wrapped function returns a Task instead of its usual results. The results are saved in .results. Threaded has many arguments that can adjust its behavior which are explored below. The above explanation is how both Threaded and the soon to be released Process tools will follow. Regardless of using threading or multiprocess the Workers/Pools/Decorators will use the same Task object type. While Pools are called either ThreadPools/ProcessPools and the same goes for workers. PoolExamples: Below are examples using the ThreadingPool class. Future releases will include the ProcesingPool which will follow the same paradigm and have the same features. # A simple function to be used in further examples: def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) To work directly with a Pool and submit a tasks: from PyMultiTasking import ThreadPool as Pool p1 = Pool () task = p1 . submit ( test , \"arg\" , example = \"kwargs\" ) Submit returns a Task object. Task stores results and is also an Event object. Below example also shows the 'submit_task_priority' priority keyword can provide the priority that the task should be treated when it is put into the TaskQueue. from PyMultiTasking import ThreadPool as Pool p1 = Pool () task = p1 . submit ( test , \"arg\" , example = \"kwargs\" , submit_task_priority = 100 ) # The default priority is 10 if task . wait ( 10 ): print ( task . results ) else : print ( f \" { task } not finished\" ) You can submit partials as well. This can be helpful if you want to wrap a function with certain arguments and then later submit that function with additional arguments. from functools import partial from PyMultiTasking import ThreadPool as Pool func = partial ( test , \"arg\" , example = \"kwargs\" ) p1 = Pool () p1 . submit ( func ) You can use the 'map' method to execute the same method multiple times with a list of arguments. You will get a list of tasks back. Map also has an optional chunksize parameter by default it is 0 which then will attempt to spread given tasks out evenly across the workers. from PyMultiTasking import ThreadPool as Pool arg1 = (( \"arg\" ,), { \"example\" : \"kwargs\" }) arg2 = (( \"arg2\" ,), { \"example2\" : \"kwargs\" }) p1 = Pool () tasks = p1 . map ( test , [ arg1 , arg2 ]) A pool can wait on all tasks to be complete. The 'block' keyword can be used to block new tasks from being added. from PyMultiTasking import ThreadPool as Pool arg1 = (( \"arg\" ,), { \"example\" : \"kwargs\" }) arg2 = (( \"arg2\" ,), { \"example2\" : \"kwargs\" }) p1 = Pool () p1 . map ( test , [ arg1 , arg2 ]) if p1 . wait_completion ( 10 , block = True ): print ( \"The pool is finished work its current work load\" ) The Pool method 'as_completed' is a generator that returns tasks as they complete. from PyMultiTasking import ThreadPool as Pool arg1 = (( \"arg\" ,), { \"example\" : \"kwargs\" }) arg2 = (( \"arg2\" ,), { \"example2\" : \"kwargs\" }) p1 = Pool () tasks = p1 . map ( test , [ arg1 , arg2 ]) # 'as_completed' is a staticmethod of ThreadPool for task in Pool . as_completed ( tasks ): print ( f \"Task[ { task } ] completed with results: { task . results } \" ) Decorator Examples Currently, there is only the 'Threaded' decorator for multitasking. However, future releases will have the Processed decorator and will have all the same features. You can make any function or method threaded by simply using the decorator. Each time the 'test' method is called it will now respond with a Task object and a Worker will be spawned to execute the function code block. from PyMultiTasking import Threaded @Threaded def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) task = test () if task . wait ( 10 ): print ( task . results ) else : print ( f \" { task } not finished\" ) Threaded also has the 'daemon' parameter. This spawns a single Worker thread and keeps it alive instead of ending it once the function is done. Now every time the 'test' method is called it simply pushes the function call to the Worker. The worker is cleaned when Python exists. It also can respawn a Worker if the previous worker crashed due to an uncaught exception. from PyMultiTasking import Threaded @Threaded ( daemon = True ) def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) Threaded can also spawn a Pool for the function. This can be a useful alternative to 'daemon' to have more than 1 Worker assigned to the method. It is best practices to shutdown the pool before exiting. All pools are registered which makes this easy. from PyMultiTasking import Threaded , ThreadPool as Pool @Threaded ( pool = True ) def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) Pool . join_pools ( timeout = 60 ) # This will find all Pools and run 'join' on them. Threaded can also use the 'pool_name' keyword. This by default makes 'pool' keyword be True and will spawn a new Pool with the name provided if one doesn't already exist in the Pool registry. This is useful if the developer wants to use a Pool across multiple functions and/or want to join/block/wait on the Pool and thus all associated functions. from PyMultiTasking import Threaded , ThreadPool as Pool pool_name = 'mypool' # Global variable @Threaded ( pool_name = pool_name ) def test_dec_pool_by_name_one ( * args , ** kwargs ): print ( f \"Running: test_dec_pool_by_name_one - args= { args } - kwargs= { kwargs } \" ) @Threaded ( pool_name = pool_name ) def test_dec_pool_by_name_twp ( * args , ** kwargs ): print ( f \"Running: test_dec_pool_by_name_twp - args= { args } - kwargs= { kwargs } \" ) tasksOne = [ test_dec_pool_by_name_one ( randomsleep = True ) for _ in range ( 4 )] tasksTwo = [ test_dec_pool_by_name_twp ( randomsleep = True ) for _ in range ( 4 )] pool = Pool . get_pool_by_name ( pool_name ) # Get the Pool associated with the two above functions pool . wait_completion ( block = True ) # Block all new submissions until existing work has been completed for task in tasksOne + tasksTwo : print ( f \"Task[ { task } ] completed with results: { task . results } \" ) Threaded can also pass a call back function to the Task it creates when wrapping the method with the 'callback_func' parameter. Learn more about the callback_func parameter by reading the Task class documentation. from PyMultiTasking import Threaded def callback_test ( * args , ** kwargs ): print ( f 'callback_test - Completed: { args } - { kwargs } ' ) return args [ 0 ] @Threaded ( callback_func = callback_test ) def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) Threaded can also pass parameters directly to the Task/Worker/Pool. It can submit information to a Task with ' task ' and to a worker following the same schema ' worker ' and again the same for pool ie: ' pool ' Let's combine some of the above things together now. from random import randint from PyMultiTasking import Limiter , Threaded , ThreadPool as Pool store_values = [] # Global variable used because the task isn't going to store the results. # Learn about the Limiter in the following section. @Limiter ( 1 ) # Because of the limiter the store_values object will not be appended to more than one at a time. def callback_test ( * args , ** kwargs ): # This will receive the return value of each 'test' method call. global store_values print ( f 'callback_test - Completed: { args } - { kwargs } ' ) store_values . append ( args ) @Threaded ( callback_func = callback_test , pool_name = 'mypool' , _pool_maxWorkers = 2 , _task_store_return = False ) def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) return randint ( 0 , 10 ) # Return a random number from 0 to 10. tasks = [ test () for _ in range ( 4 )] pool = Pool . get_pool_by_name ( 'mypool' ) # Get the Pool associated with the two above functions. pool . join ( block = True ) # Ends the Pool. print ( f \"Stored Values: { store_values } \" ) The Limiter A decorator to control how often functions/methods are handled by threads. To simply make a function's execution thread safe. This makes it so the 'test' function can only be executed one at a time. Adjust the amount by changing first parameter also named 'num'. from PyMultiTasking import Limiter , ThreadPool as Pool @Limiter ( 1 ) def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) testResults = [ test () for _ in range ( 4 )] # This would pause the loop at every 'test' method call Limiter also has a keyword argument 'blocking' which defaults to True. If 'blocking' is True Limiter will acquire the lock before executing the wrapped function and let it go after the function is complete. If False the Limiter will pass a semephore onto the function as an argument '_task_semaphore'. This assumes that Limiter is wrapping another decorator like Threaded but this is not necessary as long as the wrapped function is able to handle the '_task_semaphore' parameter. The following example will not block the calling of the function even if it is called more than twice. In the example below it is called 4 times in a loop. All 4 calls would execute quickly and return Tasks and have spawned 4 Workers. However, two of the Workers would be waiting for a lock. Once any one of the active Workers completes the Task and releases the lock another Worker can then execute their task. from PyMultiTasking import Limiter , Threaded , ThreadPool as Pool @Limiter ( 2 , blocking = False ) @Threaded def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) tasks = [ test () for _ in range ( 4 )] # This loop would complete quickly as it doesn't wait for 'test' to actually finish for task in Pool . as_completed ( tasks ): print ( f \"Task[ { task } ] completed with results: { task . results } \" ) NOTE: Do not use a Limiter if it is wrapping Threaded(daemon=True). Although this technically would not break anything it is pointless.","title":"Home"},{"location":"#pymultitasking","text":"A set of tools for achieving concurrency in Python 3 easily.","title":"PyMultiTasking"},{"location":"#pymultitasking-paradigm","text":"This follows the paradigm of Worker/Pool/Task/Decorator for both Threading and Multi-Process (future update). Worker : A ThreadWorker inherits from threading.Thread. It has additional parameters that extend is functionality. Examples includes adding extra support too easily kill or otherwise stop the thread, a queue so it can keep receiving more functions to execute and so on. Pool : Manages multiple Workers. Pools use a PriorityQueue to send Tasks into a given number of Threads/Processes. It can attempt to spin up and down the number of necessary Workers depending on the number of tasks and the number of CPU Cores on the machine. A programmer can adjust the number of workers in a pool as well. The Pool provides many additional methods, properties, functionality that is helpful when dealing with large amounts of threads. Task : A Task object inherits from threading.Event and thus can be waited on. The event is set when the Task is complete. The Task can also sync with other events via a Semaphore. It saves the results of a given function, it can handle a call back function, it can inject itself into given functions whenever possible, and it is serializable, and much more. Decorator : This toolkit comes with 3 Decorators for threading. 'Limiter', 'Threaded', and 'Processed' (future update). Limiter works to limit how many times a function/method can be run simultaneously. While Threaded is a simple way to make a Function/Method threaded. Whenever @Threaded is used the wrapped function returns a Task instead of its usual results. The results are saved in .results. Threaded has many arguments that can adjust its behavior which are explored below. The above explanation is how both Threaded and the soon to be released Process tools will follow. Regardless of using threading or multiprocess the Workers/Pools/Decorators will use the same Task object type. While Pools are called either ThreadPools/ProcessPools and the same goes for workers.","title":"PyMultiTasking Paradigm"},{"location":"#poolexamples","text":"Below are examples using the ThreadingPool class. Future releases will include the ProcesingPool which will follow the same paradigm and have the same features. # A simple function to be used in further examples: def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) To work directly with a Pool and submit a tasks: from PyMultiTasking import ThreadPool as Pool p1 = Pool () task = p1 . submit ( test , \"arg\" , example = \"kwargs\" ) Submit returns a Task object. Task stores results and is also an Event object. Below example also shows the 'submit_task_priority' priority keyword can provide the priority that the task should be treated when it is put into the TaskQueue. from PyMultiTasking import ThreadPool as Pool p1 = Pool () task = p1 . submit ( test , \"arg\" , example = \"kwargs\" , submit_task_priority = 100 ) # The default priority is 10 if task . wait ( 10 ): print ( task . results ) else : print ( f \" { task } not finished\" ) You can submit partials as well. This can be helpful if you want to wrap a function with certain arguments and then later submit that function with additional arguments. from functools import partial from PyMultiTasking import ThreadPool as Pool func = partial ( test , \"arg\" , example = \"kwargs\" ) p1 = Pool () p1 . submit ( func ) You can use the 'map' method to execute the same method multiple times with a list of arguments. You will get a list of tasks back. Map also has an optional chunksize parameter by default it is 0 which then will attempt to spread given tasks out evenly across the workers. from PyMultiTasking import ThreadPool as Pool arg1 = (( \"arg\" ,), { \"example\" : \"kwargs\" }) arg2 = (( \"arg2\" ,), { \"example2\" : \"kwargs\" }) p1 = Pool () tasks = p1 . map ( test , [ arg1 , arg2 ]) A pool can wait on all tasks to be complete. The 'block' keyword can be used to block new tasks from being added. from PyMultiTasking import ThreadPool as Pool arg1 = (( \"arg\" ,), { \"example\" : \"kwargs\" }) arg2 = (( \"arg2\" ,), { \"example2\" : \"kwargs\" }) p1 = Pool () p1 . map ( test , [ arg1 , arg2 ]) if p1 . wait_completion ( 10 , block = True ): print ( \"The pool is finished work its current work load\" ) The Pool method 'as_completed' is a generator that returns tasks as they complete. from PyMultiTasking import ThreadPool as Pool arg1 = (( \"arg\" ,), { \"example\" : \"kwargs\" }) arg2 = (( \"arg2\" ,), { \"example2\" : \"kwargs\" }) p1 = Pool () tasks = p1 . map ( test , [ arg1 , arg2 ]) # 'as_completed' is a staticmethod of ThreadPool for task in Pool . as_completed ( tasks ): print ( f \"Task[ { task } ] completed with results: { task . results } \" )","title":"PoolExamples:"},{"location":"#decorator-examples","text":"Currently, there is only the 'Threaded' decorator for multitasking. However, future releases will have the Processed decorator and will have all the same features. You can make any function or method threaded by simply using the decorator. Each time the 'test' method is called it will now respond with a Task object and a Worker will be spawned to execute the function code block. from PyMultiTasking import Threaded @Threaded def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) task = test () if task . wait ( 10 ): print ( task . results ) else : print ( f \" { task } not finished\" ) Threaded also has the 'daemon' parameter. This spawns a single Worker thread and keeps it alive instead of ending it once the function is done. Now every time the 'test' method is called it simply pushes the function call to the Worker. The worker is cleaned when Python exists. It also can respawn a Worker if the previous worker crashed due to an uncaught exception. from PyMultiTasking import Threaded @Threaded ( daemon = True ) def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) Threaded can also spawn a Pool for the function. This can be a useful alternative to 'daemon' to have more than 1 Worker assigned to the method. It is best practices to shutdown the pool before exiting. All pools are registered which makes this easy. from PyMultiTasking import Threaded , ThreadPool as Pool @Threaded ( pool = True ) def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) Pool . join_pools ( timeout = 60 ) # This will find all Pools and run 'join' on them. Threaded can also use the 'pool_name' keyword. This by default makes 'pool' keyword be True and will spawn a new Pool with the name provided if one doesn't already exist in the Pool registry. This is useful if the developer wants to use a Pool across multiple functions and/or want to join/block/wait on the Pool and thus all associated functions. from PyMultiTasking import Threaded , ThreadPool as Pool pool_name = 'mypool' # Global variable @Threaded ( pool_name = pool_name ) def test_dec_pool_by_name_one ( * args , ** kwargs ): print ( f \"Running: test_dec_pool_by_name_one - args= { args } - kwargs= { kwargs } \" ) @Threaded ( pool_name = pool_name ) def test_dec_pool_by_name_twp ( * args , ** kwargs ): print ( f \"Running: test_dec_pool_by_name_twp - args= { args } - kwargs= { kwargs } \" ) tasksOne = [ test_dec_pool_by_name_one ( randomsleep = True ) for _ in range ( 4 )] tasksTwo = [ test_dec_pool_by_name_twp ( randomsleep = True ) for _ in range ( 4 )] pool = Pool . get_pool_by_name ( pool_name ) # Get the Pool associated with the two above functions pool . wait_completion ( block = True ) # Block all new submissions until existing work has been completed for task in tasksOne + tasksTwo : print ( f \"Task[ { task } ] completed with results: { task . results } \" ) Threaded can also pass a call back function to the Task it creates when wrapping the method with the 'callback_func' parameter. Learn more about the callback_func parameter by reading the Task class documentation. from PyMultiTasking import Threaded def callback_test ( * args , ** kwargs ): print ( f 'callback_test - Completed: { args } - { kwargs } ' ) return args [ 0 ] @Threaded ( callback_func = callback_test ) def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) Threaded can also pass parameters directly to the Task/Worker/Pool. It can submit information to a Task with ' task ' and to a worker following the same schema ' worker ' and again the same for pool ie: ' pool ' Let's combine some of the above things together now. from random import randint from PyMultiTasking import Limiter , Threaded , ThreadPool as Pool store_values = [] # Global variable used because the task isn't going to store the results. # Learn about the Limiter in the following section. @Limiter ( 1 ) # Because of the limiter the store_values object will not be appended to more than one at a time. def callback_test ( * args , ** kwargs ): # This will receive the return value of each 'test' method call. global store_values print ( f 'callback_test - Completed: { args } - { kwargs } ' ) store_values . append ( args ) @Threaded ( callback_func = callback_test , pool_name = 'mypool' , _pool_maxWorkers = 2 , _task_store_return = False ) def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) return randint ( 0 , 10 ) # Return a random number from 0 to 10. tasks = [ test () for _ in range ( 4 )] pool = Pool . get_pool_by_name ( 'mypool' ) # Get the Pool associated with the two above functions. pool . join ( block = True ) # Ends the Pool. print ( f \"Stored Values: { store_values } \" )","title":"Decorator Examples"},{"location":"#the-limiter","text":"A decorator to control how often functions/methods are handled by threads. To simply make a function's execution thread safe. This makes it so the 'test' function can only be executed one at a time. Adjust the amount by changing first parameter also named 'num'. from PyMultiTasking import Limiter , ThreadPool as Pool @Limiter ( 1 ) def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) testResults = [ test () for _ in range ( 4 )] # This would pause the loop at every 'test' method call Limiter also has a keyword argument 'blocking' which defaults to True. If 'blocking' is True Limiter will acquire the lock before executing the wrapped function and let it go after the function is complete. If False the Limiter will pass a semephore onto the function as an argument '_task_semaphore'. This assumes that Limiter is wrapping another decorator like Threaded but this is not necessary as long as the wrapped function is able to handle the '_task_semaphore' parameter. The following example will not block the calling of the function even if it is called more than twice. In the example below it is called 4 times in a loop. All 4 calls would execute quickly and return Tasks and have spawned 4 Workers. However, two of the Workers would be waiting for a lock. Once any one of the active Workers completes the Task and releases the lock another Worker can then execute their task. from PyMultiTasking import Limiter , Threaded , ThreadPool as Pool @Limiter ( 2 , blocking = False ) @Threaded def test ( * args , ** kwargs ): print ( f ' { args } - { kwargs } ' ) tasks = [ test () for _ in range ( 4 )] # This loop would complete quickly as it doesn't wait for 'test' to actually finish for task in Pool . as_completed ( tasks ): print ( f \"Task[ { task } ] completed with results: { task . results } \" ) NOTE: Do not use a Limiter if it is wrapping Threaded(daemon=True). Although this technically would not break anything it is pointless.","title":"The Limiter"},{"location":"reference/PyMultiTasking/","text":"Module PyMultiTasking View Source 1 2 3 4 5 6 7 #!/usr/bin/env python3 # -*- coding=utf-8 -*- # from PyMultiTasking.ProcessingUtils import Processed, ProcessWorker, ProcessPool, set_start_method __version__ = \"0.9.0\" Sub-modules PyMultiTasking.ThreadingUtils PyMultiTasking.utils","title":"Index"},{"location":"reference/PyMultiTasking/#module-pymultitasking","text":"View Source 1 2 3 4 5 6 7 #!/usr/bin/env python3 # -*- coding=utf-8 -*- # from PyMultiTasking.ProcessingUtils import Processed, ProcessWorker, ProcessPool, set_start_method __version__ = \"0.9.0\"","title":"Module PyMultiTasking"},{"location":"reference/PyMultiTasking/#sub-modules","text":"PyMultiTasking.ThreadingUtils PyMultiTasking.utils","title":"Sub-modules"},{"location":"reference/PyMultiTasking/ThreadingUtils/","text":"Module PyMultiTasking.ThreadingUtils View Sourceusr/bin/env python3 # -*- coding=utf-8 -*- # Author: Ryan Henrichson # Version: 2.0 import logging import threading from threading import RLock from PyMultiTasking.utils import wait_lock , Worker , Pool , __PyMultiDec from PyMultiTasking.utils import __async_raise as a_raise # logging.basicConfig(format='%(asctime)s %(levelname)s %(name)s %(funcName)s %(lineno)s %(message)s', # level=logging.DEBUG) log = logging . getLogger ( 'Threading' ) # logging.getLoggerClass().manager.emittedNoHandlerWarning = 1 class Threaded ( __PyMultiDec ): \"\"\"<a name=\"Threaded\"></a> To be used as a Decorator. When decorating a function/method that callable when be run in a Python thread. The function will return a 'Task' object. \"\"\" def __init__ ( self , * args , ** kwargs ): self . wType = ThreadWorker self . pType = ThreadPool super ( Threaded , self ) . __init__ ( * args , ** kwargs ) class ThreadWorker ( Worker , threading . Thread ): \"\"\" <a name=\"ThreadWorker\"></a> This is designed to be managed by a ThreadPool. However, it can run on its own as well. It runs until told to stop and works tasks that come from a the PriorityTaskQueue maintained by the Pool. \"\"\" workerType = 'THREAD' def __init__ ( self , * args , ** kwargs ): kwargs . update ({ 'log' : log }) super ( ThreadWorker , self ) . __init__ ( * args , ** kwargs ) def __get_my_tid ( self ) -> int : \"\"\" Determines the instance's thread ID - :return: (int) \"\"\" if not self . is_alive (): raise threading . ThreadError ( \"Thread is not active\" ) if hasattr ( self , \"_thread_id\" ): return self . _thread_id for tid , tobj in getattr ( threading , '_active' , dict ()) . items (): if tobj is self : self . _thread_id = tid return tid raise AssertionError ( \"Could not determine the thread's ID\" ) def terminate ( self ) -> None : \"\"\" This raises a SysExit exception onto the the Worker thread un-safely killing it. - :return: (None) \"\"\" a_raise ( self . __get_my_tid (), SystemExit ) def kill ( self ) -> None : self . safe_stop () return self . terminate () # noinspection PyPep8Naming class ThreadPool ( Pool ): \"\"\" <a name=\"ThreadPool\"></a> This manages a pool of ThreadWorkers that get tasks from a 'PriorityTaskQueue'. The workers consume tasks from the taskQueue until they are told to stop. The ThreadPool class keeps a registry of all ThreadPools objects. \"\"\" __regRLock = RLock () __pool_registry = [] def __init__ ( self , * args , ** kwargs ): kwargs . update ({ 'log' : log }) super ( ThreadPool , self ) . __init__ ( ThreadWorker , * args , ** kwargs ) ThreadPool . register_pool ( self ) @classmethod def get_pool_by_name ( cls , name , timeout = 60 ): with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = False ) as acquired : if acquired is False : return False for pool in cls . __pool_registry : if name == pool . name : return pool @classmethod def get_pools ( cls , name = None , timeout = 60 ): with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = False ) as acquired : if acquired is False : return [] if name : return [ pool for pool in cls . __pool_registry if name == pool . name ] return cls . __pool_registry @classmethod def join_pools ( cls , timeout = 60 ): with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = False ) as acquired : if acquired is False : return False for pool in cls . __pool_registry : pool . join ( timeout = timeout ) return True @classmethod def register_pool ( cls , pool , timeout = 60 ): with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = True ): if isinstance ( pool , Pool ): cls . __pool_registry . append ( pool ) if __name__ == '__main__' : print ( 'This should be called as a module.' ) Variables log Classes ThreadPool class ThreadPool ( * args , ** kwargs ) This manages a pool of ThreadWorkers that get tasks from a 'PriorityTaskQueue'. The workers consume tasks from the taskQueue until they are told to stop. The ThreadPool class keeps a registry of all ThreadPools objects. View Source class ThreadPool(Pool): \"\"\" <a name= \"ThreadPool\" ></a> This manages a pool of ThreadWorkers that get tasks from a 'PriorityTaskQueue'. The workers consume tasks from the taskQueue until they are told to stop. The ThreadPool class keeps a registry of all ThreadPools objects. \"\"\" __regRLock = RLock() __pool_registry = [] def __init__(self, *args, **kwargs): kwargs.update({'log': log}) super(ThreadPool, self).__init__(ThreadWorker, *args, **kwargs) ThreadPool.register_pool(self) @classmethod def get_pool_by_name(cls, name, timeout=60): with wait_lock(cls.__regRLock, timeout=timeout, raise_exc=False) as acquired: if acquired is False: return False for pool in cls.__pool_registry: if name == pool.name: return pool @classmethod def get_pools(cls, name=None, timeout=60): with wait_lock(cls.__regRLock, timeout=timeout, raise_exc=False) as acquired: if acquired is False: return [] if name: return [pool for pool in cls.__pool_registry if name == pool.name] return cls.__pool_registry @classmethod def join_pools(cls, timeout=60): with wait_lock(cls.__regRLock, timeout=timeout, raise_exc=False) as acquired: if acquired is False: return False for pool in cls.__pool_registry: pool.join(timeout=timeout) return True @classmethod def register_pool(cls, pool, timeout=60): with wait_lock(cls.__regRLock, timeout=timeout, raise_exc=True): if isinstance(pool, Pool): cls.__pool_registry.append(pool) Ancestors (in MRO) PyMultiTasking.utils.Pool Static methods as_completed def as_completed ( tasks : 'List[Task]' ) View Source @staticmethod def as_completed ( tasks : List [ Task ] ) : def _finished_tasks ( task_item ) : return task_item if task_item . is_set () else None lengthOfTasks = len ( tasks ) finished_tasks = set () while len ( finished_tasks ) < lengthOfTasks : for task in filter ( _finished_tasks , tasks ) : if task not in finished_tasks : finished_tasks . add ( task ) yield task time . sleep ( 0.01 ) get_pool_by_name def get_pool_by_name ( name , timeout = 60 ) View Source @classmethod def get_pool_by_name ( cls , name , timeout = 60 ) : with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = False ) as acquired : if acquired is False : return False for pool in cls . __pool_registry : if name == pool . name : return pool get_pools def get_pools ( name = None , timeout = 60 ) View Source @classmethod def get_pools ( cls , name = None , timeout = 60 ) : with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = False ) as acquired : if acquired is False : return [] if name : return [ pool for pool in cls.__pool_registry if name == pool.name ] return cls . __pool_registry join_pools def join_pools ( timeout = 60 ) View Source @classmethod def join_pools ( cls , timeout = 60 ) : with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = False ) as acquired : if acquired is False : return False for pool in cls . __pool_registry : pool . join ( timeout = timeout ) return True register_pool def register_pool ( pool , timeout = 60 ) View Source @classmethod def register_pool ( cls , pool , timeout = 60 ) : with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = True ) : if isinstance ( pool , Pool ) : cls . __pool_registry . append ( pool ) Instance variables active_workers has_tasks has_workers highest_priority inactive_workers is_active This determines is the Pool both has workers and has work to do. This doesn't have anything to do with a Pool's state. is_idle needs_workers num_active_tasks num_queued_tasks This is a wrapper for the 'qsize()' method from PriorityTaskQueue. num_workers state This is a string that has only 4 valid string values that determines the state of the Pool. unfinished_tasks This calls the 'unfinishedTasks' property of PriorityTaskQueue. And is equal to the number of tasks submitted minus the number of times a Task has been Worked by a Worker. workers This is a protected (wrapped in a lock) List of Workers managed by this pool. Methods add_worker def add_worker ( self , workerAutoKill : 'Optional[bool]' = None , allow_restart : 'bool' = False , ** kwargs ) -> 'bool' Adds a single new worker too the Pool. :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in :return: (bool) View Source def add_worker ( self , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False , ** kwargs ) -> bool : \"\"\" Adds a single new worker too the Pool. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in - :return: (bool) \"\"\" self . log . debug ( \"Attempting to add new worker!\" ) if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if self . num_workers >= self . maxWorkers : return False self . workers . append ( self . workerType ( self , workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill )) return True join def join ( self , timeout : 'int' ) -> 'bool' This first calls 'waitCompletion' with 'block=True' and then calls 'shutdown'. The goal is to try to wait for all Tasks to complete and then close out the Pool. :param timeout: (int)The length of time to wait on both join and shutdown. :return: (bool) View Source def join ( self , timeout : int ) -> bool : \"\"\" This first calls ' waitCompletion ' with ' block = True ' and then calls ' shutdown '. The goal is to try to wait for all Tasks to complete and then close out the Pool. - :param timeout: (int)The length of time to wait on both join and shutdown. - :return: (bool) \"\"\" with wait_lock ( self . __taskLock , timeout = timeout ) : start_time = time . monotonic () self . wait_completion ( timeout , block = True ) return self . shutdown ( timeout = int ( max ( timeout - ( time . monotonic () - start_time ), 1 ))) map def map ( self , fn : 'Callable' , params : 'Tuple' , chunksize : 'int' = 0 , * args , ** kwargs ) -> 'None' A simple mapping tool that takes different params (a List of tuples formatted like [( args, *kwargs)]) and pass them too a function. chunksize determines how too break up the list and distribute it across Workers. :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task :param params: (Tuple) The Tuple should be formatted like so ( ((arg1, ), {'kwarg1': 'value'}), ...). Each item within the Tuple is a Tuple itself with two items. The first item is positional arguments (args) and the second item is keyword arguments (kwargs). Even if they are empty they need to exist. :param chunksize: (int) If left at 0 the method will attempt to spread the tasks as evenly as possible. Otherwise it will take the number to mean how many Tasks will be given to a single Worker. :param kwargs: These are keyword arguments that get passed to the 'submit' method. :return: (None) View Source def map ( self , fn : Callable , params : Tuple , chunksize : int = 0 , * args , ** kwargs ) -> None : \"\"\" A simple mapping tool that takes different params (a List of tuples formatted like [(*args, **kwargs)]) and pass them too a function. chunksize determines how too break up the list and distribute it across Workers. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param params: (Tuple) The Tuple should be formatted like so ( ((arg1, ), {'kwarg1': 'value'}), ...). Each item within the Tuple is a Tuple itself with two items. The first item is positional arguments (args) and the second item is keyword arguments (kwargs). Even if they are empty they need to exist. - :param chunksize: (int) If left at 0 the method will attempt to spread the tasks as evenly as possible. Otherwise it will take the number to mean how many Tasks will be given to a single Worker. - :param kwargs: These are keyword arguments that get passed to the 'submit' method. - :return: (None) \"\"\" if 'submit_task_autospawn' not in kwargs : kwargs [ 'submit_task_autospawn' ] = True if chunksize == 0 : if len ( params ) <= self . maxWorkers : chunksize = 1 else : chunksize = round ( len ( params ) / self . maxWorkers ) def chunkHelper ( func , chunkList ): return [ func ( * parms [ 0 ], ** parms [ 1 ]) for parms in chunkList ] def listIntoChunks ( lst ): return [ lst [ i * chunksize :( i + 1 ) * chunksize ] for i in range (( len ( lst ) + chunksize - 1 ) // chunksize )] for item in listIntoChunks ( params ): self . submit ( partial ( chunkHelper , func = fn , chunkList = item ), ** kwargs ) remove_worker def remove_worker ( self , workerTooRemove : 'Optional[Worker]' = None , timeout : 'int' = 30 , allow_abandon : 'bool' = False ) -> 'bool' Removes a single new worker from the Pool. This can be called to remove the last Worker or you can specify a Worker to remove. :param workerTooRemove: (Worker) This is usually sent when a Worker is self terminating :param timeout: (int) 30, How much time it is willing to wait. NOTE: This is doubled when specifying a worker with the workerTooRemove parameter. :param allow_abandon: (bool) False, This determines if the thread will simply be abandoned if it cannot normally remove it from the pool. It will only do this if 'safe_stop' and 'terminate' methods fail. :return: (bool) View Source def remove_worker ( self , workerTooRemove : Optional [ Worker ] = None , timeout : int = 30 , allow_abandon : bool = False ) -> bool : \"\"\" Removes a single new worker from the Pool. This can be called to remove the last Worker or you can specify a Worker to remove. - :param workerTooRemove: (Worker) This is usually sent when a Worker is self terminating - :param timeout: (int) 30, How much time it is willing to wait. NOTE: This is doubled when specifying a worker with the workerTooRemove parameter. - :param allow_abandon: (bool) False, This determines if the thread will simply be abandoned if it cannot normally remove it from the pool. It will only do this if 'safe_stop' and 'terminate' methods fail. - :return: (bool) \"\"\" def wait_helper ( wait_time , start_time , ev , wtr ) : current_time = time . monotonic () while current_time < start_time + wait_time and wtr in self . workers : ev . wait ( timeout = 0.1 ) return wtr not in self . workers try : if self . num_workers <= 0 : return False if workerTooRemove in self . workers and workerTooRemove . killed : self . workers . pop ( self . workers . index ( workerTooRemove )) return True e = Event () if workerTooRemove is not None : workerTooRemove . safe_stop () if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ) : return True self . log . warning ( f '[WARN]: worker({workerTooRemove}) needs to be terminated in order to be removed.' ) getattr ( workerTooRemove , 'terminate' , dummy_func )() if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ) : return True if allow_abandon : self . log . warning ( f '[WARN]: worker({workerTooRemove}) is being abandoned.' ) worker = self . workers . pop ( self . workers . index ( workerTooRemove )) if worker . killed is not True : worker . killed = True return True return False else : current_num = self . num_workers self . submit ( Task ( Worker . __KILL__ , priority = self . highest_priority + 1 , kill = True ), submit_task_autospawn = False ) if timeout > 0 : current = start = time . monotonic () while current < start + timeout and self . num_workers >= current_num : e . wait ( timeout = 0.1 ) return self . num_workers < current_num return True except Exception as e : self . log . error ( f '[ERROR]: Error occurred while attempting to remove worker: {e}' ) self . log . debug ( f '[DEBUG]: Trace for error while attempting to remove worker: {traceback.format_exc()}' ) return False finally : if self . num_workers == 0 : self . state = __INACTIVE__ set_max_workers def set_max_workers ( self , maxWorkers : 'int' ) -> 'int' Set the maximum number of threads that will remain active. Return the maximum thread limit. :param maxWorkers: (int) Max thread limit :return: (int) View Source def set_max_workers ( self , maxWorkers : int ) -> int : \"\"\" Set the maximum number of threads that will remain active. Return the maximum thread limit. - :param maxWorkers: (int) Max thread limit - :return: (int) \"\"\" if type ( maxWorkers ) is int and maxWorkers > - 1 : self . maxWorkers = maxWorkers return self . maxWorkers setup_workers def setup_workers ( self , numOfWorkers : 'int' = 1 , workerAutoKill : 'Optional[bool]' = None , allow_restart : 'bool' = False ) -> 'bool' Generally only used by init. This setups Worker threads to be managed by the Pool. :param numOfWorkers: (int) Number workers setup. IF the number of workers is higher then the value of 'maxWorkers' then 'maxWorkers' is updated. The numOfWorkers is how many Workers the Pool has not now many new Workers get added. :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in the 'taskQueue'. :return: (bool) View Source def setup_workers ( self , numOfWorkers : int = 1 , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False ) -> bool : \"\"\" Generally only used by init. This setups Worker threads to be managed by the Pool. - :param numOfWorkers: (int) Number workers setup. IF the number of workers is higher then the value of 'maxWorkers' then 'maxWorkers' is updated. The numOfWorkers is how many Workers the Pool has *not* now many new Workers get added. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in the 'taskQueue'. - :return: (bool) \"\"\" if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if numOfWorkers > self . maxWorkers : self . set_max_workers ( numOfWorkers ) numOfNewWorkers = ( numOfWorkers - self . num_workers ) elif numOfWorkers > ( self . maxWorkers - self . num_workers ) : numOfNewWorkers = ( self . maxWorkers - self . num_workers ) else : numOfNewWorkers = numOfWorkers for _ in range ( 0 , numOfNewWorkers ) : self . add_worker ( workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill , allow_restart = allow_restart ) return numOfNewWorkers > 0 shutdown def shutdown ( self , timeout : 'Optional[int]' = None , unsafe : 'Optional[bool]' = None ) -> 'bool' This sends a kill operation too all the workers and waits for them to complete and then removes the threads. It can also attempt to kill Workers in an unsafe way with the 'terminate' Worker method. :param timeout: (int) The length of time to wait on tasks to be stopped :param unsafe: (bool/None) True: The 'terminate' method will be called on each Worker. False: Even if the timeout is reached the 'terminate' method will not be called. None: This will attempt to safely wait for the Workers too finish but if timeout is reached then the 'terminate' method will be called. :return: (bool) View Source def shutdown ( self , timeout : Optional [ int ] = None , unsafe : Optional [ bool ] = None ) -> bool : \"\"\" This sends a kill operation too all the workers and waits for them to complete and then removes the threads. It can also attempt to kill Workers in an unsafe way with the 'terminate' Worker method. - :param timeout: (int) The length of time to wait on tasks to be stopped - :param unsafe: (bool/None) True: The 'terminate' method will be called on each Worker. False: Even if the timeout is reached the 'terminate' method will *not* be called. None: This will attempt to safely wait for the Workers too finish but if timeout is reached then the 'terminate' method will be called. - :return: (bool) \"\"\" e = Event () self . state = __STOPPING__ if timeout is None : timeout = self . __timeout def _clear_helper ( task ) : return task . task . func != Worker . __KILL__ def _clear_shutdown_tasks () : try : tasks = [] while not self . taskQueue . empty () : tasks . append ( self . taskQueue . get ()) self . taskQueue . task_done () for task in filter ( _clear_helper , tasks ) : if self . has_workers : self . taskQueue . put_nowait ( task ) else : self . ignoredTasks . append ( task ) except Exception as e : self . log . error ( f '[ERROR]: Error while clearing old tasks: {e}' ) self . log . debug ( f '[DEBUG]: Trace for error clearing old tasks: {traceback.format_exc()}' ) def _unsafe_shutdown () : for worker in self . workers : self . log . info ( f 'Worker: {worker} will be killed unsafely.' ) worker . terminate () if unsafe : _unsafe_shutdown () e . wait ( timeout = 0.1 ) return self . num_workers == 0 start_time = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ) : for x in range ( 0 , self . num_workers ) : self . remove_worker ( timeout = 0 ) current_time = time . monotonic () while current_time < start_time + timeout : if self . num_workers <= 0 : self . log . info ( 'There are no more workers. No need for forced timeout' ) break e . wait ( timeout = 0.1 ) current_time = time . monotonic () if unsafe is None : _unsafe_shutdown () e . wait ( timeout = 0.1 ) _clear_shutdown_tasks () if self . num_workers == 0 : self . state = __STOPPED__ return True return False submit def submit ( self , fn : 'Callable' , * args , ** kwargs ) -> 'Union[Task, bool]' This is the function used to submit a Task to the Pool. Simply provide a function as 'fn' and then arguments that need to be passed too that function and it will create a Task and add it to the PriorityTaskQueue to be worked. :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task :param args: These args will be passed to the Task object. :param kwargs: The following keywords will be pulled out. 'submit_task_nowait', 'submit_task_timeout', 'submit_task_autospawn', 'submit_task_priority'. All others will be passed to Task. 'submit_task_nowait': (bool) tells 'submit' to use the 'put_nowait' method on PriorityTaskQueue. 'submit_task_timeout': (int/float) how long should one wait too submit. 'submit_task_autospawn': (bool/None) determines if new Worker should be spawned because of more tasks. 'submit_task_priority': (int) changes the priority of the task. :return: (Task/bool) View Source def submit ( self , fn : Callable , * args , ** kwargs ) -> Union [ Task , bool ]: \"\"\" This is the function used to submit a Task to the Pool. Simply provide a function as 'fn' and then arguments that need to be passed too that function and it will create a Task and add it to the PriorityTaskQueue to be worked. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param args: These args will be passed to the Task object. - :param kwargs: The following keywords will be pulled out. 'submit_task_nowait', 'submit_task_timeout', 'submit_task_autospawn', 'submit_task_priority'. All others will be passed to Task. + 'submit_task_nowait': (bool) tells 'submit' to use the 'put_nowait' method on PriorityTaskQueue. + 'submit_task_timeout': (int/float) how long should one wait too submit. + 'submit_task_autospawn': (bool/None) determines if new Worker should be spawned because of more tasks. + 'submit_task_priority': (int) changes the priority of the task. - :return: (Task/bool) \"\"\" if fn is None : return False def autospawn_parser ( tmpAutospawn , state ): if state == __STOPPING__ or state == __STOPPED__ : return False if self . needs_workers and tmpAutospawn is None : return True return tmpAutospawn nowait = kwargs . pop ( ' submit_task_nowait ' , True ) timeout = kwargs . pop ( ' submit_task_timeout ' , 10 ) autospawn = autospawn_parser ( kwargs . pop ( ' submit_task_autospawn ' , None ), self . state ) priority = kwargs . pop ( ' submit_task_priority ' , 10 ) or 10 start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): if isinstance ( fn , Task ): task = fn else : task = Task ( fn , priority , * args , ** kwargs ) try : if nowait : self . taskQueue . put_nowait ( task ) else : self . taskQueue . put ( task , timeout = max ( 0.1 , ( start + timeout ) - time . monotonic ())) if autospawn or autospawn is None and self . needs_workers : self . add_worker ( ** kwargs ) return task except Exception as e : self . log . error ( f ' Error in submitting task : { e } \\ n { traceback . format_exc ()} ' ) return False finally : if self . state is not __ACTIVE__ and self . num_workers > 0 : self . state = __ACTIVE__ wait_completion def wait_completion ( self , timeout : 'Union[int, float]' , delay : 'Union[int, float]' = 0.1 , block : 'bool' = False ) -> 'bool' This method waits until all Tasks in the PriorityTaskQueue is done. If the parameter block is True it will stop any new Task from being submitted while waiting. :param timeout: (int/float) How long to wait for all tasks in the 'taskQueue' to be finished. :param delay: (int/float) The amount of time to wait before checking again in seconds. Default 0.1. :param block: (bool) This will stop new tasks from being submitted to the Queue until finished. :return: (bool) View Source def wait_completion ( self , timeout : Union [ int , float ], delay : Union [ int , float ] = 0.1 , block : bool = False ) -> bool : \"\"\" This method waits until all Tasks in the PriorityTaskQueue is done. If the parameter block is True it will stop any new Task from being submitted while waiting. - :param timeout: (int/float) How long to wait for all tasks in the ' taskQueue ' to be finished. - :param delay: (int/float) The amount of time to wait before checking again in seconds. Default 0.1. - :param block: (bool) This will stop new tasks from being submitted to the Queue until finished. - :return: (bool) \"\"\" e = Event () def _wait_completion ( waitTime : Union [ int , float ]) -> bool : current_time = start_time = time . monotonic () while current_time < start_time + waitTime and self . has_workers : if self . unfinished_tasks == 0 : return True e . wait ( timeout = delay ) current_time = time . monotonic () return False if block : start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ) : return _wait_completion ( max ( 0.1 , ( start + timeout ) - time . monotonic ())) return _wait_completion ( timeout ) ThreadWorker class ThreadWorker ( * args , ** kwargs ) This is designed to be managed by a ThreadPool. However, it can run on its own as well. It runs until told to stop and works tasks that come from a the PriorityTaskQueue maintained by the Pool. View Source class ThreadWorker(Worker, threading.Thread): \"\"\" <a name= \"ThreadWorker\" ></a> This is designed to be managed by a ThreadPool. However, it can run on its own as well. It runs until told to stop and works tasks that come from a the PriorityTaskQueue maintained by the Pool. \"\"\" workerType = 'THREAD' def __init__(self, *args, **kwargs): kwargs.update({'log': log}) super(ThreadWorker, self).__init__(*args, **kwargs) def __get_my_tid(self) -> int: \"\"\" Determines the instance's thread ID - :return: (int) \"\"\" if not self.is_alive(): raise threading.ThreadError(\"Thread is not active\") if hasattr(self, \"_thread_id\"): return self._thread_id for tid, tobj in getattr(threading, '_active', dict()).items(): if tobj is self: self._thread_id = tid return tid raise AssertionError(\"Could not determine the thread's ID\") def terminate(self) -> None: \"\"\" This raises a SysExit exception onto the the Worker thread un-safely killing it. - :return: (None) \"\"\" a_raise(self.__get_my_tid(), SystemExit) def kill(self) -> None: self.safe_stop() return self.terminate() Ancestors (in MRO) PyMultiTasking.utils.Worker threading.Thread Class variables name workerType Instance variables current_priority This changes to the priority of each incoming task. daemon A boolean value indicating whether this thread is a daemon thread. This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False. The entire Python program exits when only daemon threads are left. ident Thread identifier of this thread or None if it has not been started. This is a nonzero integer. See the get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited. is_active This determines if the Worker currently has a Task to work. native_id Native integral thread ID of this thread, or None if it has not been started. This is a non-negative integer. See the get_native_id() function. This represents the Thread ID as reported by the kernel. task_queue timeout This property will return 0 if it thinks it doesn't need to run any longer and is ready to self terminate Methods getName def getName ( self ) Return a string used for identification purposes only. This method is deprecated, use the name attribute instead. View Source def getName ( self ): \"\"\"Return a string used for identification purposes only. This method is deprecated, use the name attribute instead. \"\"\" import warnings warnings . warn ( 'getName() is deprecated, get the name attribute instead' , DeprecationWarning , stacklevel = 2 ) return self . name get_next_task def get_next_task ( self ) -> 'Union[Task, bool, None]' This gets the next Task in the taskQueue :return: (Task) View Source def get_next_task ( self ) -> Union [ Task, bool, None ] : \"\"\" This gets the next Task in the taskQueue - :return: (Task) \"\"\" try : self . __currentTask = None if self . pool is None and self . _target is not None : self . __currentTask = self . _target self . __currentTask . worker = self self . __currentTask . kill = True self . __currentTask . ignore_queue = True elif self . pool is None and self . __personalQue is None : self . __currentTask = None else : self . __currentTask = self . task_queue . get ( timeout = self . __timeout ) self . __currentTask . worker = self return self . __currentTask except Empty : if self . timeout == 0 : return Task ( Worker . __KILL__ , kill = True , ignore_queue = True ) return False except Exception as e : self . log . error ( f '[ERROR]: Error in getting task: {e}' ) self . log . debug ( f '[DEBUG]: trace for error in getting task: {traceback.format_exc()}' ) return None isDaemon def isDaemon ( self ) Return whether this thread is a daemon. This method is deprecated, use the daemon attribute instead. View Source def isDaemon ( self ): \"\"\"Return whether this thread is a daemon. This method is deprecated, use the daemon attribute instead. \"\"\" import warnings warnings . warn ( 'isDaemon() is deprecated, get the daemon attribute instead' , DeprecationWarning , stacklevel = 2 ) return self . daemon is_alive def is_alive ( self ) Return whether the thread is alive. This method returns True just before the run() method starts until just after the run() method terminates. See also the module function enumerate(). View Source def is_alive ( self ): \"\"\"Return whether the thread is alive. This method returns True just before the run() method starts until just after the run() method terminates. See also the module function enumerate(). \"\"\" assert self . _initialized , \"Thread.__init__() not called\" if self . _is_stopped or not self . _started . is_set (): return False self . _wait_for_tstate_lock ( False ) return not self . _is_stopped join def join ( self , timeout = None ) Wait until the thread terminates. This blocks the calling thread until the thread whose join() method is called terminates -- either normally or through an unhandled exception or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As join() always returns None, you must call is_alive() after join() to decide whether a timeout happened -- if the thread is still alive, the join() call timed out. When the timeout argument is not present or None, the operation will block until the thread terminates. A thread can be join()ed many times. join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to join() a thread before it has been started and attempts to do so raises the same exception. View Source def join(self, timeout=None): \"\"\"Wait until the thread terminates. This blocks the calling thread until the thread whose join() method is called terminates -- either normally or through an unhandled exception or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As join() always returns None, you must call is_alive() after join() to decide whether a timeout happened -- if the thread is still alive, the join() call timed out. When the timeout argument is not present or None, the operation will block until the thread terminates. A thread can be join()ed many times. join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to join() a thread before it has been started and attempts to do so raises the same exception. \"\"\" if not self._initialized: raise RuntimeError(\"Thread.__init__() not called\") if not self._started.is_set(): raise RuntimeError(\"cannot join thread before it is started\") if self is current_thread(): raise RuntimeError(\"cannot join current thread\") if timeout is None: self._wait_for_tstate_lock() else: # the behavior of a negative timeout isn't documented, but # historically .join(timeout=x) for x<0 has acted as if timeout=0 self._wait_for_tstate_lock(timeout=max(timeout, 0)) kill def kill ( self ) -> None View Source def kill ( self ) -> None : self . safe_stop () return self . terminate () run def run ( self ) -> 'None' This is an override of the run method within Thread that loops constantly waiting on another task. :return: (None) View Source def run ( self ) -> None : \"\"\" This is an override of the run method within Thread that loops constantly waiting on another task. - :return: (None) \"\"\" try : while not self . killed : task = self . get_next_task () if task is None : self . log . info ( 'task is None an error occurred in get_next_task method closing the thread' ) break elif task is not False : self . log . info ( f 'The task is: {task}' ) task ( * self . _args , ** self . _kwargs ) self . __currentTask = None if not task . ignore_queue : self . task_queue . task_done () if task . kill : self . log . info ( f 'Killing thread once task is complete: {task}' ) self . killed = True except Exception as e : self . log . error ( f '[ERROR]: While Worker thread is running with task: {self.__currentTask} Error: {e}' ) self . log . debug ( f '[DEBUG]: trace for error: {traceback.format_exc()}' ) if self . __currentTask is not None : if not self . __currentTask . isSet () : self . __currentTask . set () if not self . __currentTask . ignore_queue : getattr ( self . task_queue , 'task_done' , dummy_func )() self . __currentTask = None finally : if self . killed is not True : self . killed = True if self . pool is not None : self . pool . remove_worker ( workerTooRemove = self ) safe_stop def safe_stop ( self ) View Source def safe_stop(self): self.killed = True setDaemon def setDaemon ( self , daemonic ) Set whether this thread is a daemon. This method is deprecated, use the .daemon property instead. View Source def setDaemon ( self , daemonic ): \"\"\"Set whether this thread is a daemon. This method is deprecated, use the .daemon property instead. \"\"\" import warnings warnings . warn ( 'setDaemon() is deprecated, set the daemon attribute instead' , DeprecationWarning , stacklevel = 2 ) self . daemon = daemonic setName def setName ( self , name ) Set the name string for this thread. This method is deprecated, use the name attribute instead. View Source def setName ( self , name ): \"\"\"Set the name string for this thread. This method is deprecated, use the name attribute instead. \"\"\" import warnings warnings . warn ( 'setName() is deprecated, set the name attribute instead' , DeprecationWarning , stacklevel = 2 ) self . name = name start def start ( self ) Start the thread's activity. It must be called at most once per thread object. It arranges for the object's run() method to be invoked in a separate thread of control. This method will raise a RuntimeError if called more than once on the same thread object. View Source def start ( self ) : \"\"\"Start the thread's activity. It must be called at most once per thread object. It arranges for the object's run() method to be invoked in a separate thread of control. This method will raise a RuntimeError if called more than once on the same thread object. \"\"\" if not self . _initialized : raise RuntimeError ( \"thread.__init__() not called\" ) if self . _started . is_set () : raise RuntimeError ( \"threads can only be started once\" ) with _active_limbo_lock : _limbo [ self ] = self try : _start_new_thread ( self . _bootstrap , ()) except Exception : with _active_limbo_lock : del _limbo [ self ] raise self . _started . wait () terminate def terminate ( self ) -> None This raises a SysExit exception onto the the Worker thread un-safely killing it. :return: (None) View Source def terminate ( self ) -> None : \"\"\" This raises a SysExit exception onto the the Worker thread un-safely killing it. - :return: (None) \"\"\" a_raise ( self . __get_my_tid (), SystemExit ) Threaded class Threaded ( * args , ** kwargs ) To be used as a Decorator. When decorating a function/method that callable when be run in a Python thread. The function will return a 'Task' object. View Source class Threaded(__PyMultiDec): \"\"\" <a name= \"Threaded\" ></a> To be used as a Decorator. When decorating a function/method that callable when be run in a Python thread. The function will return a 'Task' object. \"\"\" def __init__(self, *args, **kwargs): self.wType = ThreadWorker self.pType = ThreadPool super(Threaded, self).__init__(*args, **kwargs) Ancestors (in MRO) PyMultiTasking.utils.__PyMultiDec Class variables pType wType","title":"Threadingutils"},{"location":"reference/PyMultiTasking/ThreadingUtils/#module-pymultitaskingthreadingutils","text":"View Sourceusr/bin/env python3 # -*- coding=utf-8 -*- # Author: Ryan Henrichson # Version: 2.0 import logging import threading from threading import RLock from PyMultiTasking.utils import wait_lock , Worker , Pool , __PyMultiDec from PyMultiTasking.utils import __async_raise as a_raise # logging.basicConfig(format='%(asctime)s %(levelname)s %(name)s %(funcName)s %(lineno)s %(message)s', # level=logging.DEBUG) log = logging . getLogger ( 'Threading' ) # logging.getLoggerClass().manager.emittedNoHandlerWarning = 1 class Threaded ( __PyMultiDec ): \"\"\"<a name=\"Threaded\"></a> To be used as a Decorator. When decorating a function/method that callable when be run in a Python thread. The function will return a 'Task' object. \"\"\" def __init__ ( self , * args , ** kwargs ): self . wType = ThreadWorker self . pType = ThreadPool super ( Threaded , self ) . __init__ ( * args , ** kwargs ) class ThreadWorker ( Worker , threading . Thread ): \"\"\" <a name=\"ThreadWorker\"></a> This is designed to be managed by a ThreadPool. However, it can run on its own as well. It runs until told to stop and works tasks that come from a the PriorityTaskQueue maintained by the Pool. \"\"\" workerType = 'THREAD' def __init__ ( self , * args , ** kwargs ): kwargs . update ({ 'log' : log }) super ( ThreadWorker , self ) . __init__ ( * args , ** kwargs ) def __get_my_tid ( self ) -> int : \"\"\" Determines the instance's thread ID - :return: (int) \"\"\" if not self . is_alive (): raise threading . ThreadError ( \"Thread is not active\" ) if hasattr ( self , \"_thread_id\" ): return self . _thread_id for tid , tobj in getattr ( threading , '_active' , dict ()) . items (): if tobj is self : self . _thread_id = tid return tid raise AssertionError ( \"Could not determine the thread's ID\" ) def terminate ( self ) -> None : \"\"\" This raises a SysExit exception onto the the Worker thread un-safely killing it. - :return: (None) \"\"\" a_raise ( self . __get_my_tid (), SystemExit ) def kill ( self ) -> None : self . safe_stop () return self . terminate () # noinspection PyPep8Naming class ThreadPool ( Pool ): \"\"\" <a name=\"ThreadPool\"></a> This manages a pool of ThreadWorkers that get tasks from a 'PriorityTaskQueue'. The workers consume tasks from the taskQueue until they are told to stop. The ThreadPool class keeps a registry of all ThreadPools objects. \"\"\" __regRLock = RLock () __pool_registry = [] def __init__ ( self , * args , ** kwargs ): kwargs . update ({ 'log' : log }) super ( ThreadPool , self ) . __init__ ( ThreadWorker , * args , ** kwargs ) ThreadPool . register_pool ( self ) @classmethod def get_pool_by_name ( cls , name , timeout = 60 ): with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = False ) as acquired : if acquired is False : return False for pool in cls . __pool_registry : if name == pool . name : return pool @classmethod def get_pools ( cls , name = None , timeout = 60 ): with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = False ) as acquired : if acquired is False : return [] if name : return [ pool for pool in cls . __pool_registry if name == pool . name ] return cls . __pool_registry @classmethod def join_pools ( cls , timeout = 60 ): with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = False ) as acquired : if acquired is False : return False for pool in cls . __pool_registry : pool . join ( timeout = timeout ) return True @classmethod def register_pool ( cls , pool , timeout = 60 ): with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = True ): if isinstance ( pool , Pool ): cls . __pool_registry . append ( pool ) if __name__ == '__main__' : print ( 'This should be called as a module.' )","title":"Module PyMultiTasking.ThreadingUtils"},{"location":"reference/PyMultiTasking/ThreadingUtils/#variables","text":"log","title":"Variables"},{"location":"reference/PyMultiTasking/ThreadingUtils/#classes","text":"","title":"Classes"},{"location":"reference/PyMultiTasking/ThreadingUtils/#threadpool","text":"class ThreadPool ( * args , ** kwargs ) This manages a pool of ThreadWorkers that get tasks from a 'PriorityTaskQueue'. The workers consume tasks from the taskQueue until they are told to stop. The ThreadPool class keeps a registry of all ThreadPools objects. View Source class ThreadPool(Pool): \"\"\" <a name= \"ThreadPool\" ></a> This manages a pool of ThreadWorkers that get tasks from a 'PriorityTaskQueue'. The workers consume tasks from the taskQueue until they are told to stop. The ThreadPool class keeps a registry of all ThreadPools objects. \"\"\" __regRLock = RLock() __pool_registry = [] def __init__(self, *args, **kwargs): kwargs.update({'log': log}) super(ThreadPool, self).__init__(ThreadWorker, *args, **kwargs) ThreadPool.register_pool(self) @classmethod def get_pool_by_name(cls, name, timeout=60): with wait_lock(cls.__regRLock, timeout=timeout, raise_exc=False) as acquired: if acquired is False: return False for pool in cls.__pool_registry: if name == pool.name: return pool @classmethod def get_pools(cls, name=None, timeout=60): with wait_lock(cls.__regRLock, timeout=timeout, raise_exc=False) as acquired: if acquired is False: return [] if name: return [pool for pool in cls.__pool_registry if name == pool.name] return cls.__pool_registry @classmethod def join_pools(cls, timeout=60): with wait_lock(cls.__regRLock, timeout=timeout, raise_exc=False) as acquired: if acquired is False: return False for pool in cls.__pool_registry: pool.join(timeout=timeout) return True @classmethod def register_pool(cls, pool, timeout=60): with wait_lock(cls.__regRLock, timeout=timeout, raise_exc=True): if isinstance(pool, Pool): cls.__pool_registry.append(pool)","title":"ThreadPool"},{"location":"reference/PyMultiTasking/ThreadingUtils/#ancestors-in-mro","text":"PyMultiTasking.utils.Pool","title":"Ancestors (in MRO)"},{"location":"reference/PyMultiTasking/ThreadingUtils/#static-methods","text":"","title":"Static methods"},{"location":"reference/PyMultiTasking/ThreadingUtils/#as_completed","text":"def as_completed ( tasks : 'List[Task]' ) View Source @staticmethod def as_completed ( tasks : List [ Task ] ) : def _finished_tasks ( task_item ) : return task_item if task_item . is_set () else None lengthOfTasks = len ( tasks ) finished_tasks = set () while len ( finished_tasks ) < lengthOfTasks : for task in filter ( _finished_tasks , tasks ) : if task not in finished_tasks : finished_tasks . add ( task ) yield task time . sleep ( 0.01 )","title":"as_completed"},{"location":"reference/PyMultiTasking/ThreadingUtils/#get_pool_by_name","text":"def get_pool_by_name ( name , timeout = 60 ) View Source @classmethod def get_pool_by_name ( cls , name , timeout = 60 ) : with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = False ) as acquired : if acquired is False : return False for pool in cls . __pool_registry : if name == pool . name : return pool","title":"get_pool_by_name"},{"location":"reference/PyMultiTasking/ThreadingUtils/#get_pools","text":"def get_pools ( name = None , timeout = 60 ) View Source @classmethod def get_pools ( cls , name = None , timeout = 60 ) : with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = False ) as acquired : if acquired is False : return [] if name : return [ pool for pool in cls.__pool_registry if name == pool.name ] return cls . __pool_registry","title":"get_pools"},{"location":"reference/PyMultiTasking/ThreadingUtils/#join_pools","text":"def join_pools ( timeout = 60 ) View Source @classmethod def join_pools ( cls , timeout = 60 ) : with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = False ) as acquired : if acquired is False : return False for pool in cls . __pool_registry : pool . join ( timeout = timeout ) return True","title":"join_pools"},{"location":"reference/PyMultiTasking/ThreadingUtils/#register_pool","text":"def register_pool ( pool , timeout = 60 ) View Source @classmethod def register_pool ( cls , pool , timeout = 60 ) : with wait_lock ( cls . __regRLock , timeout = timeout , raise_exc = True ) : if isinstance ( pool , Pool ) : cls . __pool_registry . append ( pool )","title":"register_pool"},{"location":"reference/PyMultiTasking/ThreadingUtils/#instance-variables","text":"active_workers has_tasks has_workers highest_priority inactive_workers is_active This determines is the Pool both has workers and has work to do. This doesn't have anything to do with a Pool's state. is_idle needs_workers num_active_tasks num_queued_tasks This is a wrapper for the 'qsize()' method from PriorityTaskQueue. num_workers state This is a string that has only 4 valid string values that determines the state of the Pool. unfinished_tasks This calls the 'unfinishedTasks' property of PriorityTaskQueue. And is equal to the number of tasks submitted minus the number of times a Task has been Worked by a Worker. workers This is a protected (wrapped in a lock) List of Workers managed by this pool.","title":"Instance variables"},{"location":"reference/PyMultiTasking/ThreadingUtils/#methods","text":"","title":"Methods"},{"location":"reference/PyMultiTasking/ThreadingUtils/#add_worker","text":"def add_worker ( self , workerAutoKill : 'Optional[bool]' = None , allow_restart : 'bool' = False , ** kwargs ) -> 'bool' Adds a single new worker too the Pool. :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in :return: (bool) View Source def add_worker ( self , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False , ** kwargs ) -> bool : \"\"\" Adds a single new worker too the Pool. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in - :return: (bool) \"\"\" self . log . debug ( \"Attempting to add new worker!\" ) if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if self . num_workers >= self . maxWorkers : return False self . workers . append ( self . workerType ( self , workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill )) return True","title":"add_worker"},{"location":"reference/PyMultiTasking/ThreadingUtils/#join","text":"def join ( self , timeout : 'int' ) -> 'bool' This first calls 'waitCompletion' with 'block=True' and then calls 'shutdown'. The goal is to try to wait for all Tasks to complete and then close out the Pool. :param timeout: (int)The length of time to wait on both join and shutdown. :return: (bool) View Source def join ( self , timeout : int ) -> bool : \"\"\" This first calls ' waitCompletion ' with ' block = True ' and then calls ' shutdown '. The goal is to try to wait for all Tasks to complete and then close out the Pool. - :param timeout: (int)The length of time to wait on both join and shutdown. - :return: (bool) \"\"\" with wait_lock ( self . __taskLock , timeout = timeout ) : start_time = time . monotonic () self . wait_completion ( timeout , block = True ) return self . shutdown ( timeout = int ( max ( timeout - ( time . monotonic () - start_time ), 1 )))","title":"join"},{"location":"reference/PyMultiTasking/ThreadingUtils/#map","text":"def map ( self , fn : 'Callable' , params : 'Tuple' , chunksize : 'int' = 0 , * args , ** kwargs ) -> 'None' A simple mapping tool that takes different params (a List of tuples formatted like [( args, *kwargs)]) and pass them too a function. chunksize determines how too break up the list and distribute it across Workers. :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task :param params: (Tuple) The Tuple should be formatted like so ( ((arg1, ), {'kwarg1': 'value'}), ...). Each item within the Tuple is a Tuple itself with two items. The first item is positional arguments (args) and the second item is keyword arguments (kwargs). Even if they are empty they need to exist. :param chunksize: (int) If left at 0 the method will attempt to spread the tasks as evenly as possible. Otherwise it will take the number to mean how many Tasks will be given to a single Worker. :param kwargs: These are keyword arguments that get passed to the 'submit' method. :return: (None) View Source def map ( self , fn : Callable , params : Tuple , chunksize : int = 0 , * args , ** kwargs ) -> None : \"\"\" A simple mapping tool that takes different params (a List of tuples formatted like [(*args, **kwargs)]) and pass them too a function. chunksize determines how too break up the list and distribute it across Workers. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param params: (Tuple) The Tuple should be formatted like so ( ((arg1, ), {'kwarg1': 'value'}), ...). Each item within the Tuple is a Tuple itself with two items. The first item is positional arguments (args) and the second item is keyword arguments (kwargs). Even if they are empty they need to exist. - :param chunksize: (int) If left at 0 the method will attempt to spread the tasks as evenly as possible. Otherwise it will take the number to mean how many Tasks will be given to a single Worker. - :param kwargs: These are keyword arguments that get passed to the 'submit' method. - :return: (None) \"\"\" if 'submit_task_autospawn' not in kwargs : kwargs [ 'submit_task_autospawn' ] = True if chunksize == 0 : if len ( params ) <= self . maxWorkers : chunksize = 1 else : chunksize = round ( len ( params ) / self . maxWorkers ) def chunkHelper ( func , chunkList ): return [ func ( * parms [ 0 ], ** parms [ 1 ]) for parms in chunkList ] def listIntoChunks ( lst ): return [ lst [ i * chunksize :( i + 1 ) * chunksize ] for i in range (( len ( lst ) + chunksize - 1 ) // chunksize )] for item in listIntoChunks ( params ): self . submit ( partial ( chunkHelper , func = fn , chunkList = item ), ** kwargs )","title":"map"},{"location":"reference/PyMultiTasking/ThreadingUtils/#remove_worker","text":"def remove_worker ( self , workerTooRemove : 'Optional[Worker]' = None , timeout : 'int' = 30 , allow_abandon : 'bool' = False ) -> 'bool' Removes a single new worker from the Pool. This can be called to remove the last Worker or you can specify a Worker to remove. :param workerTooRemove: (Worker) This is usually sent when a Worker is self terminating :param timeout: (int) 30, How much time it is willing to wait. NOTE: This is doubled when specifying a worker with the workerTooRemove parameter. :param allow_abandon: (bool) False, This determines if the thread will simply be abandoned if it cannot normally remove it from the pool. It will only do this if 'safe_stop' and 'terminate' methods fail. :return: (bool) View Source def remove_worker ( self , workerTooRemove : Optional [ Worker ] = None , timeout : int = 30 , allow_abandon : bool = False ) -> bool : \"\"\" Removes a single new worker from the Pool. This can be called to remove the last Worker or you can specify a Worker to remove. - :param workerTooRemove: (Worker) This is usually sent when a Worker is self terminating - :param timeout: (int) 30, How much time it is willing to wait. NOTE: This is doubled when specifying a worker with the workerTooRemove parameter. - :param allow_abandon: (bool) False, This determines if the thread will simply be abandoned if it cannot normally remove it from the pool. It will only do this if 'safe_stop' and 'terminate' methods fail. - :return: (bool) \"\"\" def wait_helper ( wait_time , start_time , ev , wtr ) : current_time = time . monotonic () while current_time < start_time + wait_time and wtr in self . workers : ev . wait ( timeout = 0.1 ) return wtr not in self . workers try : if self . num_workers <= 0 : return False if workerTooRemove in self . workers and workerTooRemove . killed : self . workers . pop ( self . workers . index ( workerTooRemove )) return True e = Event () if workerTooRemove is not None : workerTooRemove . safe_stop () if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ) : return True self . log . warning ( f '[WARN]: worker({workerTooRemove}) needs to be terminated in order to be removed.' ) getattr ( workerTooRemove , 'terminate' , dummy_func )() if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ) : return True if allow_abandon : self . log . warning ( f '[WARN]: worker({workerTooRemove}) is being abandoned.' ) worker = self . workers . pop ( self . workers . index ( workerTooRemove )) if worker . killed is not True : worker . killed = True return True return False else : current_num = self . num_workers self . submit ( Task ( Worker . __KILL__ , priority = self . highest_priority + 1 , kill = True ), submit_task_autospawn = False ) if timeout > 0 : current = start = time . monotonic () while current < start + timeout and self . num_workers >= current_num : e . wait ( timeout = 0.1 ) return self . num_workers < current_num return True except Exception as e : self . log . error ( f '[ERROR]: Error occurred while attempting to remove worker: {e}' ) self . log . debug ( f '[DEBUG]: Trace for error while attempting to remove worker: {traceback.format_exc()}' ) return False finally : if self . num_workers == 0 : self . state = __INACTIVE__","title":"remove_worker"},{"location":"reference/PyMultiTasking/ThreadingUtils/#set_max_workers","text":"def set_max_workers ( self , maxWorkers : 'int' ) -> 'int' Set the maximum number of threads that will remain active. Return the maximum thread limit. :param maxWorkers: (int) Max thread limit :return: (int) View Source def set_max_workers ( self , maxWorkers : int ) -> int : \"\"\" Set the maximum number of threads that will remain active. Return the maximum thread limit. - :param maxWorkers: (int) Max thread limit - :return: (int) \"\"\" if type ( maxWorkers ) is int and maxWorkers > - 1 : self . maxWorkers = maxWorkers return self . maxWorkers","title":"set_max_workers"},{"location":"reference/PyMultiTasking/ThreadingUtils/#setup_workers","text":"def setup_workers ( self , numOfWorkers : 'int' = 1 , workerAutoKill : 'Optional[bool]' = None , allow_restart : 'bool' = False ) -> 'bool' Generally only used by init. This setups Worker threads to be managed by the Pool. :param numOfWorkers: (int) Number workers setup. IF the number of workers is higher then the value of 'maxWorkers' then 'maxWorkers' is updated. The numOfWorkers is how many Workers the Pool has not now many new Workers get added. :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in the 'taskQueue'. :return: (bool) View Source def setup_workers ( self , numOfWorkers : int = 1 , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False ) -> bool : \"\"\" Generally only used by init. This setups Worker threads to be managed by the Pool. - :param numOfWorkers: (int) Number workers setup. IF the number of workers is higher then the value of 'maxWorkers' then 'maxWorkers' is updated. The numOfWorkers is how many Workers the Pool has *not* now many new Workers get added. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in the 'taskQueue'. - :return: (bool) \"\"\" if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if numOfWorkers > self . maxWorkers : self . set_max_workers ( numOfWorkers ) numOfNewWorkers = ( numOfWorkers - self . num_workers ) elif numOfWorkers > ( self . maxWorkers - self . num_workers ) : numOfNewWorkers = ( self . maxWorkers - self . num_workers ) else : numOfNewWorkers = numOfWorkers for _ in range ( 0 , numOfNewWorkers ) : self . add_worker ( workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill , allow_restart = allow_restart ) return numOfNewWorkers > 0","title":"setup_workers"},{"location":"reference/PyMultiTasking/ThreadingUtils/#shutdown","text":"def shutdown ( self , timeout : 'Optional[int]' = None , unsafe : 'Optional[bool]' = None ) -> 'bool' This sends a kill operation too all the workers and waits for them to complete and then removes the threads. It can also attempt to kill Workers in an unsafe way with the 'terminate' Worker method. :param timeout: (int) The length of time to wait on tasks to be stopped :param unsafe: (bool/None) True: The 'terminate' method will be called on each Worker. False: Even if the timeout is reached the 'terminate' method will not be called. None: This will attempt to safely wait for the Workers too finish but if timeout is reached then the 'terminate' method will be called. :return: (bool) View Source def shutdown ( self , timeout : Optional [ int ] = None , unsafe : Optional [ bool ] = None ) -> bool : \"\"\" This sends a kill operation too all the workers and waits for them to complete and then removes the threads. It can also attempt to kill Workers in an unsafe way with the 'terminate' Worker method. - :param timeout: (int) The length of time to wait on tasks to be stopped - :param unsafe: (bool/None) True: The 'terminate' method will be called on each Worker. False: Even if the timeout is reached the 'terminate' method will *not* be called. None: This will attempt to safely wait for the Workers too finish but if timeout is reached then the 'terminate' method will be called. - :return: (bool) \"\"\" e = Event () self . state = __STOPPING__ if timeout is None : timeout = self . __timeout def _clear_helper ( task ) : return task . task . func != Worker . __KILL__ def _clear_shutdown_tasks () : try : tasks = [] while not self . taskQueue . empty () : tasks . append ( self . taskQueue . get ()) self . taskQueue . task_done () for task in filter ( _clear_helper , tasks ) : if self . has_workers : self . taskQueue . put_nowait ( task ) else : self . ignoredTasks . append ( task ) except Exception as e : self . log . error ( f '[ERROR]: Error while clearing old tasks: {e}' ) self . log . debug ( f '[DEBUG]: Trace for error clearing old tasks: {traceback.format_exc()}' ) def _unsafe_shutdown () : for worker in self . workers : self . log . info ( f 'Worker: {worker} will be killed unsafely.' ) worker . terminate () if unsafe : _unsafe_shutdown () e . wait ( timeout = 0.1 ) return self . num_workers == 0 start_time = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ) : for x in range ( 0 , self . num_workers ) : self . remove_worker ( timeout = 0 ) current_time = time . monotonic () while current_time < start_time + timeout : if self . num_workers <= 0 : self . log . info ( 'There are no more workers. No need for forced timeout' ) break e . wait ( timeout = 0.1 ) current_time = time . monotonic () if unsafe is None : _unsafe_shutdown () e . wait ( timeout = 0.1 ) _clear_shutdown_tasks () if self . num_workers == 0 : self . state = __STOPPED__ return True return False","title":"shutdown"},{"location":"reference/PyMultiTasking/ThreadingUtils/#submit","text":"def submit ( self , fn : 'Callable' , * args , ** kwargs ) -> 'Union[Task, bool]' This is the function used to submit a Task to the Pool. Simply provide a function as 'fn' and then arguments that need to be passed too that function and it will create a Task and add it to the PriorityTaskQueue to be worked. :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task :param args: These args will be passed to the Task object. :param kwargs: The following keywords will be pulled out. 'submit_task_nowait', 'submit_task_timeout', 'submit_task_autospawn', 'submit_task_priority'. All others will be passed to Task. 'submit_task_nowait': (bool) tells 'submit' to use the 'put_nowait' method on PriorityTaskQueue. 'submit_task_timeout': (int/float) how long should one wait too submit. 'submit_task_autospawn': (bool/None) determines if new Worker should be spawned because of more tasks. 'submit_task_priority': (int) changes the priority of the task. :return: (Task/bool) View Source def submit ( self , fn : Callable , * args , ** kwargs ) -> Union [ Task , bool ]: \"\"\" This is the function used to submit a Task to the Pool. Simply provide a function as 'fn' and then arguments that need to be passed too that function and it will create a Task and add it to the PriorityTaskQueue to be worked. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param args: These args will be passed to the Task object. - :param kwargs: The following keywords will be pulled out. 'submit_task_nowait', 'submit_task_timeout', 'submit_task_autospawn', 'submit_task_priority'. All others will be passed to Task. + 'submit_task_nowait': (bool) tells 'submit' to use the 'put_nowait' method on PriorityTaskQueue. + 'submit_task_timeout': (int/float) how long should one wait too submit. + 'submit_task_autospawn': (bool/None) determines if new Worker should be spawned because of more tasks. + 'submit_task_priority': (int) changes the priority of the task. - :return: (Task/bool) \"\"\" if fn is None : return False def autospawn_parser ( tmpAutospawn , state ): if state == __STOPPING__ or state == __STOPPED__ : return False if self . needs_workers and tmpAutospawn is None : return True return tmpAutospawn nowait = kwargs . pop ( ' submit_task_nowait ' , True ) timeout = kwargs . pop ( ' submit_task_timeout ' , 10 ) autospawn = autospawn_parser ( kwargs . pop ( ' submit_task_autospawn ' , None ), self . state ) priority = kwargs . pop ( ' submit_task_priority ' , 10 ) or 10 start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): if isinstance ( fn , Task ): task = fn else : task = Task ( fn , priority , * args , ** kwargs ) try : if nowait : self . taskQueue . put_nowait ( task ) else : self . taskQueue . put ( task , timeout = max ( 0.1 , ( start + timeout ) - time . monotonic ())) if autospawn or autospawn is None and self . needs_workers : self . add_worker ( ** kwargs ) return task except Exception as e : self . log . error ( f ' Error in submitting task : { e } \\ n { traceback . format_exc ()} ' ) return False finally : if self . state is not __ACTIVE__ and self . num_workers > 0 : self . state = __ACTIVE__","title":"submit"},{"location":"reference/PyMultiTasking/ThreadingUtils/#wait_completion","text":"def wait_completion ( self , timeout : 'Union[int, float]' , delay : 'Union[int, float]' = 0.1 , block : 'bool' = False ) -> 'bool' This method waits until all Tasks in the PriorityTaskQueue is done. If the parameter block is True it will stop any new Task from being submitted while waiting. :param timeout: (int/float) How long to wait for all tasks in the 'taskQueue' to be finished. :param delay: (int/float) The amount of time to wait before checking again in seconds. Default 0.1. :param block: (bool) This will stop new tasks from being submitted to the Queue until finished. :return: (bool) View Source def wait_completion ( self , timeout : Union [ int , float ], delay : Union [ int , float ] = 0.1 , block : bool = False ) -> bool : \"\"\" This method waits until all Tasks in the PriorityTaskQueue is done. If the parameter block is True it will stop any new Task from being submitted while waiting. - :param timeout: (int/float) How long to wait for all tasks in the ' taskQueue ' to be finished. - :param delay: (int/float) The amount of time to wait before checking again in seconds. Default 0.1. - :param block: (bool) This will stop new tasks from being submitted to the Queue until finished. - :return: (bool) \"\"\" e = Event () def _wait_completion ( waitTime : Union [ int , float ]) -> bool : current_time = start_time = time . monotonic () while current_time < start_time + waitTime and self . has_workers : if self . unfinished_tasks == 0 : return True e . wait ( timeout = delay ) current_time = time . monotonic () return False if block : start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ) : return _wait_completion ( max ( 0.1 , ( start + timeout ) - time . monotonic ())) return _wait_completion ( timeout )","title":"wait_completion"},{"location":"reference/PyMultiTasking/ThreadingUtils/#threadworker","text":"class ThreadWorker ( * args , ** kwargs ) This is designed to be managed by a ThreadPool. However, it can run on its own as well. It runs until told to stop and works tasks that come from a the PriorityTaskQueue maintained by the Pool. View Source class ThreadWorker(Worker, threading.Thread): \"\"\" <a name= \"ThreadWorker\" ></a> This is designed to be managed by a ThreadPool. However, it can run on its own as well. It runs until told to stop and works tasks that come from a the PriorityTaskQueue maintained by the Pool. \"\"\" workerType = 'THREAD' def __init__(self, *args, **kwargs): kwargs.update({'log': log}) super(ThreadWorker, self).__init__(*args, **kwargs) def __get_my_tid(self) -> int: \"\"\" Determines the instance's thread ID - :return: (int) \"\"\" if not self.is_alive(): raise threading.ThreadError(\"Thread is not active\") if hasattr(self, \"_thread_id\"): return self._thread_id for tid, tobj in getattr(threading, '_active', dict()).items(): if tobj is self: self._thread_id = tid return tid raise AssertionError(\"Could not determine the thread's ID\") def terminate(self) -> None: \"\"\" This raises a SysExit exception onto the the Worker thread un-safely killing it. - :return: (None) \"\"\" a_raise(self.__get_my_tid(), SystemExit) def kill(self) -> None: self.safe_stop() return self.terminate()","title":"ThreadWorker"},{"location":"reference/PyMultiTasking/ThreadingUtils/#ancestors-in-mro_1","text":"PyMultiTasking.utils.Worker threading.Thread","title":"Ancestors (in MRO)"},{"location":"reference/PyMultiTasking/ThreadingUtils/#class-variables","text":"name workerType","title":"Class variables"},{"location":"reference/PyMultiTasking/ThreadingUtils/#instance-variables_1","text":"current_priority This changes to the priority of each incoming task. daemon A boolean value indicating whether this thread is a daemon thread. This must be set before start() is called, otherwise RuntimeError is raised. Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False. The entire Python program exits when only daemon threads are left. ident Thread identifier of this thread or None if it has not been started. This is a nonzero integer. See the get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited. is_active This determines if the Worker currently has a Task to work. native_id Native integral thread ID of this thread, or None if it has not been started. This is a non-negative integer. See the get_native_id() function. This represents the Thread ID as reported by the kernel. task_queue timeout This property will return 0 if it thinks it doesn't need to run any longer and is ready to self terminate","title":"Instance variables"},{"location":"reference/PyMultiTasking/ThreadingUtils/#methods_1","text":"","title":"Methods"},{"location":"reference/PyMultiTasking/ThreadingUtils/#getname","text":"def getName ( self ) Return a string used for identification purposes only. This method is deprecated, use the name attribute instead. View Source def getName ( self ): \"\"\"Return a string used for identification purposes only. This method is deprecated, use the name attribute instead. \"\"\" import warnings warnings . warn ( 'getName() is deprecated, get the name attribute instead' , DeprecationWarning , stacklevel = 2 ) return self . name","title":"getName"},{"location":"reference/PyMultiTasking/ThreadingUtils/#get_next_task","text":"def get_next_task ( self ) -> 'Union[Task, bool, None]' This gets the next Task in the taskQueue :return: (Task) View Source def get_next_task ( self ) -> Union [ Task, bool, None ] : \"\"\" This gets the next Task in the taskQueue - :return: (Task) \"\"\" try : self . __currentTask = None if self . pool is None and self . _target is not None : self . __currentTask = self . _target self . __currentTask . worker = self self . __currentTask . kill = True self . __currentTask . ignore_queue = True elif self . pool is None and self . __personalQue is None : self . __currentTask = None else : self . __currentTask = self . task_queue . get ( timeout = self . __timeout ) self . __currentTask . worker = self return self . __currentTask except Empty : if self . timeout == 0 : return Task ( Worker . __KILL__ , kill = True , ignore_queue = True ) return False except Exception as e : self . log . error ( f '[ERROR]: Error in getting task: {e}' ) self . log . debug ( f '[DEBUG]: trace for error in getting task: {traceback.format_exc()}' ) return None","title":"get_next_task"},{"location":"reference/PyMultiTasking/ThreadingUtils/#isdaemon","text":"def isDaemon ( self ) Return whether this thread is a daemon. This method is deprecated, use the daemon attribute instead. View Source def isDaemon ( self ): \"\"\"Return whether this thread is a daemon. This method is deprecated, use the daemon attribute instead. \"\"\" import warnings warnings . warn ( 'isDaemon() is deprecated, get the daemon attribute instead' , DeprecationWarning , stacklevel = 2 ) return self . daemon","title":"isDaemon"},{"location":"reference/PyMultiTasking/ThreadingUtils/#is_alive","text":"def is_alive ( self ) Return whether the thread is alive. This method returns True just before the run() method starts until just after the run() method terminates. See also the module function enumerate(). View Source def is_alive ( self ): \"\"\"Return whether the thread is alive. This method returns True just before the run() method starts until just after the run() method terminates. See also the module function enumerate(). \"\"\" assert self . _initialized , \"Thread.__init__() not called\" if self . _is_stopped or not self . _started . is_set (): return False self . _wait_for_tstate_lock ( False ) return not self . _is_stopped","title":"is_alive"},{"location":"reference/PyMultiTasking/ThreadingUtils/#join_1","text":"def join ( self , timeout = None ) Wait until the thread terminates. This blocks the calling thread until the thread whose join() method is called terminates -- either normally or through an unhandled exception or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As join() always returns None, you must call is_alive() after join() to decide whether a timeout happened -- if the thread is still alive, the join() call timed out. When the timeout argument is not present or None, the operation will block until the thread terminates. A thread can be join()ed many times. join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to join() a thread before it has been started and attempts to do so raises the same exception. View Source def join(self, timeout=None): \"\"\"Wait until the thread terminates. This blocks the calling thread until the thread whose join() method is called terminates -- either normally or through an unhandled exception or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As join() always returns None, you must call is_alive() after join() to decide whether a timeout happened -- if the thread is still alive, the join() call timed out. When the timeout argument is not present or None, the operation will block until the thread terminates. A thread can be join()ed many times. join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to join() a thread before it has been started and attempts to do so raises the same exception. \"\"\" if not self._initialized: raise RuntimeError(\"Thread.__init__() not called\") if not self._started.is_set(): raise RuntimeError(\"cannot join thread before it is started\") if self is current_thread(): raise RuntimeError(\"cannot join current thread\") if timeout is None: self._wait_for_tstate_lock() else: # the behavior of a negative timeout isn't documented, but # historically .join(timeout=x) for x<0 has acted as if timeout=0 self._wait_for_tstate_lock(timeout=max(timeout, 0))","title":"join"},{"location":"reference/PyMultiTasking/ThreadingUtils/#kill","text":"def kill ( self ) -> None View Source def kill ( self ) -> None : self . safe_stop () return self . terminate ()","title":"kill"},{"location":"reference/PyMultiTasking/ThreadingUtils/#run","text":"def run ( self ) -> 'None' This is an override of the run method within Thread that loops constantly waiting on another task. :return: (None) View Source def run ( self ) -> None : \"\"\" This is an override of the run method within Thread that loops constantly waiting on another task. - :return: (None) \"\"\" try : while not self . killed : task = self . get_next_task () if task is None : self . log . info ( 'task is None an error occurred in get_next_task method closing the thread' ) break elif task is not False : self . log . info ( f 'The task is: {task}' ) task ( * self . _args , ** self . _kwargs ) self . __currentTask = None if not task . ignore_queue : self . task_queue . task_done () if task . kill : self . log . info ( f 'Killing thread once task is complete: {task}' ) self . killed = True except Exception as e : self . log . error ( f '[ERROR]: While Worker thread is running with task: {self.__currentTask} Error: {e}' ) self . log . debug ( f '[DEBUG]: trace for error: {traceback.format_exc()}' ) if self . __currentTask is not None : if not self . __currentTask . isSet () : self . __currentTask . set () if not self . __currentTask . ignore_queue : getattr ( self . task_queue , 'task_done' , dummy_func )() self . __currentTask = None finally : if self . killed is not True : self . killed = True if self . pool is not None : self . pool . remove_worker ( workerTooRemove = self )","title":"run"},{"location":"reference/PyMultiTasking/ThreadingUtils/#safe_stop","text":"def safe_stop ( self ) View Source def safe_stop(self): self.killed = True","title":"safe_stop"},{"location":"reference/PyMultiTasking/ThreadingUtils/#setdaemon","text":"def setDaemon ( self , daemonic ) Set whether this thread is a daemon. This method is deprecated, use the .daemon property instead. View Source def setDaemon ( self , daemonic ): \"\"\"Set whether this thread is a daemon. This method is deprecated, use the .daemon property instead. \"\"\" import warnings warnings . warn ( 'setDaemon() is deprecated, set the daemon attribute instead' , DeprecationWarning , stacklevel = 2 ) self . daemon = daemonic","title":"setDaemon"},{"location":"reference/PyMultiTasking/ThreadingUtils/#setname","text":"def setName ( self , name ) Set the name string for this thread. This method is deprecated, use the name attribute instead. View Source def setName ( self , name ): \"\"\"Set the name string for this thread. This method is deprecated, use the name attribute instead. \"\"\" import warnings warnings . warn ( 'setName() is deprecated, set the name attribute instead' , DeprecationWarning , stacklevel = 2 ) self . name = name","title":"setName"},{"location":"reference/PyMultiTasking/ThreadingUtils/#start","text":"def start ( self ) Start the thread's activity. It must be called at most once per thread object. It arranges for the object's run() method to be invoked in a separate thread of control. This method will raise a RuntimeError if called more than once on the same thread object. View Source def start ( self ) : \"\"\"Start the thread's activity. It must be called at most once per thread object. It arranges for the object's run() method to be invoked in a separate thread of control. This method will raise a RuntimeError if called more than once on the same thread object. \"\"\" if not self . _initialized : raise RuntimeError ( \"thread.__init__() not called\" ) if self . _started . is_set () : raise RuntimeError ( \"threads can only be started once\" ) with _active_limbo_lock : _limbo [ self ] = self try : _start_new_thread ( self . _bootstrap , ()) except Exception : with _active_limbo_lock : del _limbo [ self ] raise self . _started . wait ()","title":"start"},{"location":"reference/PyMultiTasking/ThreadingUtils/#terminate","text":"def terminate ( self ) -> None This raises a SysExit exception onto the the Worker thread un-safely killing it. :return: (None) View Source def terminate ( self ) -> None : \"\"\" This raises a SysExit exception onto the the Worker thread un-safely killing it. - :return: (None) \"\"\" a_raise ( self . __get_my_tid (), SystemExit )","title":"terminate"},{"location":"reference/PyMultiTasking/ThreadingUtils/#threaded","text":"class Threaded ( * args , ** kwargs ) To be used as a Decorator. When decorating a function/method that callable when be run in a Python thread. The function will return a 'Task' object. View Source class Threaded(__PyMultiDec): \"\"\" <a name= \"Threaded\" ></a> To be used as a Decorator. When decorating a function/method that callable when be run in a Python thread. The function will return a 'Task' object. \"\"\" def __init__(self, *args, **kwargs): self.wType = ThreadWorker self.pType = ThreadPool super(Threaded, self).__init__(*args, **kwargs)","title":"Threaded"},{"location":"reference/PyMultiTasking/ThreadingUtils/#ancestors-in-mro_2","text":"PyMultiTasking.utils.__PyMultiDec","title":"Ancestors (in MRO)"},{"location":"reference/PyMultiTasking/ThreadingUtils/#class-variables_1","text":"pType wType","title":"Class variables"},{"location":"reference/PyMultiTasking/utils/","text":"Module PyMultiTasking.utils PyMultiTaskingTools Utilities This Python Package makes it easier to handle threads. This uses a schema of Task that is run by a Worker which is managed in a Pool. The Pool uses a PriorityTaskQueue a custom class that inherits from PriorityQueue. Summary of Functions get_cpu_count() -> int: Return the number of Logic CPU Cores on the system _async_raise(tid, exctype) -> None: Raises the exception, causing the thread to exit wait_lock (lock, timeout) -> Iterator[bool]: Meant to be used within a 'with' statement to throw an exception when timing out on a lock method_wait (func, timeout=60, delay=0.1, incompleteVar=None, raiseExc=False, args, *kwargs): Allows one to safely wait on a method to return. Summary of Classes Task (Event) This is a wrapper class that inherits from an Event Object and is used inside the Worker. It is designed to hold the function ran and save the results of the function. PriorityTaskQueue (PriorityQueue) This is a simple override of the PriorityQueue class that ensures the 'item' is a Task class. It is meant to be used with ThreadingPool. ProcessTaskQueue (JoinableQueue) This is a simple override of the JoinableQueue class that ensures the 'item' is a Task class it is meant to be used with ProcessPool. Worker This is designed to be managed by a Pool. It runs until told to stop and works tasks that come from a Queue maintained by the Pool. The Worker is meant to be a super class and only used to be inherited. It is the super class of either ThreadWorker or ProcessWorker. Pool This manages a pool of Workers and a queue of Tasks. The workers consume tasks from the taskQueue until they are told to stop. This is meant to be a super class and only used to be inherited. It is the super class of either ThreadPool or ProcessPool. MultipleEvents Designed to take multiple events and put them together to be waited on as a whole. View Sourceusr/bin/env python3 # -*- coding=utf-8 -*- \"\"\" # PyMultiTaskingTools Utilities This Python Package makes it easier to handle threads. This uses a schema of Task that is run by a Worker which is managed in a Pool. The Pool uses a PriorityTaskQueue a custom class that inherits from PriorityQueue. ## Summary of Functions get_cpu_count() -> int: <br /> Return the number of Logic CPU Cores on the system _async_raise(tid, exctype) -> None: <br /> Raises the exception, causing the thread to exit [wait_lock](#wait_lock)(lock, timeout) -> Iterator[bool]: <br /> Meant to be used within a 'with' statement to throw an exception when timing out on a lock [method_wait](#method_wait)(func, timeout=60, delay=0.1, incompleteVar=None, raiseExc=False, *args, **kwargs): <br /> Allows one to safely wait on a method to return. ## Summary of Classes [Task](#Task)(Event) <br /> This is a wrapper class that inherits from an Event Object and is used inside the Worker. It is designed to hold the function ran and save the results of the function. [PriorityTaskQueue](#PriorityTaskQueue)(PriorityQueue) <br /> This is a simple override of the PriorityQueue class that ensures the 'item' is a Task class. It is meant to be used with ThreadingPool. [ProcessTaskQueue](#ProcessTaskQueue)(JoinableQueue) <br /> This is a simple override of the JoinableQueue class that ensures the 'item' is a Task class it is meant to be used with ProcessPool. [Worker](#Worker) <br /> This is designed to be managed by a Pool. It runs until told to stop and works tasks that come from a Queue maintained by the Pool. The Worker is meant to be a super class and only used to be inherited. It is the super class of either ThreadWorker or ProcessWorker. [Pool](#Pool) <br /> This manages a pool of Workers and a queue of Tasks. The workers consume tasks from the taskQueue until they are told to stop. This is meant to be a super class and only used to be inherited. It is the super class of either ThreadPool or ProcessPool. [MultipleEvents](#MultipleEvents) <br /> Designed to take multiple events and put them together to be waited on as a whole. --- \"\"\" from __future__ import annotations import multiprocessing import time import logging import traceback import inspect import uuid import ctypes from queue import PriorityQueue , Empty , Queue from multiprocessing.queues import JoinableQueue from multiprocessing.synchronize import RLock , SemLock from multiprocessing import RLock as MultiProcRLock from contextlib import contextmanager from threading import Lock , RLock , Event , Semaphore from functools import partial , wraps from typing import Union , Optional , Iterator , Callable , Any , Type , Iterable , Tuple , List # logging.basicConfig(format='%(asctime)s %(levelname)s %(name)s %(funcName)s %(lineno)s %(message)s', # level=logging.DEBUG) _log = logging . getLogger ( 'MultiTaskingTools' ) __STARTING__ = \"__STARTING__\" __STOPPING__ = \"__STOPING__\" __ACTIVE__ = \"__ACTIVE__\" __INACTIVE__ = \"__INACTIVE__\" __STOPPED__ = \"__STOPPED__\" __THREADPOOL_STATES__ = { __STARTING__ : __STARTING__ , __STOPPING__ : __STOPPING__ , __ACTIVE__ : __ACTIVE__ , __INACTIVE__ : __INACTIVE__ , __STOPPED__ : __STOPPED__ } _DEFAULT_MAX_WORKERS = 4 def dummy_func ( * args , ** kwargs ): return kwargs . get ( '_default' , None ) def __async_raise ( tid : int , exctype : Type [ SystemExit ]) -> None : \"\"\"Raises the exception, causing the thread to exit\"\"\" res = ctypes . pythonapi . PyThreadState_SetAsyncExc ( ctypes . c_long ( tid ), ctypes . py_object ( exctype )) if res == 0 : raise ValueError ( \"Invalid thread ID\" ) elif res != 1 : ctypes . pythonapi . PyThreadState_SetAsyncExc ( ctypes . c_long ( tid ), None ) raise SystemError ( \"PyThreadState_SetAsyncExc failed\" ) def get_cpu_count () -> int : \"\"\"Return the number of Logic CPU Cores on the system\"\"\" try : from multiprocessing import cpu_count return cpu_count () except : return _DEFAULT_MAX_WORKERS @contextmanager def wait_lock ( lock : Any , timeout : Union [ int , float ], blocking : bool = True , raise_exc : bool = True ) -> Iterator [ bool ]: \"\"\" <a name=\"method_wait\"></a> Meant to be used within a 'with' statement to throw an exception when timing out on a lock - :param lock: (Lock/RLock/Semephore) the lock that will be acquired or an exception will be thrown - :param timeout: The amount of time to wait on attempting to gain lock. - :return: (generator of bools) This is used with a contextmanager decorator \"\"\" if isinstance ( lock , SemLock ): result = lock . acquire ( timeout = timeout ) else : result = lock . acquire ( blocking = blocking , timeout = timeout ) if result is False and raise_exc : raise RuntimeError ( \"The Lock was unable to be obtained within the timeout: %s \" % timeout ) yield result if result : lock . release () def safe_acquire ( lock : Union [ Lock , RLock ], timeout : Union [ int , float ]) -> bool : \"\"\" <a name=\"safe_acquire\"></a> Meant to be used as a safe way to wait on a lock. Returns False if time runs out. - :param lock: (Lock/RLock) the lock that will be acquired or return False - :param timeout: The amount of time to wait on attempting to gain lock. - :return: bools \"\"\" e = Event () try : current_time = start_time = time . monotonic () while current_time < start_time + timeout : if lock . acquire ( blocking = False ): return True e . wait ( timeout = 0.1 ) current_time = time . monotonic () return lock . acquire ( blocking = False ) except Exception as e : _log . error ( f \"ERROR in safe_acquire with timeout { timeout } : { e } \" ) _log . debug ( f \"[DEBUG] for safe_acquire: { traceback . format_exc () } \" ) return False def safe_release ( lock : Union [ Lock , RLock ]) -> bool : \"\"\"<a name=\"safe_acquire\"></a> Meant to be used as a safe way to release a lock. Returns False if the lock has already been released. - :param lock: (Lock/RLock) the lock that will be acquired or return False - :return: bools \"\"\" try : lock . release () return True except Exception as e : _log . error ( f \"ERROR in safe_release: { e } \" ) _log . debug ( f \"[DEBUG] for safe_release: { traceback . format_exc () } \" ) return False def method_wait ( func : Callable [ ... , Any ], timeout : int = 60 , delay : float = 0.1 , delayPercent : bool = False , delayAscending : Optional [ bool ] = None , incompleteVar : Optional [ bool ] = None , raiseExc : Union [ bool , Exception ] = False , * args , ** kwargs ): \"\"\" <a name=\"method_wait\"></a>Allows one to safely wait on a method to return. - *func*: (callable) Function to be executed using the method wait - *timeout*: (int, default 60) Amount of time to wait until giving up on the function - *delay*: (int or float, default 0.1) Amount of time to pause inbetween asking the function for results - *incompleteVar*: (any) Variable that indicates the function is not yet finished - *raiseExc*: (bool, default False) Causes methodWait to raise an exception instead of returning None - *args*: args that will be passed to the function - *kwargs*: kwargs that will be passed to the function - *return* could be anything \"\"\" e = Event () def ascending_helper ( num , multipler ): if num * multipler > 1 : yield num * multipler yield ascending_helper ( num * multipler , multipler ) else : yield num def delay_ascender ( time_delay ): if len ( time_delay ) > 1 : e . wait ( timeout = time_delay . pop ()) else : e . wait ( timeout = time_delay [ 0 ]) return time_delay def delay_by_time ( time_delay ): e . wait ( timeout = time_delay ) return time_delay def delay_by_percent ( time_delay ): e . wait ( timeout = max ( 0.1 , ( time . monotonic () - start_time ) * time_delay )) return time_delay rawKwargs = {} rawKwargs . update ( kwargs ) kwargs . pop ( 'failureVar' , None ) if delayPercent and delayAscending is None : delayer = delay_by_percent elif delayAscending is True : delay = [ num for num in ascending_helper ( timeout , delay )] delayer = delay_ascender elif delayAscending is False : delay = [ num for num in ascending_helper ( timeout , delay )] delay . sort () delayer = delay_ascender else : delayer = delay_by_time try : current_time = start_time = time . monotonic () while current_time < start_time + timeout : results = func ( * args , ** kwargs ) if 'failureVar' in rawKwargs and rawKwargs [ 'failureVar' ] == results : return results elif results == incompleteVar : delay = delayer ( delay ) current_time = time . monotonic () elif results is not incompleteVar : return results except Exception as e : _log . error ( f 'The function { func } has thrown an exception. { e } ' ) _log . debug ( f '[DEBUG]: trace for error: { traceback . format_exc () } ' ) if raiseExc is True : raise e elif inspect . isclass ( raiseExc ) and issubclass ( raiseExc , BaseException ): raise raiseExc ( f 'The function { func } has thrown an exception. { e } ' ) from e elif isinstance ( raiseExc , Exception ): raise raiseExc from e return e return incompleteVar # noinspection PyPep8Naming def Limiter ( num , blocking = True ): \"\"\" This is a decorator designed to decorate Threaded and Proccessed decorators to limit the number of simultaneous calls. \"\"\" sem = Semaphore ( num ) def wrapper ( func ): @wraps ( func ) def wrapped ( * args , ** kwargs ): if blocking : with sem : return func ( * args , ** kwargs ) else : kwargs . update ({ '_task_semaphore' : sem }) return func ( * args , ** kwargs ) return wrapped return wrapper class PriorityTaskQueue ( PriorityQueue ): \"\"\" <a name=\"PriorityTaskQueue\"></a> This is a simple override of the PriorityQueue class that ensures the 'item' is a Task class meant to be used ONLY in ThreadingPool \"\"\" def put_nowait ( self , item : Task ) -> None : if not isinstance ( item , Task ): raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super () . put_nowait ( item ) def put ( self , item : Task , block : bool = True , timeout : Union [ int , float , None ] = None ) -> None : if not isinstance ( item , Task ): raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super () . put ( item , block = block , timeout = timeout ) class ProcessTaskQueue ( JoinableQueue ): \"\"\" <a name=\"ProcessTaskQueue\"></a> This is a simple override of the JoinableQueue class that ensures the 'item' is a Task class meant to be used ONLY in ProcessingPool \"\"\" def __init__ ( self , maxsize = 0 , * , ctx = None ): super ( ProcessTaskQueue , self ) . __init__ ( maxsize = maxsize , ctx = ctx or multiprocessing . get_context ()) def put_nowait ( self , item : Task ) -> None : if not isinstance ( item , Task ): raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super () . put_nowait ( item ) def put ( self , item : Task , block : bool = True , timeout : Union [ int , float , None ] = None ) -> None : if not isinstance ( item , Task ): raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super () . put ( item , block = block , timeout = timeout ) class __PyMultiDec : wType = None pType = None def __init__ ( self , * args , ** kwargs ): _log . info ( f 'making Class Dec: args= { args } - kwargs= { kwargs } ' ) if len ( args ) == 1 and callable ( args [ 0 ]) and len ( kwargs ) == 0 : self . func = args [ 0 ] else : self . func = None self . callback_func = kwargs . get ( 'callback_func' , None ) self . kwargsLength = len ( kwargs ) self . daemon = kwargs . pop ( 'daemon' , None ) self . pool = kwargs . pop ( 'pool' , None ) self . personal_que = None self . worker = None if self . daemon is not None : if self . daemon is True : self . personal_que = PriorityTaskQueue () kwargs . update ({ '_worker_workerAutoKill' : False , '_worker_personalQue' : self . personal_que }) self . worker = self . wType ( ** { k . replace ( '_worker_' , '' ): v for k , v in kwargs . items () if k . startswith ( '_worker_' )}) else : worker = self . daemon self . personal_que = getattr ( worker , 'task_queue' ) elif self . pool is True or kwargs . get ( 'pool_name' , None ) is not None : self . pool = self . pType . get_pool_by_name ( name = kwargs . get ( 'pool_name' , None )) if not self . pool : kwargs . update ({ '_pool_workerAutoKill' : False , '_pool_name' : kwargs . get ( 'pool_name' , '' )}) self . pool = self . pType ( ** { k . replace ( '_pool_' , '' ): v for k , v in kwargs . items () if k . startswith ( '_pool_' )}) def __call__ ( self , * args , ** kwargs ): _log . debug ( f 'calling test_dec: args= { args } - kwargs= { kwargs } ' ) @wraps ( self . func ) def wrapper ( * a , ** kw ): _log . debug ( f 'Within wrapper: args= { a } - kwargs= { kw } ' ) kw . update ({ k . replace ( '_task_' , '' ): v for k , v in kwargs . items () if k . startswith ( '_task_' )}) keywords = { k . replace ( '_task_' , '' ): v for k , v in kw . items () if k . startswith ( '_task_' )} for key in keywords : kw . pop ( '_task_' + key , None ) kw . update ( keywords ) kw . update ({ 'callback_func' : self . callback_func }) task = Task ( self . func , ** kw ) if self . personal_que : if self . worker . killed : _log . warning ( f 'Decorated Worker { self . worker } was killed no longer daemon for func { self . func } ' ) self . wType ( target = task , ** { k . replace ( '_worker_' , '' ): v for k , v in kwargs . items () if k . startswith ( '_worker_' )}) . start () self . personal_que . put_nowait ( task ) if self . worker . is_alive () is False : self . worker . start () elif self . pool : self . pool . submit ( task , submit_task_nowait = True , submit_task_autospawn = True , allow_restart = True ) else : self . wType ( target = task , ** { k . replace ( '_worker_' , '' ): v for k , v in kwargs . items () if k . startswith ( '_worker_' )}) . start () return task if self . func is None and callable ( args [ 0 ]): self . func = args [ 0 ] return wrapper return wrapper ( * args , ** kwargs ) class Task ( Event ): \"\"\" <a name=\"Task\"></a> This is a wrapper class that inherits from an Event Object and is used inside the Worker. It is designed to hold the function ran and save the results of the function. \"\"\" defaultriority : int = 1 def __init__ ( self , fn : Callable , priority : int = 1 , kill : bool = False , inject_task : bool = True , store_return : bool = True , ignore_queue : bool = False , callback_func : Optional [ Callable ] = None , semaphore : Optional [ Semaphore ] = None , * args , ** kwargs ): super () . __init__ () self . args = args self . kwargs = kwargs self . priority = priority self . kill = kill self . ignore_queue = ignore_queue self . callback_fun = callback_func self . semaphore = semaphore if semaphore is not None else Semaphore ( 1 ) if isinstance ( fn , partial ): if inject_task and Task . __inspect_kwargs ( fn . func ): fn . keywords . update ({ 'TaskObject' : self }) self . task = fn else : if inject_task and Task . __inspect_kwargs ( fn ): self . kwargs . update ({ 'TaskObject' : self }) self . task = partial ( fn , * self . args , ** self . kwargs ) self . store_return = store_return self . uuid = str ( uuid . uuid4 ()) self . __updateRLock = MultiProcRLock () self . __worker = None self . __results = None def run ( self , * args , ** kwargs ) -> Any : \"\"\" This is used to run the stored partial function and store the results. - :param args: Positional arguments to be passed to the task. - :param kwargs: Keyword arguments to be passed to the task - :return: (Anything) \"\"\" if self . is_set (): raise Exception ( 'A Task Object cannot be ran more than once!' ) try : self . semaphore . acquire () if self . store_return : self . results = self . task ( * args , ** kwargs ) if self . callback_fun : return self . callback_fun ( self . results ) else : if self . callback_fun : return self . callback_fun ( self . task ( * args , ** kwargs )) else : return self . task ( * args , ** kwargs ) except Exception as e : _log . info ( f ' { self } failed' ) raise e else : _log . info ( f ' { self } succeeded' ) finally : self . set () self . semaphore . release () if self . store_return : return self . results def clear ( self ) -> None : if self . is_set (): raise Exception ( 'A Task Object cannot be cleared once set!' ) return super ( Task , self ) . clear () @staticmethod def __inspect_kwargs ( func , keyword = 'TaskObject' ): try : return [ key for key in inspect . signature ( func ) . parameters . keys () if keyword == key or 'kwargs' == key ] except : return [] def __hash__ ( self ): return hash ( self . uuid ) def __call__ ( self , * args , ** kwargs ): return self . run ( * args , ** kwargs ) def __str__ ( self ): return f 'Task(UUID= { self . uuid } ,Priority= { self . priority } ): { self . task . func } ' def __gt__ ( self , other : Task ): return self . priority > other . priority def __lt__ ( self , other : Task ): return self . priority < other . priority def __ge__ ( self , other : Task ): return self . priority >= other . priority def __le__ ( self , other : Task ): return self . priority <= other . priority @property def worker ( self ): with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = False ) as acquired : if acquired : return self . __worker @worker . setter def worker ( self , value ): with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ): self . __worker = value @worker . deleter def worker ( self ): with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ): del self . __worker @property def results ( self ): with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = False ) as acquired : if acquired : return self . __results @results . setter def results ( self , value ): with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ): self . __results = value @results . deleter def results ( self ): with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ): del self . __results class Worker : \"\"\" <a name=\"Worker\"></a> This is designed to be managed by a ThreadPool. However, it can run on its own as well. It runs until told to stop and works tasks that come from a the PriorityTaskQueue maintained by the Pool. \"\"\" __workerAutoKill = True __defaultTimeout = 10 workerType = None name = None def __init__ ( self , pool : Optional [ Pool ] = None , workerAutoKill : bool = True , defaultTimeout : int = 10 , personalQue : Optional [ ProcessTaskQueue ] = None , target : Optional [ Callable ] = None , name : Optional [ str ] = None , daemon : bool = True , log : Optional [ logging ] = None , ** kwargs ): self . uuid = str ( uuid . uuid4 ()) self . log = _log if log is None else log self . __defaultTimeout = defaultTimeout self . __timeout = defaultTimeout self . __personalQue = personalQue self . __currentTask = None if target is not None and not isinstance ( target , Task ): target = Task ( target , kill = True , ignore_queue = True ) super ( Worker , self ) . __init__ ( target = target , name = self . uuid if name is None else name , daemon = daemon , args = kwargs . get ( 'args' , ()), kwargs = kwargs . get ( 'kwargs' , {})) self . pool = pool self . killed = False self . __workerAutoKill = workerAutoKill if self . __personalQue is None else False if pool : self . log . info ( f '[INFO]: Starting new { self } ' ) self . start () def __str__ ( self ): return f 'Worker: { self . name if self . name == self . uuid else f \" { self . name } - { self . uuid } \" } for Pool: { self . pool } ' def __hash__ ( self ): return hash ( self . uuid ) def safe_stop ( self ): self . killed = True # noinspection PyUnresolvedReferences def get_next_task ( self ) -> Union [ Task , bool , None ]: \"\"\" This gets the next Task in the taskQueue - :return: (Task) \"\"\" try : self . __currentTask = None if self . pool is None and self . _target is not None : self . __currentTask = self . _target self . __currentTask . worker = self self . __currentTask . kill = True self . __currentTask . ignore_queue = True elif self . pool is None and self . __personalQue is None : self . __currentTask = None else : self . __currentTask = self . task_queue . get ( timeout = self . __timeout ) self . __currentTask . worker = self return self . __currentTask except Empty : if self . timeout == 0 : return Task ( Worker . __KILL__ , kill = True , ignore_queue = True ) return False except Exception as e : self . log . error ( f '[ERROR]: Error in getting task: { e } ' ) self . log . debug ( f '[DEBUG]: trace for error in getting task: { traceback . format_exc () } ' ) return None def run ( self ) -> None : \"\"\" This is an override of the run method within Thread that loops constantly waiting on another task. - :return: (None) \"\"\" try : while not self . killed : task = self . get_next_task () if task is None : self . log . info ( 'task is None an error occurred in get_next_task method closing the thread' ) break elif task is not False : self . log . info ( f 'The task is: { task } ' ) task ( * self . _args , ** self . _kwargs ) self . __currentTask = None if not task . ignore_queue : self . task_queue . task_done () if task . kill : self . log . info ( f 'Killing thread once task is complete: { task } ' ) self . killed = True except Exception as e : self . log . error ( f '[ERROR]: While Worker thread is running with task: { self . __currentTask } Error: { e } ' ) self . log . debug ( f '[DEBUG]: trace for error: { traceback . format_exc () } ' ) if self . __currentTask is not None : if not self . __currentTask . isSet (): self . __currentTask . set () if not self . __currentTask . ignore_queue : getattr ( self . task_queue , 'task_done' , dummy_func )() self . __currentTask = None finally : if self . killed is not True : self . killed = True if self . pool is not None : self . pool . remove_worker ( workerTooRemove = self ) @staticmethod def __KILL__ ( * args , ** kwargs ) -> None : pass @property def task_queue ( self ): if self . pool is None and self . __personalQue is not None : return self . __personalQue return getattr ( getattr ( self , 'pool' , None ), 'taskQueue' , None ) @property def timeout ( self ) -> int : \"\"\" This property will return 0 if it thinks it doesn't need to run any longer and is ready to self terminate \"\"\" if self . killed is True : return 0 elif self . pool is not None and (( self . __workerAutoKill and self . pool . num_workers > 1 ) or self . pool . num_workers > self . pool . maxWorkers ): self . __timeout //= 2 elif self . __defaultTimeout != self . __timeout : self . __timeout = self . __defaultTimeout return self . __timeout @property def current_priority ( self ) -> int : \"\"\" This changes to the priority of each incoming task. \"\"\" try : if self . __currentTask : return self . __currentTask . priority return 0 except Exception as e : self . log . error ( f 'ERROR: { e } ' ) return 0 @property def is_active ( self ) -> bool : \"\"\" This determines if the Worker currently has a Task to work. \"\"\" return self . __currentTask is not None # noinspection PyPep8Naming class Pool : \"\"\" <a name=\"ThreadPool\"></a> This manages a pool of Workers and a queue of Tasks. The workers consume tasks from the taskQueue until they are told to stop. \"\"\" _state = __INACTIVE__ __regRLock = None __pool_registry = None def __init__ ( self , workerType : type , maxWorkers : Optional [ int ] = None , tasks : Optional [ Queue ] = None , daemon : bool = True , timeout : int = 60 , workerAutoKill : bool = True , prepopulate : int = 0 , name : str = \"\" , log : Optional [ logging ] = None ): self . workerType = workerType self . log = _log if log is None else log self . uuid = str ( uuid . uuid4 ()) self . name = name if name else self . uuid self . maxWorkers = maxWorkers or get_cpu_count () self . __timeout = timeout self . __workerAutoKill = workerAutoKill self . __workerListLock = RLock () if getattr ( workerType , 'workerType' , 'THREAD' ) == 'THREAD' else MultiProcRLock () self . __workerList = None self . __stateLock = RLock () if getattr ( workerType , 'workerType' , 'THREAD' ) == 'THREAD' else MultiProcRLock () self . __taskLock = RLock () if getattr ( workerType , 'workerType' , 'THREAD' ) == 'THREAD' else MultiProcRLock () self . taskQueue = tasks or PriorityTaskQueue () self . workers = [] self . state = __STARTING__ self . daemon = daemon self . ignoredTasks = [] if prepopulate : self . setup_workers ( numOfWorkers = prepopulate , workerAutoKill = self . __workerAutoKill ) elif self . taskQueue . qsize () > 0 : self . setup_workers ( numOfWorkers = self . taskQueue . qsize () if self . taskQueue . qsize () <= self . maxWorkers else self . maxWorkers , workerAutoKill = not daemon ) if daemon is False : self . state = __ACTIVE__ self . join ( self . __timeout ) self . shutdown ( timeout = self . __timeout ) def __enter__ ( self ): self . __taskLock . acquire () return self def __exit__ ( self , exc_type , exc_val , exc_tb ): try : if self . daemon is False : self . join ( self . __timeout ) self . shutdown ( timeout = self . __timeout ) else : self . wait_completion ( timeout = self . __timeout ) self . __taskLock . release () except Exception as e : self . log . error ( f \"ERROR in __exit__ of Pool: { e } \" ) self . log . debug ( f \"[DEBUG] for __exit__ of Pool: { traceback . format_exc () } \" ) def __str__ ( self ): return f 'Pool(UUID= { self . uuid } , State= { self . _state } )' def setup_workers ( self , numOfWorkers : int = 1 , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False ) -> bool : \"\"\" Generally only used by init. This setups Worker threads to be managed by the Pool. - :param numOfWorkers: (int) Number workers setup. IF the number of workers is higher then the value of 'maxWorkers' then 'maxWorkers' is updated. The numOfWorkers is how many Workers the Pool has *not* now many new Workers get added. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in the 'taskQueue'. - :return: (bool) \"\"\" if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if numOfWorkers > self . maxWorkers : self . set_max_workers ( numOfWorkers ) numOfNewWorkers = ( numOfWorkers - self . num_workers ) elif numOfWorkers > ( self . maxWorkers - self . num_workers ): numOfNewWorkers = ( self . maxWorkers - self . num_workers ) else : numOfNewWorkers = numOfWorkers for _ in range ( 0 , numOfNewWorkers ): self . add_worker ( workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill , allow_restart = allow_restart ) return numOfNewWorkers > 0 def add_worker ( self , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False , ** kwargs ) -> bool : \"\"\" Adds a single new worker too the Pool. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in - :return: (bool) \"\"\" self . log . debug ( \"Attempting to add new worker!\" ) if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if self . num_workers >= self . maxWorkers : return False self . workers . append ( self . workerType ( self , workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill )) return True def remove_worker ( self , workerTooRemove : Optional [ Worker ] = None , timeout : int = 30 , allow_abandon : bool = False ) -> bool : \"\"\" Removes a single new worker from the Pool. This can be called to remove the last Worker or you can specify a Worker to remove. - :param workerTooRemove: (Worker) This is usually sent when a Worker is self terminating - :param timeout: (int) 30, How much time it is willing to wait. NOTE: This is doubled when specifying a worker with the workerTooRemove parameter. - :param allow_abandon: (bool) False, This determines if the thread will simply be abandoned if it cannot normally remove it from the pool. It will only do this if 'safe_stop' and 'terminate' methods fail. - :return: (bool) \"\"\" def wait_helper ( wait_time , start_time , ev , wtr ): current_time = time . monotonic () while current_time < start_time + wait_time and wtr in self . workers : ev . wait ( timeout = 0.1 ) return wtr not in self . workers try : if self . num_workers <= 0 : return False if workerTooRemove in self . workers and workerTooRemove . killed : self . workers . pop ( self . workers . index ( workerTooRemove )) return True e = Event () if workerTooRemove is not None : workerTooRemove . safe_stop () if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ): return True self . log . warning ( f '[WARN]: worker( { workerTooRemove } ) needs to be terminated in order to be removed.' ) getattr ( workerTooRemove , 'terminate' , dummy_func )() if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ): return True if allow_abandon : self . log . warning ( f '[WARN]: worker( { workerTooRemove } ) is being abandoned.' ) worker = self . workers . pop ( self . workers . index ( workerTooRemove )) if worker . killed is not True : worker . killed = True return True return False else : current_num = self . num_workers self . submit ( Task ( Worker . __KILL__ , priority = self . highest_priority + 1 , kill = True ), submit_task_autospawn = False ) if timeout > 0 : current = start = time . monotonic () while current < start + timeout and self . num_workers >= current_num : e . wait ( timeout = 0.1 ) return self . num_workers < current_num return True except Exception as e : self . log . error ( f '[ERROR]: Error occurred while attempting to remove worker: { e } ' ) self . log . debug ( f '[DEBUG]: Trace for error while attempting to remove worker: { traceback . format_exc () } ' ) return False finally : if self . num_workers == 0 : self . state = __INACTIVE__ def set_max_workers ( self , maxWorkers : int ) -> int : \"\"\" Set the maximum number of threads that will remain active. Return the maximum thread limit. - :param maxWorkers: (int) Max thread limit - :return: (int) \"\"\" if type ( maxWorkers ) is int and maxWorkers > - 1 : self . maxWorkers = maxWorkers return self . maxWorkers def wait_completion ( self , timeout : Union [ int , float ], delay : Union [ int , float ] = 0.1 , block : bool = False ) -> bool : \"\"\" This method waits until all Tasks in the PriorityTaskQueue is done. If the parameter block is True it will stop any new Task from being submitted while waiting. - :param timeout: (int/float) How long to wait for all tasks in the 'taskQueue' to be finished. - :param delay: (int/float) The amount of time to wait before checking again in seconds. Default 0.1. - :param block: (bool) This will stop new tasks from being submitted to the Queue until finished. - :return: (bool) \"\"\" e = Event () def _wait_completion ( waitTime : Union [ int , float ]) -> bool : current_time = start_time = time . monotonic () while current_time < start_time + waitTime and self . has_workers : if self . unfinished_tasks == 0 : return True e . wait ( timeout = delay ) current_time = time . monotonic () return False if block : start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): return _wait_completion ( max ( 0.1 , ( start + timeout ) - time . monotonic ())) return _wait_completion ( timeout ) def shutdown ( self , timeout : Optional [ int ] = None , unsafe : Optional [ bool ] = None ) -> bool : \"\"\" This sends a kill operation too all the workers and waits for them to complete and then removes the threads. It can also attempt to kill Workers in an unsafe way with the 'terminate' Worker method. - :param timeout: (int) The length of time to wait on tasks to be stopped - :param unsafe: (bool/None) True: The 'terminate' method will be called on each Worker. False: Even if the timeout is reached the 'terminate' method will *not* be called. None: This will attempt to safely wait for the Workers too finish but if timeout is reached then the 'terminate' method will be called. - :return: (bool) \"\"\" e = Event () self . state = __STOPPING__ if timeout is None : timeout = self . __timeout def _clear_helper ( task ): return task . task . func != Worker . __KILL__ def _clear_shutdown_tasks (): try : tasks = [] while not self . taskQueue . empty (): tasks . append ( self . taskQueue . get ()) self . taskQueue . task_done () for task in filter ( _clear_helper , tasks ): if self . has_workers : self . taskQueue . put_nowait ( task ) else : self . ignoredTasks . append ( task ) except Exception as e : self . log . error ( f '[ERROR]: Error while clearing old tasks: { e } ' ) self . log . debug ( f '[DEBUG]: Trace for error clearing old tasks: { traceback . format_exc () } ' ) def _unsafe_shutdown (): for worker in self . workers : self . log . info ( f 'Worker: { worker } will be killed unsafely.' ) worker . terminate () if unsafe : _unsafe_shutdown () e . wait ( timeout = 0.1 ) return self . num_workers == 0 start_time = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): for x in range ( 0 , self . num_workers ): self . remove_worker ( timeout = 0 ) current_time = time . monotonic () while current_time < start_time + timeout : if self . num_workers <= 0 : self . log . info ( 'There are no more workers. No need for forced timeout' ) break e . wait ( timeout = 0.1 ) current_time = time . monotonic () if unsafe is None : _unsafe_shutdown () e . wait ( timeout = 0.1 ) _clear_shutdown_tasks () if self . num_workers == 0 : self . state = __STOPPED__ return True return False def join ( self , timeout : int ) -> bool : \"\"\" This first calls 'waitCompletion' with 'block=True' and then calls 'shutdown'. The goal is to try to wait for all Tasks to complete and then close out the Pool. - :param timeout: (int)The length of time to wait on both join and shutdown. - :return: (bool) \"\"\" with wait_lock ( self . __taskLock , timeout = timeout ): start_time = time . monotonic () self . wait_completion ( timeout , block = True ) return self . shutdown ( timeout = int ( max ( timeout - ( time . monotonic () - start_time ), 1 ))) def map ( self , fn : Callable , params : Tuple , chunksize : int = 0 , * args , ** kwargs ) -> None : \"\"\" A simple mapping tool that takes different params (a List of tuples formatted like [(*args, **kwargs)]) and pass them too a function. chunksize determines how too break up the list and distribute it across Workers. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param params: (Tuple) The Tuple should be formatted like so ( ((arg1, ), {'kwarg1': 'value'}), ...). Each item within the Tuple is a Tuple itself with two items. The first item is positional arguments (args) and the second item is keyword arguments (kwargs). Even if they are empty they need to exist. - :param chunksize: (int) If left at 0 the method will attempt to spread the tasks as evenly as possible. Otherwise it will take the number to mean how many Tasks will be given to a single Worker. - :param kwargs: These are keyword arguments that get passed to the 'submit' method. - :return: (None) \"\"\" if 'submit_task_autospawn' not in kwargs : kwargs [ 'submit_task_autospawn' ] = True if chunksize == 0 : if len ( params ) <= self . maxWorkers : chunksize = 1 else : chunksize = round ( len ( params ) / self . maxWorkers ) def chunkHelper ( func , chunkList ): return [ func ( * parms [ 0 ], ** parms [ 1 ]) for parms in chunkList ] def listIntoChunks ( lst ): return [ lst [ i * chunksize :( i + 1 ) * chunksize ] for i in range (( len ( lst ) + chunksize - 1 ) // chunksize )] for item in listIntoChunks ( params ): self . submit ( partial ( chunkHelper , func = fn , chunkList = item ), ** kwargs ) def submit ( self , fn : Callable , * args , ** kwargs ) -> Union [ Task , bool ]: \"\"\" This is the function used to submit a Task to the Pool. Simply provide a function as 'fn' and then arguments that need to be passed too that function and it will create a Task and add it to the PriorityTaskQueue to be worked. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param args: These args will be passed to the Task object. - :param kwargs: The following keywords will be pulled out. 'submit_task_nowait', 'submit_task_timeout', 'submit_task_autospawn', 'submit_task_priority'. All others will be passed to Task. + 'submit_task_nowait': (bool) tells 'submit' to use the 'put_nowait' method on PriorityTaskQueue. + 'submit_task_timeout': (int/float) how long should one wait too submit. + 'submit_task_autospawn': (bool/None) determines if new Worker should be spawned because of more tasks. + 'submit_task_priority': (int) changes the priority of the task. - :return: (Task/bool) \"\"\" if fn is None : return False def autospawn_parser ( tmpAutospawn , state ): if state == __STOPPING__ or state == __STOPPED__ : return False if self . needs_workers and tmpAutospawn is None : return True return tmpAutospawn nowait = kwargs . pop ( 'submit_task_nowait' , True ) timeout = kwargs . pop ( 'submit_task_timeout' , 10 ) autospawn = autospawn_parser ( kwargs . pop ( 'submit_task_autospawn' , None ), self . state ) priority = kwargs . pop ( 'submit_task_priority' , 10 ) or 10 start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): if isinstance ( fn , Task ): task = fn else : task = Task ( fn , priority , * args , ** kwargs ) try : if nowait : self . taskQueue . put_nowait ( task ) else : self . taskQueue . put ( task , timeout = max ( 0.1 , ( start + timeout ) - time . monotonic ())) if autospawn or autospawn is None and self . needs_workers : self . add_worker ( ** kwargs ) return task except Exception as e : self . log . error ( f 'Error in submitting task: { e } \\n { traceback . format_exc () } ' ) return False finally : if self . state is not __ACTIVE__ and self . num_workers > 0 : self . state = __ACTIVE__ @staticmethod def as_completed ( tasks : List [ Task ]): def _finished_tasks ( task_item ): return task_item if task_item . is_set () else None lengthOfTasks = len ( tasks ) finished_tasks = set () while len ( finished_tasks ) < lengthOfTasks : for task in filter ( _finished_tasks , tasks ): if task not in finished_tasks : finished_tasks . add ( task ) yield task time . sleep ( 0.01 ) @property def unfinished_tasks ( self ) -> int : \"\"\"+ This calls the 'unfinishedTasks' property of PriorityTaskQueue. And is equal to the number of tasks submitted minus the number of times a Task has been Worked by a Worker. \"\"\" return self . taskQueue . unfinished_tasks @property def num_queued_tasks ( self ) -> int : \"\"\" This is a wrapper for the 'qsize()' method from PriorityTaskQueue.\"\"\" return self . taskQueue . qsize () @property def num_active_tasks ( self ) -> int : return self . unfinished_tasks - self . num_queued_tasks @property def has_tasks ( self ) -> bool : return self . unfinished_tasks > 0 @property def is_idle ( self ) -> bool : return not ( self . has_tasks and self . has_workers ) @property def is_active ( self ) -> bool : \"\"\"+ This determines is the Pool both has workers and has work to do. This doesn't have anything to do with a Pool's state. \"\"\" return self . has_tasks and self . has_workers @property def has_workers ( self ) -> bool : return self . num_workers > 0 @property def needs_workers ( self ) -> bool : if self . num_workers < self . maxWorkers : if self . num_queued_tasks > self . inactive_workers : return True return False @property def num_workers ( self ) -> int : try : return len ( self . workers ) except Exception : return 0 @property def active_workers ( self ) -> int : return len ([ i for i in self . workers if i . is_active ]) @property def inactive_workers ( self ) -> int : return len ([ i for i in self . workers if not i . is_active ]) @property def highest_priority ( self ) -> int : return max ([ i . current_priority for i in self . workers ]) @property def workers ( self ) -> List : \"\"\"+ This is a protected (wrapped in a lock) List of Workers managed by this pool. \"\"\" try : with wait_lock ( self . __workerListLock , self . __timeout ): return self . __workerList except RuntimeError : pass @workers . setter def workers ( self , value ) -> None : try : with wait_lock ( self . __workerListLock , self . __timeout ): self . __workerList = value except RuntimeError : pass @workers . deleter def workers ( self ) -> None : try : with wait_lock ( self . __workerListLock , self . __timeout ): self . __workerList = [] except RuntimeError : pass @property def state ( self ) -> str : \"\"\"+ This is a string that has only 4 valid string values that determines the state of the Pool.\"\"\" try : with wait_lock ( self . __stateLock , self . __timeout ): return self . _state except RuntimeError : pass @state . setter def state ( self , value ) -> None : try : with wait_lock ( self . __stateLock , self . __timeout ): if value in __THREADPOOL_STATES__ : self . _state = __THREADPOOL_STATES__ [ value ] else : raise TypeError ( 'Invalid ThreadPool STATE: %s ' % str ( value )) except RuntimeError : pass @state . deleter def state ( self ) -> None : try : with wait_lock ( self . __stateLock , self . __timeout ): self . _state = __INACTIVE__ except RuntimeError : pass # noinspection PyUnresolvedReferences class MultiEvent ( Event ): \"\"\" <a name=\"MultiEvent\"></a> Designed to only get set if more the set function is called multiple times. \"\"\" _counter : int = None _counterMax : int = None _ActionLock : Lock = None def __init__ ( self , counter : int = 1 ): \"\"\" Constructor for the MultiEvent. This requires one parameter named 'counter'. - :param counter: (int, default 1) This is how many times 'set' method has to be called for the event to be set. \"\"\" self . _counter = counter self . _counterMax = counter self . _ActionLock = Lock () super ( MultiEvent , self ) . __init__ () def set ( self ) -> None : \"\"\" A wrapper method for 'set' in threading's modules 'Event' class. This simply counts down and will attempt to set the Event once the '_counter' is at zero. - :return: None \"\"\" with self . _ActionLock : self . _counter -= 1 if self . _counter <= 0 : super ( MultiEvent , self ) . set () def clear ( self ) -> None : \"\"\" A wrapper method for 'clear' in threading's modules 'Event' class. This resets the '_counter' variable before calling 'clear' method of 'Event'. :return: None \"\"\" with self . _ActionLock : self . _counter = self . _counterMax super ( MultiEvent , self ) . clear () def remaining_sets ( self ) -> int : \"\"\" Is a wrapper around the private variable '_counter'. - :return: (int) \"\"\" with self . _ActionLock : return self . _counter @property def num_required_sets ( self ) -> int : return self . _counterMax class MultipleEvents ( object ): \"\"\" <a name=\"MultipleEvents\"></a> Designed to take multiple events and put them together to be waited on as a whole. \"\"\" _events = None def __init__ ( self , events : Iterable [ Event ]): \"\"\" Make a new MultipleEvents object using a iterable array of events. - :param events: (a list/tuple/iterable of events) \"\"\" self . _events = events super ( MultipleEvents , self ) . __init__ () def wait ( self , timeout : int = 60 , delay : Union [ int , float ] = 0.1 ) -> bool : \"\"\" Wait on all events by using the 'is_set' method on each event in the event list. - :param timeout: (int) default is 60. This will not throw an exception it will simply return False. - :param delay: How long to wait between checking if all events have been set. - :return: (bool) \"\"\" if type ( self . _events ) is not list : return False e = Event () endTime = time . monotonic () + timeout while time . monotonic () <= endTime : if self . isSet (): return True e . wait ( timeout = delay ) return False def isSet ( self ) -> bool : \"\"\" Uses the 'is_set' method on each event in the list and returns True if all is set and False otherwise. - :return: (bool) \"\"\" if not filter ( MultipleEvents . wait_filter , self . _events ): return True return False def clear ( self ) -> None : \"\"\" Reset the internal flag to false on all events. - :return: (None) \"\"\" for event in self . _events : event . clear () def remove_events ( self ) -> None : \"\"\" This deletes all events making this object useless until new events are added. - :return: (None) \"\"\" del self . _events self . _events = [] def add_event ( self , event : Event ) -> None : \"\"\" This adds a new event to the private variable '_event'. It assumes '_event' is a List object. - :param event: (Event) - :return: (None) \"\"\" if self . _events is None : self . _events = [] self . _events . append ( event ) @staticmethod def set () -> None : \"\"\" This is ignored. This object is not meant to set Events simply wait on events. - :return: (None) \"\"\" _log . warning ( \"This set is ignored!\" ) @staticmethod def wait_filter ( event : Event ) -> bool : \"\"\" Simply calls and returns 'is_set' method of a given Event object. - :param event: (Event) - :return: (bool) \"\"\" return not event . is_set () Functions Limiter def Limiter ( num , blocking = True ) This is a decorator designed to decorate Threaded and Proccessed decorators to limit the number of simultaneous calls. View Source def Limiter ( num , blocking = True ) : \"\"\" This is a decorator designed to decorate Threaded and Proccessed decorators to limit the number of simultaneous calls. \"\"\" sem = Semaphore ( num ) def wrapper ( func ) : @wraps ( func ) def wrapped ( * args , ** kwargs ) : if blocking : with sem : return func ( * args , ** kwargs ) else : kwargs . update ( { '_task_semaphore' : sem } ) return func ( * args , ** kwargs ) return wrapped return wrapper dummy_func def dummy_func ( * args , ** kwargs ) View Source def dummy_func(*args, **kwargs): return kwargs.get('_default', None) get_cpu_count def get_cpu_count ( ) -> 'int' Return the number of Logic CPU Cores on the system View Source def get_cpu_count () -> int : \"\"\"Return the number of Logic CPU Cores on the system\"\"\" try : from multiprocessing import cpu_count return cpu_count () except : return _DEFAULT_MAX_WORKERS method_wait def method_wait ( func : 'Callable[..., Any]' , timeout : 'int' = 60 , delay : 'float' = 0.1 , delayPercent : 'bool' = False , delayAscending : 'Optional[bool]' = None , incompleteVar : 'Optional[bool]' = None , raiseExc : 'Union[bool, Exception]' = False , * args , ** kwargs ) Allows one to safely wait on a method to return. func : (callable) Function to be executed using the method wait timeout : (int, default 60) Amount of time to wait until giving up on the function delay : (int or float, default 0.1) Amount of time to pause inbetween asking the function for results incompleteVar : (any) Variable that indicates the function is not yet finished raiseExc : (bool, default False) Causes methodWait to raise an exception instead of returning None args : args that will be passed to the function kwargs : kwargs that will be passed to the function return could be anything View Source def method_wait ( func : Callable [ ..., Any ] , timeout : int = 60 , delay : float = 0.1 , delayPercent : bool = False , delayAscending : Optional [ bool ] = None , incompleteVar : Optional [ bool ] = None , raiseExc : Union [ bool, Exception ] = False , * args , ** kwargs ) : \"\"\" <a name=\" method_wait \"></a>Allows one to safely wait on a method to return. - *func*: (callable) Function to be executed using the method wait - *timeout*: (int, default 60) Amount of time to wait until giving up on the function - *delay*: (int or float, default 0.1) Amount of time to pause inbetween asking the function for results - *incompleteVar*: (any) Variable that indicates the function is not yet finished - *raiseExc*: (bool, default False) Causes methodWait to raise an exception instead of returning None - *args*: args that will be passed to the function - *kwargs*: kwargs that will be passed to the function - *return* could be anything \"\"\" e = Event () def ascending_helper ( num , multipler ) : if num * multipler > 1 : yield num * multipler yield ascending_helper ( num * multipler , multipler ) else : yield num def delay_ascender ( time_delay ) : if len ( time_delay ) > 1 : e . wait ( timeout = time_delay . pop ()) else : e . wait ( timeout = time_delay [ 0 ] ) return time_delay def delay_by_time ( time_delay ) : e . wait ( timeout = time_delay ) return time_delay def delay_by_percent ( time_delay ) : e . wait ( timeout = max ( 0.1 , ( time . monotonic () - start_time ) * time_delay )) return time_delay rawKwargs = {} rawKwargs . update ( kwargs ) kwargs . pop ( 'failureVar' , None ) if delayPercent and delayAscending is None : delayer = delay_by_percent elif delayAscending is True : delay = [ num for num in ascending_helper(timeout, delay) ] delayer = delay_ascender elif delayAscending is False : delay = [ num for num in ascending_helper(timeout, delay) ] delay . sort () delayer = delay_ascender else : delayer = delay_by_time try : current_time = start_time = time . monotonic () while current_time < start_time + timeout : results = func ( * args , ** kwargs ) if 'failureVar' in rawKwargs and rawKwargs [ 'failureVar' ] == results : return results elif results == incompleteVar : delay = delayer ( delay ) current_time = time . monotonic () elif results is not incompleteVar : return results except Exception as e : _log . error ( f 'The function {func} has thrown an exception. {e}' ) _log . debug ( f '[DEBUG]: trace for error: {traceback.format_exc()}' ) if raiseExc is True : raise e elif inspect . isclass ( raiseExc ) and issubclass ( raiseExc , BaseException ) : raise raiseExc ( f 'The function {func} has thrown an exception. {e}' ) from e elif isinstance ( raiseExc , Exception ) : raise raiseExc from e return e return incompleteVar safe_acquire def safe_acquire ( lock : 'Union[Lock, RLock]' , timeout : 'Union[int, float]' ) -> 'bool' Meant to be used as a safe way to wait on a lock. Returns False if time runs out. :param lock: (Lock/RLock) the lock that will be acquired or return False :param timeout: The amount of time to wait on attempting to gain lock. :return: bools View Source def safe_acquire ( lock : Union [ Lock, RLock ] , timeout : Union [ int, float ] ) -> bool : \"\"\" <a name=\" safe_acquire \"></a> Meant to be used as a safe way to wait on a lock. Returns False if time runs out. - :param lock: (Lock/RLock) the lock that will be acquired or return False - :param timeout: The amount of time to wait on attempting to gain lock. - :return: bools \"\"\" e = Event () try : current_time = start_time = time . monotonic () while current_time < start_time + timeout : if lock . acquire ( blocking = False ) : return True e . wait ( timeout = 0.1 ) current_time = time . monotonic () return lock . acquire ( blocking = False ) except Exception as e : _log . error ( f \"ERROR in safe_acquire with timeout {timeout} : {e}\" ) _log . debug ( f \"[DEBUG] for safe_acquire: {traceback.format_exc()}\" ) return False safe_release def safe_release ( lock : 'Union[Lock, RLock]' ) -> 'bool' Meant to be used as a safe way to release a lock. Returns False if the lock has already been released. :param lock: (Lock/RLock) the lock that will be acquired or return False :return: bools View Source def safe_release ( lock : Union [ Lock, RLock ] ) -> bool : \"\"\"<a name=\" safe_acquire \"></a> Meant to be used as a safe way to release a lock. Returns False if the lock has already been released. - :param lock: (Lock/RLock) the lock that will be acquired or return False - :return: bools \"\"\" try : lock . release () return True except Exception as e : _log . error ( f \"ERROR in safe_release: {e}\" ) _log . debug ( f \"[DEBUG] for safe_release: {traceback.format_exc()}\" ) return False wait_lock def wait_lock ( lock : 'Any' , timeout : 'Union[int, float]' , blocking : 'bool' = True , raise_exc : 'bool' = True ) -> 'Iterator[bool]' Meant to be used within a 'with' statement to throw an exception when timing out on a lock :param lock: (Lock/RLock/Semephore) the lock that will be acquired or an exception will be thrown :param timeout: The amount of time to wait on attempting to gain lock. :return: (generator of bools) This is used with a contextmanager decorator View Source @contextmanager def wait_lock ( lock : Any , timeout : Union [ int, float ] , blocking : bool = True , raise_exc : bool = True ) -> Iterator [ bool ] : \"\"\" <a name=\" method_wait \"></a> Meant to be used within a 'with' statement to throw an exception when timing out on a lock - :param lock: (Lock/RLock/Semephore) the lock that will be acquired or an exception will be thrown - :param timeout: The amount of time to wait on attempting to gain lock. - :return: (generator of bools) This is used with a contextmanager decorator \"\"\" if isinstance ( lock , SemLock ) : result = lock . acquire ( timeout = timeout ) else : result = lock . acquire ( blocking = blocking , timeout = timeout ) if result is False and raise_exc : raise RuntimeError ( \"The Lock was unable to be obtained within the timeout: %s\" % timeout ) yield result if result : lock . release () Classes MultiEvent class MultiEvent ( counter : 'int' = 1 ) Designed to only get set if more the set function is called multiple times. View Source class MultiEvent(Event): \"\"\" <a name= \"MultiEvent\" ></a> Designed to only get set if more the set function is called multiple times. \"\"\" _counter: int = None _counterMax: int = None _ActionLock: Lock = None def __init__(self, counter: int = 1): \"\"\" Constructor for the MultiEvent. This requires one parameter named 'counter'. - :param counter: (int, default 1) This is how many times 'set' method has to be called for the event to be set. \"\"\" self._counter = counter self._counterMax = counter self._ActionLock = Lock() super(MultiEvent, self).__init__() def set(self) -> None: \"\"\" A wrapper method for 'set' in threading's modules 'Event' class. This simply counts down and will attempt to set the Event once the '_counter' is at zero. - :return: None \"\"\" with self._ActionLock: self._counter -= 1 if self._counter < = 0: super(MultiEvent, self).set() def clear(self) -> None: \"\"\" A wrapper method for 'clear' in threading's modules 'Event' class. This resets the '_counter' variable before calling 'clear' method of 'Event'. :return: None \"\"\" with self._ActionLock: self._counter = self._counterMax super(MultiEvent, self).clear() def remaining_sets(self) -> int: \"\"\" Is a wrapper around the private variable '_counter'. - :return: (int) \"\"\" with self._ActionLock: return self._counter @property def num_required_sets(self) -> int: return self._counterMax Ancestors (in MRO) threading.Event Instance variables num_required_sets Methods clear def clear ( self ) -> 'None' A wrapper method for 'clear' in threading's modules 'Event' class. This resets the '_counter' variable before calling 'clear' method of 'Event'. Returns: Type Description None None View Source def clear ( self ) -> None : \"\"\" A wrapper method for 'clear' in threading's modules 'Event' class. This resets the '_counter' variable before calling 'clear' method of 'Event'. :return: None \"\"\" with self . _ActionLock : self . _counter = self . _counterMax super ( MultiEvent , self ) . clear () isSet def isSet ( self ) Return true if and only if the internal flag is true. This method is deprecated, use is_set() instead. View Source def isSet ( self ): \"\"\"Return true if and only if the internal flag is true. This method is deprecated, use is_set() instead. \"\"\" import warnings warnings . warn ( 'isSet() is deprecated, use is_set() instead' , DeprecationWarning , stacklevel = 2 ) return self . is_set () is_set def is_set ( self ) Return true if and only if the internal flag is true. View Source def is_set(self): \"\"\"Return true if and only if the internal flag is true.\"\"\" return self._flag remaining_sets def remaining_sets ( self ) -> 'int' Is a wrapper around the private variable '_counter'. :return: (int) View Source def remaining_sets ( self ) -> int : \"\"\" Is a wrapper around the private variable '_counter'. - :return: (int) \"\"\" with self . _ActionLock : return self . _counter set def set ( self ) -> 'None' A wrapper method for 'set' in threading's modules 'Event' class. This simply counts down and will attempt to set the Event once the '_counter' is at zero. :return: None View Source def set ( self ) -> None : \"\"\" A wrapper method for 'set' in threading's modules 'Event' class. This simply counts down and will attempt to set the Event once the '_counter' is at zero. - :return: None \"\"\" with self . _ActionLock : self . _counter -= 1 if self . _counter <= 0 : super ( MultiEvent , self ). set () wait def wait ( self , timeout = None ) Block until the internal flag is true. If the internal flag is true on entry, return immediately. Otherwise, block until another thread calls set() to set the flag to true, or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). This method returns the internal flag on exit, so it will always return True except if a timeout is given and the operation times out. View Source def wait ( self , timeout = None ): \"\"\"Block until the internal flag is true. If the internal flag is true on entry, return immediately. Otherwise, block until another thread calls set() to set the flag to true, or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). This method returns the internal flag on exit, so it will always return True except if a timeout is given and the operation times out. \"\"\" with self . _cond : signaled = self . _flag if not signaled : signaled = self . _cond . wait ( timeout ) return signaled MultipleEvents class MultipleEvents ( events : 'Iterable[Event]' ) Designed to take multiple events and put them together to be waited on as a whole. View Source class MultipleEvents ( object ) : \"\"\" <a name=\" MultipleEvents \"></a> Designed to take multiple events and put them together to be waited on as a whole. \"\"\" _events = None def __init__ ( self , events : Iterable [ Event ] ) : \"\"\" Make a new MultipleEvents object using a iterable array of events. - :param events: (a list/tuple/iterable of events) \"\"\" self . _events = events super ( MultipleEvents , self ). __init__ () def wait ( self , timeout : int = 60 , delay : Union [ int, float ] = 0.1 ) -> bool : \"\"\" Wait on all events by using the 'is_set' method on each event in the event list. - :param timeout: (int) default is 60. This will not throw an exception it will simply return False. - :param delay: How long to wait between checking if all events have been set. - :return: (bool) \"\"\" if type ( self . _events ) is not list : return False e = Event () endTime = time . monotonic () + timeout while time . monotonic () <= endTime : if self . isSet () : return True e . wait ( timeout = delay ) return False def isSet ( self ) -> bool : \"\"\" Uses the 'is_set' method on each event in the list and returns True if all is set and False otherwise. - :return: (bool) \"\"\" if not filter ( MultipleEvents . wait_filter , self . _events ) : return True return False def clear ( self ) -> None : \"\"\" Reset the internal flag to false on all events. - :return: (None) \"\"\" for event in self . _events : event . clear () def remove_events ( self ) -> None : \"\"\" This deletes all events making this object useless until new events are added. - :return: (None) \"\"\" del self . _events self . _events = [] def add_event ( self , event : Event ) -> None : \"\"\" This adds a new event to the private variable '_event'. It assumes '_event' is a List object. - :param event: (Event) - :return: (None) \"\"\" if self . _events is None : self . _events = [] self . _events . append ( event ) @staticmethod def set () -> None : \"\"\" This is ignored. This object is not meant to set Events simply wait on events. - :return: (None) \"\"\" _log . warning ( \"This set is ignored!\" ) @staticmethod def wait_filter ( event : Event ) -> bool : \"\"\" Simply calls and returns 'is_set' method of a given Event object. - :param event: (Event) - :return: (bool) \"\"\" return not event . is_set () Static methods set def set ( ) -> 'None' This is ignored. This object is not meant to set Events simply wait on events. :return: (None) View Source @ staticmethod def set () -> None : \"\"\" This is ignored. This object is not meant to set Events simply wait on events. - :return: (None) \"\"\" _log . warning ( \"This set is ignored!\" ) wait_filter def wait_filter ( event : 'Event' ) -> 'bool' Simply calls and returns 'is_set' method of a given Event object. :param event: (Event) :return: (bool) View Source @ staticmethod def wait_filter ( event : Event ) -> bool : \"\"\" Simply calls and returns 'is_set' method of a given Event object. - :param event: (Event) - :return: (bool) \"\"\" return not event . is_set () Methods add_event def add_event ( self , event : 'Event' ) -> 'None' This adds a new event to the private variable '_event'. It assumes '_event' is a List object. :param event: (Event) :return: (None) View Source def add_event ( self , event : Event ) -> None : \"\"\" This adds a new event to the private variable '_event'. It assumes '_event' is a List object. - :param event: (Event) - :return: (None) \"\"\" if self . _events is None : self . _events = [] self . _events . append ( event ) clear def clear ( self ) -> 'None' Reset the internal flag to false on all events. :return: (None) View Source def clear ( self ) -> None : \"\"\" Reset the internal flag to false on all events. - :return: (None) \"\"\" for event in self . _events : event . clear () isSet def isSet ( self ) -> 'bool' Uses the 'is_set' method on each event in the list and returns True if all is set and False otherwise. :return: (bool) View Source def isSet ( self ) -> bool : \"\"\" Uses the ' is_set ' method on each event in the list and returns True if all is set and False otherwise. - :return: (bool) \"\"\" if not filter ( MultipleEvents . wait_filter , self . _events ) : return True return False remove_events def remove_events ( self ) -> 'None' This deletes all events making this object useless until new events are added. :return: (None) View Source def remove_events ( self ) -> None : \"\"\" This deletes all events making this object useless until new events are added. - :return: (None) \"\"\" del self . _events self . _events = [] wait def wait ( self , timeout : 'int' = 60 , delay : 'Union[int, float]' = 0.1 ) -> 'bool' Wait on all events by using the 'is_set' method on each event in the event list. :param timeout: (int) default is 60. This will not throw an exception it will simply return False. :param delay: How long to wait between checking if all events have been set. :return: (bool) View Source def wait ( self , timeout : int = 60 , delay : Union [ int , float ] = 0.1 ) -> bool : \"\"\" Wait on all events by using the 'is_set' method on each event in the event list. - :param timeout: (int) default is 60. This will not throw an exception it will simply return False. - :param delay: How long to wait between checking if all events have been set. - :return: (bool) \"\"\" if type ( self . _events ) is not list : return False e = Event () endTime = time . monotonic () + timeout while time . monotonic () <= endTime : if self . isSet (): return True e . wait ( timeout = delay ) return False Pool class Pool ( workerType : 'type' , maxWorkers : 'Optional[int]' = None , tasks : 'Optional[Queue]' = None , daemon : 'bool' = True , timeout : 'int' = 60 , workerAutoKill : 'bool' = True , prepopulate : 'int' = 0 , name : 'str' = '' , log : 'Optional[logging]' = None ) This manages a pool of Workers and a queue of Tasks. The workers consume tasks from the taskQueue until they are told to stop. View Source class Pool : \"\"\" <a name=\"ThreadPool\"></a> This manages a pool of Workers and a queue of Tasks. The workers consume tasks from the taskQueue until they are told to stop. \"\"\" _state = __INACTIVE__ __regRLock = None __pool_registry = None def __init__ ( self , workerType : type , maxWorkers : Optional [ int ] = None , tasks : Optional [ Queue ] = None , daemon : bool = True , timeout : int = 60 , workerAutoKill : bool = True , prepopulate : int = 0 , name : str = \"\" , log : Optional [ logging ] = None ): self . workerType = workerType self . log = _log if log is None else log self . uuid = str ( uuid . uuid4 ()) self . name = name if name else self . uuid self . maxWorkers = maxWorkers or get_cpu_count () self . __timeout = timeout self . __workerAutoKill = workerAutoKill self . __workerListLock = RLock () if getattr ( workerType , 'workerType' , 'THREAD' ) == 'THREAD' else MultiProcRLock () self . __workerList = None self . __stateLock = RLock () if getattr ( workerType , 'workerType' , 'THREAD' ) == 'THREAD' else MultiProcRLock () self . __taskLock = RLock () if getattr ( workerType , 'workerType' , 'THREAD' ) == 'THREAD' else MultiProcRLock () self . taskQueue = tasks or PriorityTaskQueue () self . workers = [] self . state = __STARTING__ self . daemon = daemon self . ignoredTasks = [] if prepopulate : self . setup_workers ( numOfWorkers = prepopulate , workerAutoKill = self . __workerAutoKill ) elif self . taskQueue . qsize () > 0 : self . setup_workers ( numOfWorkers = self . taskQueue . qsize () if self . taskQueue . qsize () <= self . maxWorkers else self . maxWorkers , workerAutoKill = not daemon ) if daemon is False : self . state = __ACTIVE__ self . join ( self . __timeout ) self . shutdown ( timeout = self . __timeout ) def __enter__ ( self ): self . __taskLock . acquire () return self def __exit__ ( self , exc_type , exc_val , exc_tb ): try : if self . daemon is False : self . join ( self . __timeout ) self . shutdown ( timeout = self . __timeout ) else : self . wait_completion ( timeout = self . __timeout ) self . __taskLock . release () except Exception as e : self . log . error ( f \"ERROR in __exit__ of Pool: {e}\" ) self . log . debug ( f \"[DEBUG] for __exit__ of Pool: {traceback.format_exc()}\" ) def __str__ ( self ): return f 'Pool(UUID={self.uuid}, State={self._state})' def setup_workers ( self , numOfWorkers : int = 1 , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False ) -> bool : \"\"\" Generally only used by init. This setups Worker threads to be managed by the Pool. - :param numOfWorkers: (int) Number workers setup. IF the number of workers is higher then the value of 'maxWorkers' then 'maxWorkers' is updated. The numOfWorkers is how many Workers the Pool has *not* now many new Workers get added. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in the 'taskQueue'. - :return: (bool) \"\"\" if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if numOfWorkers > self . maxWorkers : self . set_max_workers ( numOfWorkers ) numOfNewWorkers = ( numOfWorkers - self . num_workers ) elif numOfWorkers > ( self . maxWorkers - self . num_workers ): numOfNewWorkers = ( self . maxWorkers - self . num_workers ) else : numOfNewWorkers = numOfWorkers for _ in range ( 0 , numOfNewWorkers ): self . add_worker ( workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill , allow_restart = allow_restart ) return numOfNewWorkers > 0 def add_worker ( self , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False , ** kwargs ) -> bool : \"\"\" Adds a single new worker too the Pool. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in - :return: (bool) \"\"\" self . log . debug ( \"Attempting to add new worker!\" ) if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if self . num_workers >= self . maxWorkers : return False self . workers . append ( self . workerType ( self , workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill )) return True def remove_worker ( self , workerTooRemove : Optional [ Worker ] = None , timeout : int = 30 , allow_abandon : bool = False ) -> bool : \"\"\" Removes a single new worker from the Pool. This can be called to remove the last Worker or you can specify a Worker to remove. - :param workerTooRemove: (Worker) This is usually sent when a Worker is self terminating - :param timeout: (int) 30, How much time it is willing to wait. NOTE: This is doubled when specifying a worker with the workerTooRemove parameter. - :param allow_abandon: (bool) False, This determines if the thread will simply be abandoned if it cannot normally remove it from the pool. It will only do this if 'safe_stop' and 'terminate' methods fail. - :return: (bool) \"\"\" def wait_helper ( wait_time , start_time , ev , wtr ): current_time = time . monotonic () while current_time < start_time + wait_time and wtr in self . workers : ev . wait ( timeout = 0.1 ) return wtr not in self . workers try : if self . num_workers <= 0 : return False if workerTooRemove in self . workers and workerTooRemove . killed : self . workers . pop ( self . workers . index ( workerTooRemove )) return True e = Event () if workerTooRemove is not None : workerTooRemove . safe_stop () if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ): return True self . log . warning ( f '[WARN]: worker({workerTooRemove}) needs to be terminated in order to be removed.' ) getattr ( workerTooRemove , 'terminate' , dummy_func )() if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ): return True if allow_abandon : self . log . warning ( f '[WARN]: worker({workerTooRemove}) is being abandoned.' ) worker = self . workers . pop ( self . workers . index ( workerTooRemove )) if worker . killed is not True : worker . killed = True return True return False else : current_num = self . num_workers self . submit ( Task ( Worker . __KILL__ , priority = self . highest_priority + 1 , kill = True ), submit_task_autospawn = False ) if timeout > 0 : current = start = time . monotonic () while current < start + timeout and self . num_workers >= current_num : e . wait ( timeout = 0.1 ) return self . num_workers < current_num return True except Exception as e : self . log . error ( f '[ERROR]: Error occurred while attempting to remove worker: {e}' ) self . log . debug ( f '[DEBUG]: Trace for error while attempting to remove worker: {traceback.format_exc()}' ) return False finally : if self . num_workers == 0 : self . state = __INACTIVE__ def set_max_workers ( self , maxWorkers : int ) -> int : \"\"\" Set the maximum number of threads that will remain active. Return the maximum thread limit. - :param maxWorkers: (int) Max thread limit - :return: (int) \"\"\" if type ( maxWorkers ) is int and maxWorkers > - 1 : self . maxWorkers = maxWorkers return self . maxWorkers def wait_completion ( self , timeout : Union [ int , float ], delay : Union [ int , float ] = 0.1 , block : bool = False ) -> bool : \"\"\" This method waits until all Tasks in the PriorityTaskQueue is done. If the parameter block is True it will stop any new Task from being submitted while waiting. - :param timeout: (int/float) How long to wait for all tasks in the 'taskQueue' to be finished. - :param delay: (int/float) The amount of time to wait before checking again in seconds. Default 0.1. - :param block: (bool) This will stop new tasks from being submitted to the Queue until finished. - :return: (bool) \"\"\" e = Event () def _wait_completion ( waitTime : Union [ int , float ]) -> bool : current_time = start_time = time . monotonic () while current_time < start_time + waitTime and self . has_workers : if self . unfinished_tasks == 0 : return True e . wait ( timeout = delay ) current_time = time . monotonic () return False if block : start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): return _wait_completion ( max ( 0.1 , ( start + timeout ) - time . monotonic ())) return _wait_completion ( timeout ) def shutdown ( self , timeout : Optional [ int ] = None , unsafe : Optional [ bool ] = None ) -> bool : \"\"\" This sends a kill operation too all the workers and waits for them to complete and then removes the threads. It can also attempt to kill Workers in an unsafe way with the 'terminate' Worker method. - :param timeout: (int) The length of time to wait on tasks to be stopped - :param unsafe: (bool/None) True: The 'terminate' method will be called on each Worker. False: Even if the timeout is reached the 'terminate' method will *not* be called. None: This will attempt to safely wait for the Workers too finish but if timeout is reached then the 'terminate' method will be called. - :return: (bool) \"\"\" e = Event () self . state = __STOPPING__ if timeout is None : timeout = self . __timeout def _clear_helper ( task ): return task . task . func != Worker . __KILL__ def _clear_shutdown_tasks (): try : tasks = [] while not self . taskQueue . empty (): tasks . append ( self . taskQueue . get ()) self . taskQueue . task_done () for task in filter ( _clear_helper , tasks ): if self . has_workers : self . taskQueue . put_nowait ( task ) else : self . ignoredTasks . append ( task ) except Exception as e : self . log . error ( f '[ERROR]: Error while clearing old tasks: {e}' ) self . log . debug ( f '[DEBUG]: Trace for error clearing old tasks: {traceback.format_exc()}' ) def _unsafe_shutdown (): for worker in self . workers : self . log . info ( f 'Worker: {worker} will be killed unsafely.' ) worker . terminate () if unsafe : _unsafe_shutdown () e . wait ( timeout = 0.1 ) return self . num_workers == 0 start_time = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): for x in range ( 0 , self . num_workers ): self . remove_worker ( timeout = 0 ) current_time = time . monotonic () while current_time < start_time + timeout : if self . num_workers <= 0 : self . log . info ( 'There are no more workers. No need for forced timeout' ) break e . wait ( timeout = 0.1 ) current_time = time . monotonic () if unsafe is None : _unsafe_shutdown () e . wait ( timeout = 0.1 ) _clear_shutdown_tasks () if self . num_workers == 0 : self . state = __STOPPED__ return True return False def join ( self , timeout : int ) -> bool : \"\"\" This first calls 'waitCompletion' with 'block=True' and then calls 'shutdown'. The goal is to try to wait for all Tasks to complete and then close out the Pool. - :param timeout: (int)The length of time to wait on both join and shutdown. - :return: (bool) \"\"\" with wait_lock ( self . __taskLock , timeout = timeout ): start_time = time . monotonic () self . wait_completion ( timeout , block = True ) return self . shutdown ( timeout = int ( max ( timeout - ( time . monotonic () - start_time ), 1 ))) def map ( self , fn : Callable , params : Tuple , chunksize : int = 0 , * args , ** kwargs ) -> None : \"\"\" A simple mapping tool that takes different params (a List of tuples formatted like [(*args, **kwargs)]) and pass them too a function. chunksize determines how too break up the list and distribute it across Workers. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param params: (Tuple) The Tuple should be formatted like so ( ((arg1, ), {'kwarg1': 'value'}), ...). Each item within the Tuple is a Tuple itself with two items. The first item is positional arguments (args) and the second item is keyword arguments (kwargs). Even if they are empty they need to exist. - :param chunksize: (int) If left at 0 the method will attempt to spread the tasks as evenly as possible. Otherwise it will take the number to mean how many Tasks will be given to a single Worker. - :param kwargs: These are keyword arguments that get passed to the 'submit' method. - :return: (None) \"\"\" if 'submit_task_autospawn' not in kwargs : kwargs [ 'submit_task_autospawn' ] = True if chunksize == 0 : if len ( params ) <= self . maxWorkers : chunksize = 1 else : chunksize = round ( len ( params ) / self . maxWorkers ) def chunkHelper ( func , chunkList ): return [ func ( * parms [ 0 ], ** parms [ 1 ]) for parms in chunkList ] def listIntoChunks ( lst ): return [ lst [ i * chunksize :( i + 1 ) * chunksize ] for i in range (( len ( lst ) + chunksize - 1 ) // chunksize )] for item in listIntoChunks ( params ): self . submit ( partial ( chunkHelper , func = fn , chunkList = item ), ** kwargs ) def submit ( self , fn : Callable , * args , ** kwargs ) -> Union [ Task , bool ]: \"\"\" This is the function used to submit a Task to the Pool. Simply provide a function as 'fn' and then arguments that need to be passed too that function and it will create a Task and add it to the PriorityTaskQueue to be worked. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param args: These args will be passed to the Task object. - :param kwargs: The following keywords will be pulled out. 'submit_task_nowait', 'submit_task_timeout', 'submit_task_autospawn', 'submit_task_priority'. All others will be passed to Task. + 'submit_task_nowait': (bool) tells 'submit' to use the 'put_nowait' method on PriorityTaskQueue. + 'submit_task_timeout': (int/float) how long should one wait too submit. + 'submit_task_autospawn': (bool/None) determines if new Worker should be spawned because of more tasks. + 'submit_task_priority': (int) changes the priority of the task. - :return: (Task/bool) \"\"\" if fn is None : return False def autospawn_parser ( tmpAutospawn , state ): if state == __STOPPING__ or state == __STOPPED__ : return False if self . needs_workers and tmpAutospawn is None : return True return tmpAutospawn nowait = kwargs . pop ( 'submit_task_nowait' , True ) timeout = kwargs . pop ( 'submit_task_timeout' , 10 ) autospawn = autospawn_parser ( kwargs . pop ( 'submit_task_autospawn' , None ), self . state ) priority = kwargs . pop ( 'submit_task_priority' , 10 ) or 10 start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): if isinstance ( fn , Task ): task = fn else : task = Task ( fn , priority , * args , ** kwargs ) try : if nowait : self . taskQueue . put_nowait ( task ) else : self . taskQueue . put ( task , timeout = max ( 0.1 , ( start + timeout ) - time . monotonic ())) if autospawn or autospawn is None and self . needs_workers : self . add_worker ( ** kwargs ) return task except Exception as e : self . log . error ( f 'Error in submitting task: {e} \\n {traceback.format_exc()}' ) return False finally : if self . state is not __ACTIVE__ and self . num_workers > 0 : self . state = __ACTIVE__ @ staticmethod def as_completed ( tasks : List [ Task ]): def _finished_tasks ( task_item ): return task_item if task_item . is_set () else None lengthOfTasks = len ( tasks ) finished_tasks = set () while len ( finished_tasks ) < lengthOfTasks : for task in filter ( _finished_tasks , tasks ): if task not in finished_tasks : finished_tasks . add ( task ) yield task time . sleep ( 0.01 ) @ property def unfinished_tasks ( self ) -> int : \"\"\"+ This calls the 'unfinishedTasks' property of PriorityTaskQueue. And is equal to the number of tasks submitted minus the number of times a Task has been Worked by a Worker. \"\"\" return self . taskQueue . unfinished_tasks @ property def num_queued_tasks ( self ) -> int : \"\"\" This is a wrapper for the 'qsize()' method from PriorityTaskQueue.\"\"\" return self . taskQueue . qsize () @ property def num_active_tasks ( self ) -> int : return self . unfinished_tasks - self . num_queued_tasks @ property def has_tasks ( self ) -> bool : return self . unfinished_tasks > 0 @ property def is_idle ( self ) -> bool : return not ( self . has_tasks and self . has_workers ) @ property def is_active ( self ) -> bool : \"\"\"+ This determines is the Pool both has workers and has work to do. This doesn't have anything to do with a Pool's state. \"\"\" return self . has_tasks and self . has_workers @ property def has_workers ( self ) -> bool : return self . num_workers > 0 @ property def needs_workers ( self ) -> bool : if self . num_workers < self . maxWorkers : if self . num_queued_tasks > self . inactive_workers : return True return False @ property def num_workers ( self ) -> int : try : return len ( self . workers ) except Exception : return 0 @ property def active_workers ( self ) -> int : return len ([ i for i in self . workers if i . is_active ]) @ property def inactive_workers ( self ) -> int : return len ([ i for i in self . workers if not i . is_active ]) @ property def highest_priority ( self ) -> int : return max ([ i . current_priority for i in self . workers ]) @ property def workers ( self ) -> List : \"\"\"+ This is a protected (wrapped in a lock) List of Workers managed by this pool. \"\"\" try : with wait_lock ( self . __workerListLock , self . __timeout ): return self . __workerList except RuntimeError : pass @ workers . setter def workers ( self , value ) -> None : try : with wait_lock ( self . __workerListLock , self . __timeout ): self . __workerList = value except RuntimeError : pass @ workers . deleter def workers ( self ) -> None : try : with wait_lock ( self . __workerListLock , self . __timeout ): self . __workerList = [] except RuntimeError : pass @ property def state ( self ) -> str : \"\"\"+ This is a string that has only 4 valid string values that determines the state of the Pool.\"\"\" try : with wait_lock ( self . __stateLock , self . __timeout ): return self . _state except RuntimeError : pass @ state . setter def state ( self , value ) -> None : try : with wait_lock ( self . __stateLock , self . __timeout ): if value in __THREADPOOL_STATES__ : self . _state = __THREADPOOL_STATES__ [ value ] else : raise TypeError ( 'Invalid ThreadPool STATE: %s ' % str ( value )) except RuntimeError : pass @ state . deleter def state ( self ) -> None : try : with wait_lock ( self . __stateLock , self . __timeout ): self . _state = __INACTIVE__ except RuntimeError : pass Descendants PyMultiTasking.ThreadingUtils.ThreadPool Static methods as_completed def as_completed ( tasks : 'List[Task]' ) View Source @staticmethod def as_completed ( tasks : List [ Task ] ) : def _finished_tasks ( task_item ) : return task_item if task_item . is_set () else None lengthOfTasks = len ( tasks ) finished_tasks = set () while len ( finished_tasks ) < lengthOfTasks : for task in filter ( _finished_tasks , tasks ) : if task not in finished_tasks : finished_tasks . add ( task ) yield task time . sleep ( 0.01 ) Instance variables active_workers has_tasks has_workers highest_priority inactive_workers is_active This determines is the Pool both has workers and has work to do. This doesn't have anything to do with a Pool's state. is_idle needs_workers num_active_tasks num_queued_tasks This is a wrapper for the 'qsize()' method from PriorityTaskQueue. num_workers state This is a string that has only 4 valid string values that determines the state of the Pool. unfinished_tasks This calls the 'unfinishedTasks' property of PriorityTaskQueue. And is equal to the number of tasks submitted minus the number of times a Task has been Worked by a Worker. workers This is a protected (wrapped in a lock) List of Workers managed by this pool. Methods add_worker def add_worker ( self , workerAutoKill : 'Optional[bool]' = None , allow_restart : 'bool' = False , ** kwargs ) -> 'bool' Adds a single new worker too the Pool. :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in :return: (bool) View Source def add_worker ( self , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False , ** kwargs ) -> bool : \"\"\" Adds a single new worker too the Pool. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in - :return: (bool) \"\"\" self . log . debug ( \"Attempting to add new worker!\" ) if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if self . num_workers >= self . maxWorkers : return False self . workers . append ( self . workerType ( self , workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill )) return True join def join ( self , timeout : 'int' ) -> 'bool' This first calls 'waitCompletion' with 'block=True' and then calls 'shutdown'. The goal is to try to wait for all Tasks to complete and then close out the Pool. :param timeout: (int)The length of time to wait on both join and shutdown. :return: (bool) View Source def join ( self , timeout : int ) -> bool : \"\"\" This first calls ' waitCompletion ' with ' block = True ' and then calls ' shutdown '. The goal is to try to wait for all Tasks to complete and then close out the Pool. - :param timeout: (int)The length of time to wait on both join and shutdown. - :return: (bool) \"\"\" with wait_lock ( self . __taskLock , timeout = timeout ) : start_time = time . monotonic () self . wait_completion ( timeout , block = True ) return self . shutdown ( timeout = int ( max ( timeout - ( time . monotonic () - start_time ), 1 ))) map def map ( self , fn : 'Callable' , params : 'Tuple' , chunksize : 'int' = 0 , * args , ** kwargs ) -> 'None' A simple mapping tool that takes different params (a List of tuples formatted like [( args, *kwargs)]) and pass them too a function. chunksize determines how too break up the list and distribute it across Workers. :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task :param params: (Tuple) The Tuple should be formatted like so ( ((arg1, ), {'kwarg1': 'value'}), ...). Each item within the Tuple is a Tuple itself with two items. The first item is positional arguments (args) and the second item is keyword arguments (kwargs). Even if they are empty they need to exist. :param chunksize: (int) If left at 0 the method will attempt to spread the tasks as evenly as possible. Otherwise it will take the number to mean how many Tasks will be given to a single Worker. :param kwargs: These are keyword arguments that get passed to the 'submit' method. :return: (None) View Source def map ( self , fn : Callable , params : Tuple , chunksize : int = 0 , * args , ** kwargs ) -> None : \"\"\" A simple mapping tool that takes different params (a List of tuples formatted like [(*args, **kwargs)]) and pass them too a function. chunksize determines how too break up the list and distribute it across Workers. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param params: (Tuple) The Tuple should be formatted like so ( ((arg1, ), {'kwarg1': 'value'}), ...). Each item within the Tuple is a Tuple itself with two items. The first item is positional arguments (args) and the second item is keyword arguments (kwargs). Even if they are empty they need to exist. - :param chunksize: (int) If left at 0 the method will attempt to spread the tasks as evenly as possible. Otherwise it will take the number to mean how many Tasks will be given to a single Worker. - :param kwargs: These are keyword arguments that get passed to the 'submit' method. - :return: (None) \"\"\" if 'submit_task_autospawn' not in kwargs : kwargs [ 'submit_task_autospawn' ] = True if chunksize == 0 : if len ( params ) <= self . maxWorkers : chunksize = 1 else : chunksize = round ( len ( params ) / self . maxWorkers ) def chunkHelper ( func , chunkList ): return [ func ( * parms [ 0 ], ** parms [ 1 ]) for parms in chunkList ] def listIntoChunks ( lst ): return [ lst [ i * chunksize :( i + 1 ) * chunksize ] for i in range (( len ( lst ) + chunksize - 1 ) // chunksize )] for item in listIntoChunks ( params ): self . submit ( partial ( chunkHelper , func = fn , chunkList = item ), ** kwargs ) remove_worker def remove_worker ( self , workerTooRemove : 'Optional[Worker]' = None , timeout : 'int' = 30 , allow_abandon : 'bool' = False ) -> 'bool' Removes a single new worker from the Pool. This can be called to remove the last Worker or you can specify a Worker to remove. :param workerTooRemove: (Worker) This is usually sent when a Worker is self terminating :param timeout: (int) 30, How much time it is willing to wait. NOTE: This is doubled when specifying a worker with the workerTooRemove parameter. :param allow_abandon: (bool) False, This determines if the thread will simply be abandoned if it cannot normally remove it from the pool. It will only do this if 'safe_stop' and 'terminate' methods fail. :return: (bool) View Source def remove_worker ( self , workerTooRemove : Optional [ Worker ] = None , timeout : int = 30 , allow_abandon : bool = False ) -> bool : \"\"\" Removes a single new worker from the Pool. This can be called to remove the last Worker or you can specify a Worker to remove. - :param workerTooRemove: (Worker) This is usually sent when a Worker is self terminating - :param timeout: (int) 30, How much time it is willing to wait. NOTE: This is doubled when specifying a worker with the workerTooRemove parameter. - :param allow_abandon: (bool) False, This determines if the thread will simply be abandoned if it cannot normally remove it from the pool. It will only do this if 'safe_stop' and 'terminate' methods fail. - :return: (bool) \"\"\" def wait_helper ( wait_time , start_time , ev , wtr ) : current_time = time . monotonic () while current_time < start_time + wait_time and wtr in self . workers : ev . wait ( timeout = 0.1 ) return wtr not in self . workers try : if self . num_workers <= 0 : return False if workerTooRemove in self . workers and workerTooRemove . killed : self . workers . pop ( self . workers . index ( workerTooRemove )) return True e = Event () if workerTooRemove is not None : workerTooRemove . safe_stop () if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ) : return True self . log . warning ( f '[WARN]: worker({workerTooRemove}) needs to be terminated in order to be removed.' ) getattr ( workerTooRemove , 'terminate' , dummy_func )() if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ) : return True if allow_abandon : self . log . warning ( f '[WARN]: worker({workerTooRemove}) is being abandoned.' ) worker = self . workers . pop ( self . workers . index ( workerTooRemove )) if worker . killed is not True : worker . killed = True return True return False else : current_num = self . num_workers self . submit ( Task ( Worker . __KILL__ , priority = self . highest_priority + 1 , kill = True ), submit_task_autospawn = False ) if timeout > 0 : current = start = time . monotonic () while current < start + timeout and self . num_workers >= current_num : e . wait ( timeout = 0.1 ) return self . num_workers < current_num return True except Exception as e : self . log . error ( f '[ERROR]: Error occurred while attempting to remove worker: {e}' ) self . log . debug ( f '[DEBUG]: Trace for error while attempting to remove worker: {traceback.format_exc()}' ) return False finally : if self . num_workers == 0 : self . state = __INACTIVE__ set_max_workers def set_max_workers ( self , maxWorkers : 'int' ) -> 'int' Set the maximum number of threads that will remain active. Return the maximum thread limit. :param maxWorkers: (int) Max thread limit :return: (int) View Source def set_max_workers ( self , maxWorkers : int ) -> int : \"\"\" Set the maximum number of threads that will remain active. Return the maximum thread limit. - :param maxWorkers: (int) Max thread limit - :return: (int) \"\"\" if type ( maxWorkers ) is int and maxWorkers > - 1 : self . maxWorkers = maxWorkers return self . maxWorkers setup_workers def setup_workers ( self , numOfWorkers : 'int' = 1 , workerAutoKill : 'Optional[bool]' = None , allow_restart : 'bool' = False ) -> 'bool' Generally only used by init. This setups Worker threads to be managed by the Pool. :param numOfWorkers: (int) Number workers setup. IF the number of workers is higher then the value of 'maxWorkers' then 'maxWorkers' is updated. The numOfWorkers is how many Workers the Pool has not now many new Workers get added. :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in the 'taskQueue'. :return: (bool) View Source def setup_workers ( self , numOfWorkers : int = 1 , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False ) -> bool : \"\"\" Generally only used by init. This setups Worker threads to be managed by the Pool. - :param numOfWorkers: (int) Number workers setup. IF the number of workers is higher then the value of 'maxWorkers' then 'maxWorkers' is updated. The numOfWorkers is how many Workers the Pool has *not* now many new Workers get added. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in the 'taskQueue'. - :return: (bool) \"\"\" if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if numOfWorkers > self . maxWorkers : self . set_max_workers ( numOfWorkers ) numOfNewWorkers = ( numOfWorkers - self . num_workers ) elif numOfWorkers > ( self . maxWorkers - self . num_workers ) : numOfNewWorkers = ( self . maxWorkers - self . num_workers ) else : numOfNewWorkers = numOfWorkers for _ in range ( 0 , numOfNewWorkers ) : self . add_worker ( workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill , allow_restart = allow_restart ) return numOfNewWorkers > 0 shutdown def shutdown ( self , timeout : 'Optional[int]' = None , unsafe : 'Optional[bool]' = None ) -> 'bool' This sends a kill operation too all the workers and waits for them to complete and then removes the threads. It can also attempt to kill Workers in an unsafe way with the 'terminate' Worker method. :param timeout: (int) The length of time to wait on tasks to be stopped :param unsafe: (bool/None) True: The 'terminate' method will be called on each Worker. False: Even if the timeout is reached the 'terminate' method will not be called. None: This will attempt to safely wait for the Workers too finish but if timeout is reached then the 'terminate' method will be called. :return: (bool) View Source def shutdown ( self , timeout : Optional [ int ] = None , unsafe : Optional [ bool ] = None ) -> bool : \"\"\" This sends a kill operation too all the workers and waits for them to complete and then removes the threads. It can also attempt to kill Workers in an unsafe way with the 'terminate' Worker method. - :param timeout: (int) The length of time to wait on tasks to be stopped - :param unsafe: (bool/None) True: The 'terminate' method will be called on each Worker. False: Even if the timeout is reached the 'terminate' method will *not* be called. None: This will attempt to safely wait for the Workers too finish but if timeout is reached then the 'terminate' method will be called. - :return: (bool) \"\"\" e = Event () self . state = __STOPPING__ if timeout is None : timeout = self . __timeout def _clear_helper ( task ) : return task . task . func != Worker . __KILL__ def _clear_shutdown_tasks () : try : tasks = [] while not self . taskQueue . empty () : tasks . append ( self . taskQueue . get ()) self . taskQueue . task_done () for task in filter ( _clear_helper , tasks ) : if self . has_workers : self . taskQueue . put_nowait ( task ) else : self . ignoredTasks . append ( task ) except Exception as e : self . log . error ( f '[ERROR]: Error while clearing old tasks: {e}' ) self . log . debug ( f '[DEBUG]: Trace for error clearing old tasks: {traceback.format_exc()}' ) def _unsafe_shutdown () : for worker in self . workers : self . log . info ( f 'Worker: {worker} will be killed unsafely.' ) worker . terminate () if unsafe : _unsafe_shutdown () e . wait ( timeout = 0.1 ) return self . num_workers == 0 start_time = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ) : for x in range ( 0 , self . num_workers ) : self . remove_worker ( timeout = 0 ) current_time = time . monotonic () while current_time < start_time + timeout : if self . num_workers <= 0 : self . log . info ( 'There are no more workers. No need for forced timeout' ) break e . wait ( timeout = 0.1 ) current_time = time . monotonic () if unsafe is None : _unsafe_shutdown () e . wait ( timeout = 0.1 ) _clear_shutdown_tasks () if self . num_workers == 0 : self . state = __STOPPED__ return True return False submit def submit ( self , fn : 'Callable' , * args , ** kwargs ) -> 'Union[Task, bool]' This is the function used to submit a Task to the Pool. Simply provide a function as 'fn' and then arguments that need to be passed too that function and it will create a Task and add it to the PriorityTaskQueue to be worked. :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task :param args: These args will be passed to the Task object. :param kwargs: The following keywords will be pulled out. 'submit_task_nowait', 'submit_task_timeout', 'submit_task_autospawn', 'submit_task_priority'. All others will be passed to Task. 'submit_task_nowait': (bool) tells 'submit' to use the 'put_nowait' method on PriorityTaskQueue. 'submit_task_timeout': (int/float) how long should one wait too submit. 'submit_task_autospawn': (bool/None) determines if new Worker should be spawned because of more tasks. 'submit_task_priority': (int) changes the priority of the task. :return: (Task/bool) View Source def submit ( self , fn : Callable , * args , ** kwargs ) -> Union [ Task , bool ]: \"\"\" This is the function used to submit a Task to the Pool. Simply provide a function as 'fn' and then arguments that need to be passed too that function and it will create a Task and add it to the PriorityTaskQueue to be worked. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param args: These args will be passed to the Task object. - :param kwargs: The following keywords will be pulled out. 'submit_task_nowait', 'submit_task_timeout', 'submit_task_autospawn', 'submit_task_priority'. All others will be passed to Task. + 'submit_task_nowait': (bool) tells 'submit' to use the 'put_nowait' method on PriorityTaskQueue. + 'submit_task_timeout': (int/float) how long should one wait too submit. + 'submit_task_autospawn': (bool/None) determines if new Worker should be spawned because of more tasks. + 'submit_task_priority': (int) changes the priority of the task. - :return: (Task/bool) \"\"\" if fn is None : return False def autospawn_parser ( tmpAutospawn , state ): if state == __STOPPING__ or state == __STOPPED__ : return False if self . needs_workers and tmpAutospawn is None : return True return tmpAutospawn nowait = kwargs . pop ( ' submit_task_nowait ' , True ) timeout = kwargs . pop ( ' submit_task_timeout ' , 10 ) autospawn = autospawn_parser ( kwargs . pop ( ' submit_task_autospawn ' , None ), self . state ) priority = kwargs . pop ( ' submit_task_priority ' , 10 ) or 10 start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): if isinstance ( fn , Task ): task = fn else : task = Task ( fn , priority , * args , ** kwargs ) try : if nowait : self . taskQueue . put_nowait ( task ) else : self . taskQueue . put ( task , timeout = max ( 0.1 , ( start + timeout ) - time . monotonic ())) if autospawn or autospawn is None and self . needs_workers : self . add_worker ( ** kwargs ) return task except Exception as e : self . log . error ( f ' Error in submitting task : { e } \\ n { traceback . format_exc ()} ' ) return False finally : if self . state is not __ACTIVE__ and self . num_workers > 0 : self . state = __ACTIVE__ wait_completion def wait_completion ( self , timeout : 'Union[int, float]' , delay : 'Union[int, float]' = 0.1 , block : 'bool' = False ) -> 'bool' This method waits until all Tasks in the PriorityTaskQueue is done. If the parameter block is True it will stop any new Task from being submitted while waiting. :param timeout: (int/float) How long to wait for all tasks in the 'taskQueue' to be finished. :param delay: (int/float) The amount of time to wait before checking again in seconds. Default 0.1. :param block: (bool) This will stop new tasks from being submitted to the Queue until finished. :return: (bool) View Source def wait_completion ( self , timeout : Union [ int , float ], delay : Union [ int , float ] = 0.1 , block : bool = False ) -> bool : \"\"\" This method waits until all Tasks in the PriorityTaskQueue is done. If the parameter block is True it will stop any new Task from being submitted while waiting. - :param timeout: (int/float) How long to wait for all tasks in the ' taskQueue ' to be finished. - :param delay: (int/float) The amount of time to wait before checking again in seconds. Default 0.1. - :param block: (bool) This will stop new tasks from being submitted to the Queue until finished. - :return: (bool) \"\"\" e = Event () def _wait_completion ( waitTime : Union [ int , float ]) -> bool : current_time = start_time = time . monotonic () while current_time < start_time + waitTime and self . has_workers : if self . unfinished_tasks == 0 : return True e . wait ( timeout = delay ) current_time = time . monotonic () return False if block : start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ) : return _wait_completion ( max ( 0.1 , ( start + timeout ) - time . monotonic ())) return _wait_completion ( timeout ) PriorityTaskQueue class PriorityTaskQueue ( maxsize = 0 ) This is a simple override of the PriorityQueue class that ensures the 'item' is a Task class meant to be used ONLY in ThreadingPool View Source class PriorityTaskQueue ( PriorityQueue ) : \"\"\" <a name=\" PriorityTaskQueue \"></a> This is a simple override of the PriorityQueue class that ensures the 'item' is a Task class meant to be used ONLY in ThreadingPool \"\"\" def put_nowait ( self , item : Task ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put_nowait ( item ) def put ( self , item : Task , block : bool = True , timeout : Union [ int, float, None ] = None ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put ( item , block = block , timeout = timeout ) Ancestors (in MRO) queue.PriorityQueue queue.Queue Methods empty def empty ( self ) Return True if the queue is empty, False otherwise (not reliable!). This method is likely to be removed at some point. Use qsize() == 0 as a direct substitute, but be aware that either approach risks a race condition where a queue can grow before the result of empty() or qsize() can be used. To create code that needs to wait for all queued tasks to be completed, the preferred technique is to use the join() method. View Source def empty(self): '''Return True if the queue is empty, False otherwise (not reliable!). This method is likely to be removed at some point. Use qsize() == 0 as a direct substitute, but be aware that either approach risks a race condition where a queue can grow before the result of empty() or qsize() can be used. To create code that needs to wait for all queued tasks to be completed, the preferred technique is to use the join() method. ''' with self.mutex: return not self._qsize() full def full ( self ) Return True if the queue is full, False otherwise (not reliable!). This method is likely to be removed at some point. Use qsize() >= n as a direct substitute, but be aware that either approach risks a race condition where a queue can shrink before the result of full() or qsize() can be used. View Source def full(self): '''Return True if the queue is full, False otherwise (not reliable!). This method is likely to be removed at some point. Use qsize() >= n as a direct substitute, but be aware that either approach risks a race condition where a queue can shrink before the result of full() or qsize() can be used. ''' with self.mutex: return 0 < self.maxsize <= self._qsize() get def get ( self , block = True , timeout = None ) Remove and return an item from the queue. If optional args 'block' is true and 'timeout' is None (the default), block if necessary until an item is available. If 'timeout' is a non-negative number, it blocks at most 'timeout' seconds and raises the Empty exception if no item was available within that time. Otherwise ('block' is false), return an item if one is immediately available, else raise the Empty exception ('timeout' is ignored in that case). View Source def get(self, block=True, timeout=None): '''Remove and return an item from the queue. If optional args 'block' is true and 'timeout' is None (the default), block if necessary until an item is available. If 'timeout' is a non-negative number, it blocks at most 'timeout' seconds and raises the Empty exception if no item was available within that time. Otherwise ('block' is false), return an item if one is immediately available, else raise the Empty exception ('timeout' is ignored in that case). ''' with self.not_empty: if not block: if not self._qsize(): raise Empty elif timeout is None: while not self._qsize(): self.not_empty.wait() elif timeout < 0: raise ValueError(\"'timeout' must be a non-negative number\") else: endtime = time() + timeout while not self._qsize(): remaining = endtime - time() if remaining <= 0.0: raise Empty self.not_empty.wait(remaining) item = self._get() self.not_full.notify() return item get_nowait def get_nowait ( self ) Remove and return an item from the queue without blocking. Only get an item if one is immediately available. Otherwise raise the Empty exception. View Source def get_nowait(self): '''Remove and return an item from the queue without blocking. Only get an item if one is immediately available. Otherwise raise the Empty exception. ''' return self.get(block=False) join def join ( self ) Blocks until all items in the Queue have been gotten and processed. The count of unfinished tasks goes up whenever an item is added to the queue. The count goes down whenever a consumer thread calls task_done() to indicate the item was retrieved and all work on it is complete. When the count of unfinished tasks drops to zero, join() unblocks. View Source def join(self): '''Blocks until all items in the Queue have been gotten and processed. The count of unfinished tasks goes up whenever an item is added to the queue. The count goes down whenever a consumer thread calls task_done() to indicate the item was retrieved and all work on it is complete. When the count of unfinished tasks drops to zero, join() unblocks. ''' with self.all_tasks_done: while self.unfinished_tasks: self.all_tasks_done.wait() put def put ( self , item : 'Task' , block : 'bool' = True , timeout : 'Union[int, float, None]' = None ) -> 'None' Put an item into the queue. If optional args 'block' is true and 'timeout' is None (the default), block if necessary until a free slot is available. If 'timeout' is a non-negative number, it blocks at most 'timeout' seconds and raises the Full exception if no free slot was available within that time. Otherwise ('block' is false), put an item on the queue if a free slot is immediately available, else raise the Full exception ('timeout' is ignored in that case). View Source def put ( self , item : Task , block : bool = True , timeout : Union [ int, float, None ] = None ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put ( item , block = block , timeout = timeout ) put_nowait def put_nowait ( self , item : 'Task' ) -> 'None' Put an item into the queue without blocking. Only enqueue the item if a free slot is immediately available. Otherwise raise the Full exception. View Source def put_nowait ( self , item : Task ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put_nowait ( item ) qsize def qsize ( self ) Return the approximate size of the queue (not reliable!). View Source def qsize(self): '''Return the approximate size of the queue (not reliable!).''' with self.mutex: return self._qsize() task_done def task_done ( self ) Indicate that a formerly enqueued task is complete. Used by Queue consumer threads. For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task is complete. If a join() is currently blocking, it will resume when all items have been processed (meaning that a task_done() call was received for every item that had been put() into the queue). Raises a ValueError if called more times than there were items placed in the queue. View Source def task_done(self): '''Indicate that a formerly enqueued task is complete. Used by Queue consumer threads. For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task is complete. If a join() is currently blocking, it will resume when all items have been processed (meaning that a task_done() call was received for every item that had been put() into the queue). Raises a ValueError if called more times than there were items placed in the queue. ''' with self.all_tasks_done: unfinished = self.unfinished_tasks - 1 if unfinished <= 0: if unfinished < 0: raise ValueError('task_done() called too many times') self.all_tasks_done.notify_all() self.unfinished_tasks = unfinished ProcessTaskQueue class ProcessTaskQueue ( maxsize = 0 , * , ctx = None ) This is a simple override of the JoinableQueue class that ensures the 'item' is a Task class meant to be used ONLY in ProcessingPool View Source class ProcessTaskQueue ( JoinableQueue ) : \"\"\" <a name=\" ProcessTaskQueue \"></a> This is a simple override of the JoinableQueue class that ensures the 'item' is a Task class meant to be used ONLY in ProcessingPool \"\"\" def __init__ ( self , maxsize = 0 , * , ctx = None ) : super ( ProcessTaskQueue , self ). __init__ ( maxsize = maxsize , ctx = ctx or multiprocessing . get_context ()) def put_nowait ( self , item : Task ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put_nowait ( item ) def put ( self , item : Task , block : bool = True , timeout : Union [ int, float, None ] = None ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put ( item , block = block , timeout = timeout ) Ancestors (in MRO) multiprocessing.queues.JoinableQueue multiprocessing.queues.Queue Methods cancel_join_thread def cancel_join_thread ( self ) View Source def cancel_join_thread(self): debug('Queue.cancel_join_thread()') self._joincancelled = True try: self._jointhread.cancel() except AttributeError: pass close def close ( self ) View Source def close(self): self._closed = True close = self._close if close: self._close = None close() empty def empty ( self ) View Source def empty(self): return not self._poll() full def full ( self ) View Source def full(self): return self._sem._semlock._is_zero() get def get ( self , block = True , timeout = None ) View Source def get ( self , block = True , timeout = None ): if self . _closed : raise ValueError ( f \"Queue {self!r} is closed\" ) if block and timeout is None : with self . _rlock : res = self . _recv_bytes () self . _sem . release () else : if block : deadline = time . monotonic () + timeout if not self . _rlock . acquire ( block , timeout ): raise Empty try : if block : timeout = deadline - time . monotonic () if not self . _poll ( timeout ): raise Empty elif not self . _poll (): raise Empty res = self . _recv_bytes () self . _sem . release () finally : self . _rlock . release () # unserialize the data after having released the lock return _ForkingPickler . loads ( res ) get_nowait def get_nowait ( self ) View Source def get_nowait(self): return self.get(False) join def join ( self ) View Source def join(self): with self._cond: if not self._unfinished_tasks._semlock._is_zero(): self._cond.wait() join_thread def join_thread ( self ) View Source def join_thread(self): debug('Queue.join_thread()') assert self._closed, \"Queue {0!r} not closed\".format(self) if self._jointhread: self._jointhread() put def put ( self , item : 'Task' , block : 'bool' = True , timeout : 'Union[int, float, None]' = None ) -> 'None' View Source def put ( self , item : Task , block : bool = True , timeout : Union [ int, float, None ] = None ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put ( item , block = block , timeout = timeout ) put_nowait def put_nowait ( self , item : 'Task' ) -> 'None' View Source def put_nowait ( self , item : Task ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put_nowait ( item ) qsize def qsize ( self ) View Source def qsize(self): # Raises NotImplementedError on Mac OSX because of broken sem_getvalue() return self._maxsize - self._sem._semlock._get_value() task_done def task_done ( self ) View Source def task_done(self): with self._cond: if not self._unfinished_tasks.acquire(False): raise ValueError('task_done() called too many times') if self._unfinished_tasks._semlock._is_zero(): self._cond.notify_all() Task class Task ( fn : 'Callable' , priority : 'int' = 1 , kill : 'bool' = False , inject_task : 'bool' = True , store_return : 'bool' = True , ignore_queue : 'bool' = False , callback_func : 'Optional[Callable]' = None , semaphore : 'Optional[Semaphore]' = None , * args , ** kwargs ) This is a wrapper class that inherits from an Event Object and is used inside the Worker. It is designed to hold the function ran and save the results of the function. View Source class Task ( Event ) : \"\"\" <a name=\" Task \"></a> This is a wrapper class that inherits from an Event Object and is used inside the Worker. It is designed to hold the function ran and save the results of the function. \"\"\" defaultriority : int = 1 def __init__ ( self , fn : Callable , priority : int = 1 , kill : bool = False , inject_task : bool = True , store_return : bool = True , ignore_queue : bool = False , callback_func : Optional [ Callable ] = None , semaphore : Optional [ Semaphore ] = None , * args , ** kwargs ) : super (). __init__ () self . args = args self . kwargs = kwargs self . priority = priority self . kill = kill self . ignore_queue = ignore_queue self . callback_fun = callback_func self . semaphore = semaphore if semaphore is not None else Semaphore ( 1 ) if isinstance ( fn , partial ) : if inject_task and Task . __inspect_kwargs ( fn . func ) : fn . keywords . update ( { 'TaskObject' : self } ) self . task = fn else : if inject_task and Task . __inspect_kwargs ( fn ) : self . kwargs . update ( { 'TaskObject' : self } ) self . task = partial ( fn , * self . args , ** self . kwargs ) self . store_return = store_return self . uuid = str ( uuid . uuid4 ()) self . __updateRLock = MultiProcRLock () self . __worker = None self . __results = None def run ( self , * args , ** kwargs ) -> Any : \"\"\" This is used to run the stored partial function and store the results. - :param args: Positional arguments to be passed to the task. - :param kwargs: Keyword arguments to be passed to the task - :return: (Anything) \"\"\" if self . is_set () : raise Exception ( 'A Task Object cannot be ran more than once!' ) try : self . semaphore . acquire () if self . store_return : self . results = self . task ( * args , ** kwargs ) if self . callback_fun : return self . callback_fun ( self . results ) else : if self . callback_fun : return self . callback_fun ( self . task ( * args , ** kwargs )) else : return self . task ( * args , ** kwargs ) except Exception as e : _log . info ( f '{self} failed' ) raise e else : _log . info ( f '{self} succeeded' ) finally : self . set () self . semaphore . release () if self . store_return : return self . results def clear ( self ) -> None : if self . is_set () : raise Exception ( 'A Task Object cannot be cleared once set!' ) return super ( Task , self ). clear () @staticmethod def __inspect_kwargs ( func , keyword = 'TaskObject' ) : try : return [ key for key in inspect.signature(func).parameters.keys() if keyword == key or 'kwargs' == key ] except : return [] def __hash__ ( self ) : return hash ( self . uuid ) def __call__ ( self , * args , ** kwargs ) : return self . run ( * args , ** kwargs ) def __str__ ( self ) : return f 'Task(UUID={self.uuid},Priority={self.priority}): {self.task.func}' def __gt__ ( self , other : Task ) : return self . priority > other . priority def __lt__ ( self , other : Task ) : return self . priority < other . priority def __ge__ ( self , other : Task ) : return self . priority >= other . priority def __le__ ( self , other : Task ) : return self . priority <= other . priority @property def worker ( self ) : with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = False ) as acquired : if acquired : return self . __worker @worker . setter def worker ( self , value ) : with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ) : self . __worker = value @worker . deleter def worker ( self ) : with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ) : del self . __worker @property def results ( self ) : with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = False ) as acquired : if acquired : return self . __results @results . setter def results ( self , value ) : with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ) : self . __results = value @results . deleter def results ( self ) : with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ) : del self . __results Ancestors (in MRO) threading.Event Class variables defaultriority Instance variables results worker Methods clear def clear ( self ) -> 'None' Reset the internal flag to false. Subsequently, threads calling wait() will block until set() is called to set the internal flag to true again. View Source def clear ( self ) -> None : if self . is_set () : raise Exception ( 'A Task Object cannot be cleared once set!' ) return super ( Task , self ). clear () isSet def isSet ( self ) Return true if and only if the internal flag is true. This method is deprecated, use is_set() instead. View Source def isSet ( self ): \"\"\"Return true if and only if the internal flag is true. This method is deprecated, use is_set() instead. \"\"\" import warnings warnings . warn ( 'isSet() is deprecated, use is_set() instead' , DeprecationWarning , stacklevel = 2 ) return self . is_set () is_set def is_set ( self ) Return true if and only if the internal flag is true. View Source def is_set(self): \"\"\"Return true if and only if the internal flag is true.\"\"\" return self._flag run def run ( self , * args , ** kwargs ) -> 'Any' This is used to run the stored partial function and store the results. :param args: Positional arguments to be passed to the task. :param kwargs: Keyword arguments to be passed to the task :return: (Anything) View Source def run(self, *args, * *kwargs) -> Any: \"\"\" This is used to run the stored partial function and store the results. - :param args: Positional arguments to be passed to the task. - :param kwargs: Keyword arguments to be passed to the task - :return: (Anything) \"\"\" if self.is_set(): raise Exception('A Task Object cannot be ran more than once!') try: self.semaphore.acquire() if self.store_return: self.results = self.task(*args, **kwargs) if self.callback_fun: return self.callback_fun(self.results) else: if self.callback_fun: return self.callback_fun(self.task(*args, **kwargs)) else: return self.task(*args, **kwargs) except Exception as e: _log.info(f'{self} failed') raise e else: _log.info(f'{self} succeeded') finally: self.set() self.semaphore.release() if self.store_return: return self.results set def set ( self ) Set the internal flag to true. All threads waiting for it to become true are awakened. Threads that call wait() once the flag is true will not block at all. View Source def set(self): \"\"\"Set the internal flag to true. All threads waiting for it to become true are awakened. Threads that call wait() once the flag is true will not block at all. \"\"\" with self._cond: self._flag = True self._cond.notify_all() wait def wait ( self , timeout = None ) Block until the internal flag is true. If the internal flag is true on entry, return immediately. Otherwise, block until another thread calls set() to set the flag to true, or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). This method returns the internal flag on exit, so it will always return True except if a timeout is given and the operation times out. View Source def wait ( self , timeout = None ): \"\"\"Block until the internal flag is true. If the internal flag is true on entry, return immediately. Otherwise, block until another thread calls set() to set the flag to true, or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). This method returns the internal flag on exit, so it will always return True except if a timeout is given and the operation times out. \"\"\" with self . _cond : signaled = self . _flag if not signaled : signaled = self . _cond . wait ( timeout ) return signaled Worker class Worker ( pool : 'Optional[Pool]' = None , workerAutoKill : 'bool' = True , defaultTimeout : 'int' = 10 , personalQue : 'Optional[ProcessTaskQueue]' = None , target : 'Optional[Callable]' = None , name : 'Optional[str]' = None , daemon : 'bool' = True , log : 'Optional[logging]' = None , ** kwargs ) This is designed to be managed by a ThreadPool. However, it can run on its own as well. It runs until told to stop and works tasks that come from a the PriorityTaskQueue maintained by the Pool. View Source class Worker : \"\"\" <a name=\" Worker \"></a> This is designed to be managed by a ThreadPool. However, it can run on its own as well. It runs until told to stop and works tasks that come from a the PriorityTaskQueue maintained by the Pool. \"\"\" __workerAutoKill = True __defaultTimeout = 10 workerType = None name = None def __init__ ( self , pool : Optional [ Pool ] = None , workerAutoKill : bool = True , defaultTimeout : int = 10 , personalQue : Optional [ ProcessTaskQueue ] = None , target : Optional [ Callable ] = None , name : Optional [ str ] = None , daemon : bool = True , log : Optional [ logging ] = None , ** kwargs ) : self . uuid = str ( uuid . uuid4 ()) self . log = _log if log is None else log self . __defaultTimeout = defaultTimeout self . __timeout = defaultTimeout self . __personalQue = personalQue self . __currentTask = None if target is not None and not isinstance ( target , Task ) : target = Task ( target , kill = True , ignore_queue = True ) super ( Worker , self ). __init__ ( target = target , name = self . uuid if name is None else name , daemon = daemon , args = kwargs . get ( 'args' , ()), kwargs = kwargs . get ( 'kwargs' , {} )) self . pool = pool self . killed = False self . __workerAutoKill = workerAutoKill if self . __personalQue is None else False if pool : self . log . info ( f '[INFO]: Starting new {self}' ) self . start () def __str__ ( self ) : return f 'Worker: {self.name if self.name == self.uuid else f\"{self.name}-{self.uuid}\"} for Pool: {self.pool}' def __hash__ ( self ) : return hash ( self . uuid ) def safe_stop ( self ) : self . killed = True # noinspection PyUnresolvedReferences def get_next_task ( self ) -> Union [ Task, bool, None ] : \"\"\" This gets the next Task in the taskQueue - :return: (Task) \"\"\" try : self . __currentTask = None if self . pool is None and self . _target is not None : self . __currentTask = self . _target self . __currentTask . worker = self self . __currentTask . kill = True self . __currentTask . ignore_queue = True elif self . pool is None and self . __personalQue is None : self . __currentTask = None else : self . __currentTask = self . task_queue . get ( timeout = self . __timeout ) self . __currentTask . worker = self return self . __currentTask except Empty : if self . timeout == 0 : return Task ( Worker . __KILL__ , kill = True , ignore_queue = True ) return False except Exception as e : self . log . error ( f '[ERROR]: Error in getting task: {e}' ) self . log . debug ( f '[DEBUG]: trace for error in getting task: {traceback.format_exc()}' ) return None def run ( self ) -> None : \"\"\" This is an override of the run method within Thread that loops constantly waiting on another task. - :return: (None) \"\"\" try : while not self . killed : task = self . get_next_task () if task is None : self . log . info ( 'task is None an error occurred in get_next_task method closing the thread' ) break elif task is not False : self . log . info ( f 'The task is: {task}' ) task ( * self . _args , ** self . _kwargs ) self . __currentTask = None if not task . ignore_queue : self . task_queue . task_done () if task . kill : self . log . info ( f 'Killing thread once task is complete: {task}' ) self . killed = True except Exception as e : self . log . error ( f '[ERROR]: While Worker thread is running with task: {self.__currentTask} Error: {e}' ) self . log . debug ( f '[DEBUG]: trace for error: {traceback.format_exc()}' ) if self . __currentTask is not None : if not self . __currentTask . isSet () : self . __currentTask . set () if not self . __currentTask . ignore_queue : getattr ( self . task_queue , 'task_done' , dummy_func )() self . __currentTask = None finally : if self . killed is not True : self . killed = True if self . pool is not None : self . pool . remove_worker ( workerTooRemove = self ) @staticmethod def __KILL__ ( * args , ** kwargs ) -> None : pass @property def task_queue ( self ) : if self . pool is None and self . __personalQue is not None : return self . __personalQue return getattr ( getattr ( self , 'pool' , None ), 'taskQueue' , None ) @property def timeout ( self ) -> int : \"\"\" This property will return 0 if it thinks it doesn't need to run any longer and is ready to self terminate \"\"\" if self . killed is True : return 0 elif self . pool is not None and (( self . __workerAutoKill and self . pool . num_workers > 1 ) or self . pool . num_workers > self . pool . maxWorkers ) : self . __timeout //= 2 elif self . __defaultTimeout != self . __timeout : self . __timeout = self . __defaultTimeout return self . __timeout @property def current_priority ( self ) -> int : \"\"\" This changes to the priority of each incoming task. \"\"\" try : if self . __currentTask : return self . __currentTask . priority return 0 except Exception as e : self . log . error ( f 'ERROR: {e}' ) return 0 @property def is_active ( self ) -> bool : \"\"\" This determines if the Worker currently has a Task to work. \"\"\" return self . __currentTask is not None Descendants PyMultiTasking.ThreadingUtils.ThreadWorker Class variables name workerType Instance variables current_priority This changes to the priority of each incoming task. is_active This determines if the Worker currently has a Task to work. task_queue timeout This property will return 0 if it thinks it doesn't need to run any longer and is ready to self terminate Methods get_next_task def get_next_task ( self ) -> 'Union[Task, bool, None]' This gets the next Task in the taskQueue :return: (Task) View Source def get_next_task ( self ) -> Union [ Task, bool, None ] : \"\"\" This gets the next Task in the taskQueue - :return: (Task) \"\"\" try : self . __currentTask = None if self . pool is None and self . _target is not None : self . __currentTask = self . _target self . __currentTask . worker = self self . __currentTask . kill = True self . __currentTask . ignore_queue = True elif self . pool is None and self . __personalQue is None : self . __currentTask = None else : self . __currentTask = self . task_queue . get ( timeout = self . __timeout ) self . __currentTask . worker = self return self . __currentTask except Empty : if self . timeout == 0 : return Task ( Worker . __KILL__ , kill = True , ignore_queue = True ) return False except Exception as e : self . log . error ( f '[ERROR]: Error in getting task: {e}' ) self . log . debug ( f '[DEBUG]: trace for error in getting task: {traceback.format_exc()}' ) return None run def run ( self ) -> 'None' This is an override of the run method within Thread that loops constantly waiting on another task. :return: (None) View Source def run ( self ) -> None : \"\"\" This is an override of the run method within Thread that loops constantly waiting on another task. - :return: (None) \"\"\" try : while not self . killed : task = self . get_next_task () if task is None : self . log . info ( 'task is None an error occurred in get_next_task method closing the thread' ) break elif task is not False : self . log . info ( f 'The task is: {task}' ) task ( * self . _args , ** self . _kwargs ) self . __currentTask = None if not task . ignore_queue : self . task_queue . task_done () if task . kill : self . log . info ( f 'Killing thread once task is complete: {task}' ) self . killed = True except Exception as e : self . log . error ( f '[ERROR]: While Worker thread is running with task: {self.__currentTask} Error: {e}' ) self . log . debug ( f '[DEBUG]: trace for error: {traceback.format_exc()}' ) if self . __currentTask is not None : if not self . __currentTask . isSet () : self . __currentTask . set () if not self . __currentTask . ignore_queue : getattr ( self . task_queue , 'task_done' , dummy_func )() self . __currentTask = None finally : if self . killed is not True : self . killed = True if self . pool is not None : self . pool . remove_worker ( workerTooRemove = self ) safe_stop def safe_stop ( self ) View Source def safe_stop(self): self.killed = True","title":"Utils"},{"location":"reference/PyMultiTasking/utils/#module-pymultitaskingutils","text":"","title":"Module PyMultiTasking.utils"},{"location":"reference/PyMultiTasking/utils/#pymultitaskingtools-utilities","text":"This Python Package makes it easier to handle threads. This uses a schema of Task that is run by a Worker which is managed in a Pool. The Pool uses a PriorityTaskQueue a custom class that inherits from PriorityQueue.","title":"PyMultiTaskingTools Utilities"},{"location":"reference/PyMultiTasking/utils/#summary-of-functions","text":"get_cpu_count() -> int: Return the number of Logic CPU Cores on the system _async_raise(tid, exctype) -> None: Raises the exception, causing the thread to exit wait_lock (lock, timeout) -> Iterator[bool]: Meant to be used within a 'with' statement to throw an exception when timing out on a lock method_wait (func, timeout=60, delay=0.1, incompleteVar=None, raiseExc=False, args, *kwargs): Allows one to safely wait on a method to return.","title":"Summary of Functions"},{"location":"reference/PyMultiTasking/utils/#summary-of-classes","text":"Task (Event) This is a wrapper class that inherits from an Event Object and is used inside the Worker. It is designed to hold the function ran and save the results of the function. PriorityTaskQueue (PriorityQueue) This is a simple override of the PriorityQueue class that ensures the 'item' is a Task class. It is meant to be used with ThreadingPool. ProcessTaskQueue (JoinableQueue) This is a simple override of the JoinableQueue class that ensures the 'item' is a Task class it is meant to be used with ProcessPool. Worker This is designed to be managed by a Pool. It runs until told to stop and works tasks that come from a Queue maintained by the Pool. The Worker is meant to be a super class and only used to be inherited. It is the super class of either ThreadWorker or ProcessWorker. Pool This manages a pool of Workers and a queue of Tasks. The workers consume tasks from the taskQueue until they are told to stop. This is meant to be a super class and only used to be inherited. It is the super class of either ThreadPool or ProcessPool. MultipleEvents Designed to take multiple events and put them together to be waited on as a whole. View Sourceusr/bin/env python3 # -*- coding=utf-8 -*- \"\"\" # PyMultiTaskingTools Utilities This Python Package makes it easier to handle threads. This uses a schema of Task that is run by a Worker which is managed in a Pool. The Pool uses a PriorityTaskQueue a custom class that inherits from PriorityQueue. ## Summary of Functions get_cpu_count() -> int: <br /> Return the number of Logic CPU Cores on the system _async_raise(tid, exctype) -> None: <br /> Raises the exception, causing the thread to exit [wait_lock](#wait_lock)(lock, timeout) -> Iterator[bool]: <br /> Meant to be used within a 'with' statement to throw an exception when timing out on a lock [method_wait](#method_wait)(func, timeout=60, delay=0.1, incompleteVar=None, raiseExc=False, *args, **kwargs): <br /> Allows one to safely wait on a method to return. ## Summary of Classes [Task](#Task)(Event) <br /> This is a wrapper class that inherits from an Event Object and is used inside the Worker. It is designed to hold the function ran and save the results of the function. [PriorityTaskQueue](#PriorityTaskQueue)(PriorityQueue) <br /> This is a simple override of the PriorityQueue class that ensures the 'item' is a Task class. It is meant to be used with ThreadingPool. [ProcessTaskQueue](#ProcessTaskQueue)(JoinableQueue) <br /> This is a simple override of the JoinableQueue class that ensures the 'item' is a Task class it is meant to be used with ProcessPool. [Worker](#Worker) <br /> This is designed to be managed by a Pool. It runs until told to stop and works tasks that come from a Queue maintained by the Pool. The Worker is meant to be a super class and only used to be inherited. It is the super class of either ThreadWorker or ProcessWorker. [Pool](#Pool) <br /> This manages a pool of Workers and a queue of Tasks. The workers consume tasks from the taskQueue until they are told to stop. This is meant to be a super class and only used to be inherited. It is the super class of either ThreadPool or ProcessPool. [MultipleEvents](#MultipleEvents) <br /> Designed to take multiple events and put them together to be waited on as a whole. --- \"\"\" from __future__ import annotations import multiprocessing import time import logging import traceback import inspect import uuid import ctypes from queue import PriorityQueue , Empty , Queue from multiprocessing.queues import JoinableQueue from multiprocessing.synchronize import RLock , SemLock from multiprocessing import RLock as MultiProcRLock from contextlib import contextmanager from threading import Lock , RLock , Event , Semaphore from functools import partial , wraps from typing import Union , Optional , Iterator , Callable , Any , Type , Iterable , Tuple , List # logging.basicConfig(format='%(asctime)s %(levelname)s %(name)s %(funcName)s %(lineno)s %(message)s', # level=logging.DEBUG) _log = logging . getLogger ( 'MultiTaskingTools' ) __STARTING__ = \"__STARTING__\" __STOPPING__ = \"__STOPING__\" __ACTIVE__ = \"__ACTIVE__\" __INACTIVE__ = \"__INACTIVE__\" __STOPPED__ = \"__STOPPED__\" __THREADPOOL_STATES__ = { __STARTING__ : __STARTING__ , __STOPPING__ : __STOPPING__ , __ACTIVE__ : __ACTIVE__ , __INACTIVE__ : __INACTIVE__ , __STOPPED__ : __STOPPED__ } _DEFAULT_MAX_WORKERS = 4 def dummy_func ( * args , ** kwargs ): return kwargs . get ( '_default' , None ) def __async_raise ( tid : int , exctype : Type [ SystemExit ]) -> None : \"\"\"Raises the exception, causing the thread to exit\"\"\" res = ctypes . pythonapi . PyThreadState_SetAsyncExc ( ctypes . c_long ( tid ), ctypes . py_object ( exctype )) if res == 0 : raise ValueError ( \"Invalid thread ID\" ) elif res != 1 : ctypes . pythonapi . PyThreadState_SetAsyncExc ( ctypes . c_long ( tid ), None ) raise SystemError ( \"PyThreadState_SetAsyncExc failed\" ) def get_cpu_count () -> int : \"\"\"Return the number of Logic CPU Cores on the system\"\"\" try : from multiprocessing import cpu_count return cpu_count () except : return _DEFAULT_MAX_WORKERS @contextmanager def wait_lock ( lock : Any , timeout : Union [ int , float ], blocking : bool = True , raise_exc : bool = True ) -> Iterator [ bool ]: \"\"\" <a name=\"method_wait\"></a> Meant to be used within a 'with' statement to throw an exception when timing out on a lock - :param lock: (Lock/RLock/Semephore) the lock that will be acquired or an exception will be thrown - :param timeout: The amount of time to wait on attempting to gain lock. - :return: (generator of bools) This is used with a contextmanager decorator \"\"\" if isinstance ( lock , SemLock ): result = lock . acquire ( timeout = timeout ) else : result = lock . acquire ( blocking = blocking , timeout = timeout ) if result is False and raise_exc : raise RuntimeError ( \"The Lock was unable to be obtained within the timeout: %s \" % timeout ) yield result if result : lock . release () def safe_acquire ( lock : Union [ Lock , RLock ], timeout : Union [ int , float ]) -> bool : \"\"\" <a name=\"safe_acquire\"></a> Meant to be used as a safe way to wait on a lock. Returns False if time runs out. - :param lock: (Lock/RLock) the lock that will be acquired or return False - :param timeout: The amount of time to wait on attempting to gain lock. - :return: bools \"\"\" e = Event () try : current_time = start_time = time . monotonic () while current_time < start_time + timeout : if lock . acquire ( blocking = False ): return True e . wait ( timeout = 0.1 ) current_time = time . monotonic () return lock . acquire ( blocking = False ) except Exception as e : _log . error ( f \"ERROR in safe_acquire with timeout { timeout } : { e } \" ) _log . debug ( f \"[DEBUG] for safe_acquire: { traceback . format_exc () } \" ) return False def safe_release ( lock : Union [ Lock , RLock ]) -> bool : \"\"\"<a name=\"safe_acquire\"></a> Meant to be used as a safe way to release a lock. Returns False if the lock has already been released. - :param lock: (Lock/RLock) the lock that will be acquired or return False - :return: bools \"\"\" try : lock . release () return True except Exception as e : _log . error ( f \"ERROR in safe_release: { e } \" ) _log . debug ( f \"[DEBUG] for safe_release: { traceback . format_exc () } \" ) return False def method_wait ( func : Callable [ ... , Any ], timeout : int = 60 , delay : float = 0.1 , delayPercent : bool = False , delayAscending : Optional [ bool ] = None , incompleteVar : Optional [ bool ] = None , raiseExc : Union [ bool , Exception ] = False , * args , ** kwargs ): \"\"\" <a name=\"method_wait\"></a>Allows one to safely wait on a method to return. - *func*: (callable) Function to be executed using the method wait - *timeout*: (int, default 60) Amount of time to wait until giving up on the function - *delay*: (int or float, default 0.1) Amount of time to pause inbetween asking the function for results - *incompleteVar*: (any) Variable that indicates the function is not yet finished - *raiseExc*: (bool, default False) Causes methodWait to raise an exception instead of returning None - *args*: args that will be passed to the function - *kwargs*: kwargs that will be passed to the function - *return* could be anything \"\"\" e = Event () def ascending_helper ( num , multipler ): if num * multipler > 1 : yield num * multipler yield ascending_helper ( num * multipler , multipler ) else : yield num def delay_ascender ( time_delay ): if len ( time_delay ) > 1 : e . wait ( timeout = time_delay . pop ()) else : e . wait ( timeout = time_delay [ 0 ]) return time_delay def delay_by_time ( time_delay ): e . wait ( timeout = time_delay ) return time_delay def delay_by_percent ( time_delay ): e . wait ( timeout = max ( 0.1 , ( time . monotonic () - start_time ) * time_delay )) return time_delay rawKwargs = {} rawKwargs . update ( kwargs ) kwargs . pop ( 'failureVar' , None ) if delayPercent and delayAscending is None : delayer = delay_by_percent elif delayAscending is True : delay = [ num for num in ascending_helper ( timeout , delay )] delayer = delay_ascender elif delayAscending is False : delay = [ num for num in ascending_helper ( timeout , delay )] delay . sort () delayer = delay_ascender else : delayer = delay_by_time try : current_time = start_time = time . monotonic () while current_time < start_time + timeout : results = func ( * args , ** kwargs ) if 'failureVar' in rawKwargs and rawKwargs [ 'failureVar' ] == results : return results elif results == incompleteVar : delay = delayer ( delay ) current_time = time . monotonic () elif results is not incompleteVar : return results except Exception as e : _log . error ( f 'The function { func } has thrown an exception. { e } ' ) _log . debug ( f '[DEBUG]: trace for error: { traceback . format_exc () } ' ) if raiseExc is True : raise e elif inspect . isclass ( raiseExc ) and issubclass ( raiseExc , BaseException ): raise raiseExc ( f 'The function { func } has thrown an exception. { e } ' ) from e elif isinstance ( raiseExc , Exception ): raise raiseExc from e return e return incompleteVar # noinspection PyPep8Naming def Limiter ( num , blocking = True ): \"\"\" This is a decorator designed to decorate Threaded and Proccessed decorators to limit the number of simultaneous calls. \"\"\" sem = Semaphore ( num ) def wrapper ( func ): @wraps ( func ) def wrapped ( * args , ** kwargs ): if blocking : with sem : return func ( * args , ** kwargs ) else : kwargs . update ({ '_task_semaphore' : sem }) return func ( * args , ** kwargs ) return wrapped return wrapper class PriorityTaskQueue ( PriorityQueue ): \"\"\" <a name=\"PriorityTaskQueue\"></a> This is a simple override of the PriorityQueue class that ensures the 'item' is a Task class meant to be used ONLY in ThreadingPool \"\"\" def put_nowait ( self , item : Task ) -> None : if not isinstance ( item , Task ): raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super () . put_nowait ( item ) def put ( self , item : Task , block : bool = True , timeout : Union [ int , float , None ] = None ) -> None : if not isinstance ( item , Task ): raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super () . put ( item , block = block , timeout = timeout ) class ProcessTaskQueue ( JoinableQueue ): \"\"\" <a name=\"ProcessTaskQueue\"></a> This is a simple override of the JoinableQueue class that ensures the 'item' is a Task class meant to be used ONLY in ProcessingPool \"\"\" def __init__ ( self , maxsize = 0 , * , ctx = None ): super ( ProcessTaskQueue , self ) . __init__ ( maxsize = maxsize , ctx = ctx or multiprocessing . get_context ()) def put_nowait ( self , item : Task ) -> None : if not isinstance ( item , Task ): raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super () . put_nowait ( item ) def put ( self , item : Task , block : bool = True , timeout : Union [ int , float , None ] = None ) -> None : if not isinstance ( item , Task ): raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super () . put ( item , block = block , timeout = timeout ) class __PyMultiDec : wType = None pType = None def __init__ ( self , * args , ** kwargs ): _log . info ( f 'making Class Dec: args= { args } - kwargs= { kwargs } ' ) if len ( args ) == 1 and callable ( args [ 0 ]) and len ( kwargs ) == 0 : self . func = args [ 0 ] else : self . func = None self . callback_func = kwargs . get ( 'callback_func' , None ) self . kwargsLength = len ( kwargs ) self . daemon = kwargs . pop ( 'daemon' , None ) self . pool = kwargs . pop ( 'pool' , None ) self . personal_que = None self . worker = None if self . daemon is not None : if self . daemon is True : self . personal_que = PriorityTaskQueue () kwargs . update ({ '_worker_workerAutoKill' : False , '_worker_personalQue' : self . personal_que }) self . worker = self . wType ( ** { k . replace ( '_worker_' , '' ): v for k , v in kwargs . items () if k . startswith ( '_worker_' )}) else : worker = self . daemon self . personal_que = getattr ( worker , 'task_queue' ) elif self . pool is True or kwargs . get ( 'pool_name' , None ) is not None : self . pool = self . pType . get_pool_by_name ( name = kwargs . get ( 'pool_name' , None )) if not self . pool : kwargs . update ({ '_pool_workerAutoKill' : False , '_pool_name' : kwargs . get ( 'pool_name' , '' )}) self . pool = self . pType ( ** { k . replace ( '_pool_' , '' ): v for k , v in kwargs . items () if k . startswith ( '_pool_' )}) def __call__ ( self , * args , ** kwargs ): _log . debug ( f 'calling test_dec: args= { args } - kwargs= { kwargs } ' ) @wraps ( self . func ) def wrapper ( * a , ** kw ): _log . debug ( f 'Within wrapper: args= { a } - kwargs= { kw } ' ) kw . update ({ k . replace ( '_task_' , '' ): v for k , v in kwargs . items () if k . startswith ( '_task_' )}) keywords = { k . replace ( '_task_' , '' ): v for k , v in kw . items () if k . startswith ( '_task_' )} for key in keywords : kw . pop ( '_task_' + key , None ) kw . update ( keywords ) kw . update ({ 'callback_func' : self . callback_func }) task = Task ( self . func , ** kw ) if self . personal_que : if self . worker . killed : _log . warning ( f 'Decorated Worker { self . worker } was killed no longer daemon for func { self . func } ' ) self . wType ( target = task , ** { k . replace ( '_worker_' , '' ): v for k , v in kwargs . items () if k . startswith ( '_worker_' )}) . start () self . personal_que . put_nowait ( task ) if self . worker . is_alive () is False : self . worker . start () elif self . pool : self . pool . submit ( task , submit_task_nowait = True , submit_task_autospawn = True , allow_restart = True ) else : self . wType ( target = task , ** { k . replace ( '_worker_' , '' ): v for k , v in kwargs . items () if k . startswith ( '_worker_' )}) . start () return task if self . func is None and callable ( args [ 0 ]): self . func = args [ 0 ] return wrapper return wrapper ( * args , ** kwargs ) class Task ( Event ): \"\"\" <a name=\"Task\"></a> This is a wrapper class that inherits from an Event Object and is used inside the Worker. It is designed to hold the function ran and save the results of the function. \"\"\" defaultriority : int = 1 def __init__ ( self , fn : Callable , priority : int = 1 , kill : bool = False , inject_task : bool = True , store_return : bool = True , ignore_queue : bool = False , callback_func : Optional [ Callable ] = None , semaphore : Optional [ Semaphore ] = None , * args , ** kwargs ): super () . __init__ () self . args = args self . kwargs = kwargs self . priority = priority self . kill = kill self . ignore_queue = ignore_queue self . callback_fun = callback_func self . semaphore = semaphore if semaphore is not None else Semaphore ( 1 ) if isinstance ( fn , partial ): if inject_task and Task . __inspect_kwargs ( fn . func ): fn . keywords . update ({ 'TaskObject' : self }) self . task = fn else : if inject_task and Task . __inspect_kwargs ( fn ): self . kwargs . update ({ 'TaskObject' : self }) self . task = partial ( fn , * self . args , ** self . kwargs ) self . store_return = store_return self . uuid = str ( uuid . uuid4 ()) self . __updateRLock = MultiProcRLock () self . __worker = None self . __results = None def run ( self , * args , ** kwargs ) -> Any : \"\"\" This is used to run the stored partial function and store the results. - :param args: Positional arguments to be passed to the task. - :param kwargs: Keyword arguments to be passed to the task - :return: (Anything) \"\"\" if self . is_set (): raise Exception ( 'A Task Object cannot be ran more than once!' ) try : self . semaphore . acquire () if self . store_return : self . results = self . task ( * args , ** kwargs ) if self . callback_fun : return self . callback_fun ( self . results ) else : if self . callback_fun : return self . callback_fun ( self . task ( * args , ** kwargs )) else : return self . task ( * args , ** kwargs ) except Exception as e : _log . info ( f ' { self } failed' ) raise e else : _log . info ( f ' { self } succeeded' ) finally : self . set () self . semaphore . release () if self . store_return : return self . results def clear ( self ) -> None : if self . is_set (): raise Exception ( 'A Task Object cannot be cleared once set!' ) return super ( Task , self ) . clear () @staticmethod def __inspect_kwargs ( func , keyword = 'TaskObject' ): try : return [ key for key in inspect . signature ( func ) . parameters . keys () if keyword == key or 'kwargs' == key ] except : return [] def __hash__ ( self ): return hash ( self . uuid ) def __call__ ( self , * args , ** kwargs ): return self . run ( * args , ** kwargs ) def __str__ ( self ): return f 'Task(UUID= { self . uuid } ,Priority= { self . priority } ): { self . task . func } ' def __gt__ ( self , other : Task ): return self . priority > other . priority def __lt__ ( self , other : Task ): return self . priority < other . priority def __ge__ ( self , other : Task ): return self . priority >= other . priority def __le__ ( self , other : Task ): return self . priority <= other . priority @property def worker ( self ): with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = False ) as acquired : if acquired : return self . __worker @worker . setter def worker ( self , value ): with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ): self . __worker = value @worker . deleter def worker ( self ): with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ): del self . __worker @property def results ( self ): with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = False ) as acquired : if acquired : return self . __results @results . setter def results ( self , value ): with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ): self . __results = value @results . deleter def results ( self ): with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ): del self . __results class Worker : \"\"\" <a name=\"Worker\"></a> This is designed to be managed by a ThreadPool. However, it can run on its own as well. It runs until told to stop and works tasks that come from a the PriorityTaskQueue maintained by the Pool. \"\"\" __workerAutoKill = True __defaultTimeout = 10 workerType = None name = None def __init__ ( self , pool : Optional [ Pool ] = None , workerAutoKill : bool = True , defaultTimeout : int = 10 , personalQue : Optional [ ProcessTaskQueue ] = None , target : Optional [ Callable ] = None , name : Optional [ str ] = None , daemon : bool = True , log : Optional [ logging ] = None , ** kwargs ): self . uuid = str ( uuid . uuid4 ()) self . log = _log if log is None else log self . __defaultTimeout = defaultTimeout self . __timeout = defaultTimeout self . __personalQue = personalQue self . __currentTask = None if target is not None and not isinstance ( target , Task ): target = Task ( target , kill = True , ignore_queue = True ) super ( Worker , self ) . __init__ ( target = target , name = self . uuid if name is None else name , daemon = daemon , args = kwargs . get ( 'args' , ()), kwargs = kwargs . get ( 'kwargs' , {})) self . pool = pool self . killed = False self . __workerAutoKill = workerAutoKill if self . __personalQue is None else False if pool : self . log . info ( f '[INFO]: Starting new { self } ' ) self . start () def __str__ ( self ): return f 'Worker: { self . name if self . name == self . uuid else f \" { self . name } - { self . uuid } \" } for Pool: { self . pool } ' def __hash__ ( self ): return hash ( self . uuid ) def safe_stop ( self ): self . killed = True # noinspection PyUnresolvedReferences def get_next_task ( self ) -> Union [ Task , bool , None ]: \"\"\" This gets the next Task in the taskQueue - :return: (Task) \"\"\" try : self . __currentTask = None if self . pool is None and self . _target is not None : self . __currentTask = self . _target self . __currentTask . worker = self self . __currentTask . kill = True self . __currentTask . ignore_queue = True elif self . pool is None and self . __personalQue is None : self . __currentTask = None else : self . __currentTask = self . task_queue . get ( timeout = self . __timeout ) self . __currentTask . worker = self return self . __currentTask except Empty : if self . timeout == 0 : return Task ( Worker . __KILL__ , kill = True , ignore_queue = True ) return False except Exception as e : self . log . error ( f '[ERROR]: Error in getting task: { e } ' ) self . log . debug ( f '[DEBUG]: trace for error in getting task: { traceback . format_exc () } ' ) return None def run ( self ) -> None : \"\"\" This is an override of the run method within Thread that loops constantly waiting on another task. - :return: (None) \"\"\" try : while not self . killed : task = self . get_next_task () if task is None : self . log . info ( 'task is None an error occurred in get_next_task method closing the thread' ) break elif task is not False : self . log . info ( f 'The task is: { task } ' ) task ( * self . _args , ** self . _kwargs ) self . __currentTask = None if not task . ignore_queue : self . task_queue . task_done () if task . kill : self . log . info ( f 'Killing thread once task is complete: { task } ' ) self . killed = True except Exception as e : self . log . error ( f '[ERROR]: While Worker thread is running with task: { self . __currentTask } Error: { e } ' ) self . log . debug ( f '[DEBUG]: trace for error: { traceback . format_exc () } ' ) if self . __currentTask is not None : if not self . __currentTask . isSet (): self . __currentTask . set () if not self . __currentTask . ignore_queue : getattr ( self . task_queue , 'task_done' , dummy_func )() self . __currentTask = None finally : if self . killed is not True : self . killed = True if self . pool is not None : self . pool . remove_worker ( workerTooRemove = self ) @staticmethod def __KILL__ ( * args , ** kwargs ) -> None : pass @property def task_queue ( self ): if self . pool is None and self . __personalQue is not None : return self . __personalQue return getattr ( getattr ( self , 'pool' , None ), 'taskQueue' , None ) @property def timeout ( self ) -> int : \"\"\" This property will return 0 if it thinks it doesn't need to run any longer and is ready to self terminate \"\"\" if self . killed is True : return 0 elif self . pool is not None and (( self . __workerAutoKill and self . pool . num_workers > 1 ) or self . pool . num_workers > self . pool . maxWorkers ): self . __timeout //= 2 elif self . __defaultTimeout != self . __timeout : self . __timeout = self . __defaultTimeout return self . __timeout @property def current_priority ( self ) -> int : \"\"\" This changes to the priority of each incoming task. \"\"\" try : if self . __currentTask : return self . __currentTask . priority return 0 except Exception as e : self . log . error ( f 'ERROR: { e } ' ) return 0 @property def is_active ( self ) -> bool : \"\"\" This determines if the Worker currently has a Task to work. \"\"\" return self . __currentTask is not None # noinspection PyPep8Naming class Pool : \"\"\" <a name=\"ThreadPool\"></a> This manages a pool of Workers and a queue of Tasks. The workers consume tasks from the taskQueue until they are told to stop. \"\"\" _state = __INACTIVE__ __regRLock = None __pool_registry = None def __init__ ( self , workerType : type , maxWorkers : Optional [ int ] = None , tasks : Optional [ Queue ] = None , daemon : bool = True , timeout : int = 60 , workerAutoKill : bool = True , prepopulate : int = 0 , name : str = \"\" , log : Optional [ logging ] = None ): self . workerType = workerType self . log = _log if log is None else log self . uuid = str ( uuid . uuid4 ()) self . name = name if name else self . uuid self . maxWorkers = maxWorkers or get_cpu_count () self . __timeout = timeout self . __workerAutoKill = workerAutoKill self . __workerListLock = RLock () if getattr ( workerType , 'workerType' , 'THREAD' ) == 'THREAD' else MultiProcRLock () self . __workerList = None self . __stateLock = RLock () if getattr ( workerType , 'workerType' , 'THREAD' ) == 'THREAD' else MultiProcRLock () self . __taskLock = RLock () if getattr ( workerType , 'workerType' , 'THREAD' ) == 'THREAD' else MultiProcRLock () self . taskQueue = tasks or PriorityTaskQueue () self . workers = [] self . state = __STARTING__ self . daemon = daemon self . ignoredTasks = [] if prepopulate : self . setup_workers ( numOfWorkers = prepopulate , workerAutoKill = self . __workerAutoKill ) elif self . taskQueue . qsize () > 0 : self . setup_workers ( numOfWorkers = self . taskQueue . qsize () if self . taskQueue . qsize () <= self . maxWorkers else self . maxWorkers , workerAutoKill = not daemon ) if daemon is False : self . state = __ACTIVE__ self . join ( self . __timeout ) self . shutdown ( timeout = self . __timeout ) def __enter__ ( self ): self . __taskLock . acquire () return self def __exit__ ( self , exc_type , exc_val , exc_tb ): try : if self . daemon is False : self . join ( self . __timeout ) self . shutdown ( timeout = self . __timeout ) else : self . wait_completion ( timeout = self . __timeout ) self . __taskLock . release () except Exception as e : self . log . error ( f \"ERROR in __exit__ of Pool: { e } \" ) self . log . debug ( f \"[DEBUG] for __exit__ of Pool: { traceback . format_exc () } \" ) def __str__ ( self ): return f 'Pool(UUID= { self . uuid } , State= { self . _state } )' def setup_workers ( self , numOfWorkers : int = 1 , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False ) -> bool : \"\"\" Generally only used by init. This setups Worker threads to be managed by the Pool. - :param numOfWorkers: (int) Number workers setup. IF the number of workers is higher then the value of 'maxWorkers' then 'maxWorkers' is updated. The numOfWorkers is how many Workers the Pool has *not* now many new Workers get added. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in the 'taskQueue'. - :return: (bool) \"\"\" if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if numOfWorkers > self . maxWorkers : self . set_max_workers ( numOfWorkers ) numOfNewWorkers = ( numOfWorkers - self . num_workers ) elif numOfWorkers > ( self . maxWorkers - self . num_workers ): numOfNewWorkers = ( self . maxWorkers - self . num_workers ) else : numOfNewWorkers = numOfWorkers for _ in range ( 0 , numOfNewWorkers ): self . add_worker ( workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill , allow_restart = allow_restart ) return numOfNewWorkers > 0 def add_worker ( self , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False , ** kwargs ) -> bool : \"\"\" Adds a single new worker too the Pool. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in - :return: (bool) \"\"\" self . log . debug ( \"Attempting to add new worker!\" ) if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if self . num_workers >= self . maxWorkers : return False self . workers . append ( self . workerType ( self , workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill )) return True def remove_worker ( self , workerTooRemove : Optional [ Worker ] = None , timeout : int = 30 , allow_abandon : bool = False ) -> bool : \"\"\" Removes a single new worker from the Pool. This can be called to remove the last Worker or you can specify a Worker to remove. - :param workerTooRemove: (Worker) This is usually sent when a Worker is self terminating - :param timeout: (int) 30, How much time it is willing to wait. NOTE: This is doubled when specifying a worker with the workerTooRemove parameter. - :param allow_abandon: (bool) False, This determines if the thread will simply be abandoned if it cannot normally remove it from the pool. It will only do this if 'safe_stop' and 'terminate' methods fail. - :return: (bool) \"\"\" def wait_helper ( wait_time , start_time , ev , wtr ): current_time = time . monotonic () while current_time < start_time + wait_time and wtr in self . workers : ev . wait ( timeout = 0.1 ) return wtr not in self . workers try : if self . num_workers <= 0 : return False if workerTooRemove in self . workers and workerTooRemove . killed : self . workers . pop ( self . workers . index ( workerTooRemove )) return True e = Event () if workerTooRemove is not None : workerTooRemove . safe_stop () if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ): return True self . log . warning ( f '[WARN]: worker( { workerTooRemove } ) needs to be terminated in order to be removed.' ) getattr ( workerTooRemove , 'terminate' , dummy_func )() if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ): return True if allow_abandon : self . log . warning ( f '[WARN]: worker( { workerTooRemove } ) is being abandoned.' ) worker = self . workers . pop ( self . workers . index ( workerTooRemove )) if worker . killed is not True : worker . killed = True return True return False else : current_num = self . num_workers self . submit ( Task ( Worker . __KILL__ , priority = self . highest_priority + 1 , kill = True ), submit_task_autospawn = False ) if timeout > 0 : current = start = time . monotonic () while current < start + timeout and self . num_workers >= current_num : e . wait ( timeout = 0.1 ) return self . num_workers < current_num return True except Exception as e : self . log . error ( f '[ERROR]: Error occurred while attempting to remove worker: { e } ' ) self . log . debug ( f '[DEBUG]: Trace for error while attempting to remove worker: { traceback . format_exc () } ' ) return False finally : if self . num_workers == 0 : self . state = __INACTIVE__ def set_max_workers ( self , maxWorkers : int ) -> int : \"\"\" Set the maximum number of threads that will remain active. Return the maximum thread limit. - :param maxWorkers: (int) Max thread limit - :return: (int) \"\"\" if type ( maxWorkers ) is int and maxWorkers > - 1 : self . maxWorkers = maxWorkers return self . maxWorkers def wait_completion ( self , timeout : Union [ int , float ], delay : Union [ int , float ] = 0.1 , block : bool = False ) -> bool : \"\"\" This method waits until all Tasks in the PriorityTaskQueue is done. If the parameter block is True it will stop any new Task from being submitted while waiting. - :param timeout: (int/float) How long to wait for all tasks in the 'taskQueue' to be finished. - :param delay: (int/float) The amount of time to wait before checking again in seconds. Default 0.1. - :param block: (bool) This will stop new tasks from being submitted to the Queue until finished. - :return: (bool) \"\"\" e = Event () def _wait_completion ( waitTime : Union [ int , float ]) -> bool : current_time = start_time = time . monotonic () while current_time < start_time + waitTime and self . has_workers : if self . unfinished_tasks == 0 : return True e . wait ( timeout = delay ) current_time = time . monotonic () return False if block : start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): return _wait_completion ( max ( 0.1 , ( start + timeout ) - time . monotonic ())) return _wait_completion ( timeout ) def shutdown ( self , timeout : Optional [ int ] = None , unsafe : Optional [ bool ] = None ) -> bool : \"\"\" This sends a kill operation too all the workers and waits for them to complete and then removes the threads. It can also attempt to kill Workers in an unsafe way with the 'terminate' Worker method. - :param timeout: (int) The length of time to wait on tasks to be stopped - :param unsafe: (bool/None) True: The 'terminate' method will be called on each Worker. False: Even if the timeout is reached the 'terminate' method will *not* be called. None: This will attempt to safely wait for the Workers too finish but if timeout is reached then the 'terminate' method will be called. - :return: (bool) \"\"\" e = Event () self . state = __STOPPING__ if timeout is None : timeout = self . __timeout def _clear_helper ( task ): return task . task . func != Worker . __KILL__ def _clear_shutdown_tasks (): try : tasks = [] while not self . taskQueue . empty (): tasks . append ( self . taskQueue . get ()) self . taskQueue . task_done () for task in filter ( _clear_helper , tasks ): if self . has_workers : self . taskQueue . put_nowait ( task ) else : self . ignoredTasks . append ( task ) except Exception as e : self . log . error ( f '[ERROR]: Error while clearing old tasks: { e } ' ) self . log . debug ( f '[DEBUG]: Trace for error clearing old tasks: { traceback . format_exc () } ' ) def _unsafe_shutdown (): for worker in self . workers : self . log . info ( f 'Worker: { worker } will be killed unsafely.' ) worker . terminate () if unsafe : _unsafe_shutdown () e . wait ( timeout = 0.1 ) return self . num_workers == 0 start_time = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): for x in range ( 0 , self . num_workers ): self . remove_worker ( timeout = 0 ) current_time = time . monotonic () while current_time < start_time + timeout : if self . num_workers <= 0 : self . log . info ( 'There are no more workers. No need for forced timeout' ) break e . wait ( timeout = 0.1 ) current_time = time . monotonic () if unsafe is None : _unsafe_shutdown () e . wait ( timeout = 0.1 ) _clear_shutdown_tasks () if self . num_workers == 0 : self . state = __STOPPED__ return True return False def join ( self , timeout : int ) -> bool : \"\"\" This first calls 'waitCompletion' with 'block=True' and then calls 'shutdown'. The goal is to try to wait for all Tasks to complete and then close out the Pool. - :param timeout: (int)The length of time to wait on both join and shutdown. - :return: (bool) \"\"\" with wait_lock ( self . __taskLock , timeout = timeout ): start_time = time . monotonic () self . wait_completion ( timeout , block = True ) return self . shutdown ( timeout = int ( max ( timeout - ( time . monotonic () - start_time ), 1 ))) def map ( self , fn : Callable , params : Tuple , chunksize : int = 0 , * args , ** kwargs ) -> None : \"\"\" A simple mapping tool that takes different params (a List of tuples formatted like [(*args, **kwargs)]) and pass them too a function. chunksize determines how too break up the list and distribute it across Workers. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param params: (Tuple) The Tuple should be formatted like so ( ((arg1, ), {'kwarg1': 'value'}), ...). Each item within the Tuple is a Tuple itself with two items. The first item is positional arguments (args) and the second item is keyword arguments (kwargs). Even if they are empty they need to exist. - :param chunksize: (int) If left at 0 the method will attempt to spread the tasks as evenly as possible. Otherwise it will take the number to mean how many Tasks will be given to a single Worker. - :param kwargs: These are keyword arguments that get passed to the 'submit' method. - :return: (None) \"\"\" if 'submit_task_autospawn' not in kwargs : kwargs [ 'submit_task_autospawn' ] = True if chunksize == 0 : if len ( params ) <= self . maxWorkers : chunksize = 1 else : chunksize = round ( len ( params ) / self . maxWorkers ) def chunkHelper ( func , chunkList ): return [ func ( * parms [ 0 ], ** parms [ 1 ]) for parms in chunkList ] def listIntoChunks ( lst ): return [ lst [ i * chunksize :( i + 1 ) * chunksize ] for i in range (( len ( lst ) + chunksize - 1 ) // chunksize )] for item in listIntoChunks ( params ): self . submit ( partial ( chunkHelper , func = fn , chunkList = item ), ** kwargs ) def submit ( self , fn : Callable , * args , ** kwargs ) -> Union [ Task , bool ]: \"\"\" This is the function used to submit a Task to the Pool. Simply provide a function as 'fn' and then arguments that need to be passed too that function and it will create a Task and add it to the PriorityTaskQueue to be worked. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param args: These args will be passed to the Task object. - :param kwargs: The following keywords will be pulled out. 'submit_task_nowait', 'submit_task_timeout', 'submit_task_autospawn', 'submit_task_priority'. All others will be passed to Task. + 'submit_task_nowait': (bool) tells 'submit' to use the 'put_nowait' method on PriorityTaskQueue. + 'submit_task_timeout': (int/float) how long should one wait too submit. + 'submit_task_autospawn': (bool/None) determines if new Worker should be spawned because of more tasks. + 'submit_task_priority': (int) changes the priority of the task. - :return: (Task/bool) \"\"\" if fn is None : return False def autospawn_parser ( tmpAutospawn , state ): if state == __STOPPING__ or state == __STOPPED__ : return False if self . needs_workers and tmpAutospawn is None : return True return tmpAutospawn nowait = kwargs . pop ( 'submit_task_nowait' , True ) timeout = kwargs . pop ( 'submit_task_timeout' , 10 ) autospawn = autospawn_parser ( kwargs . pop ( 'submit_task_autospawn' , None ), self . state ) priority = kwargs . pop ( 'submit_task_priority' , 10 ) or 10 start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): if isinstance ( fn , Task ): task = fn else : task = Task ( fn , priority , * args , ** kwargs ) try : if nowait : self . taskQueue . put_nowait ( task ) else : self . taskQueue . put ( task , timeout = max ( 0.1 , ( start + timeout ) - time . monotonic ())) if autospawn or autospawn is None and self . needs_workers : self . add_worker ( ** kwargs ) return task except Exception as e : self . log . error ( f 'Error in submitting task: { e } \\n { traceback . format_exc () } ' ) return False finally : if self . state is not __ACTIVE__ and self . num_workers > 0 : self . state = __ACTIVE__ @staticmethod def as_completed ( tasks : List [ Task ]): def _finished_tasks ( task_item ): return task_item if task_item . is_set () else None lengthOfTasks = len ( tasks ) finished_tasks = set () while len ( finished_tasks ) < lengthOfTasks : for task in filter ( _finished_tasks , tasks ): if task not in finished_tasks : finished_tasks . add ( task ) yield task time . sleep ( 0.01 ) @property def unfinished_tasks ( self ) -> int : \"\"\"+ This calls the 'unfinishedTasks' property of PriorityTaskQueue. And is equal to the number of tasks submitted minus the number of times a Task has been Worked by a Worker. \"\"\" return self . taskQueue . unfinished_tasks @property def num_queued_tasks ( self ) -> int : \"\"\" This is a wrapper for the 'qsize()' method from PriorityTaskQueue.\"\"\" return self . taskQueue . qsize () @property def num_active_tasks ( self ) -> int : return self . unfinished_tasks - self . num_queued_tasks @property def has_tasks ( self ) -> bool : return self . unfinished_tasks > 0 @property def is_idle ( self ) -> bool : return not ( self . has_tasks and self . has_workers ) @property def is_active ( self ) -> bool : \"\"\"+ This determines is the Pool both has workers and has work to do. This doesn't have anything to do with a Pool's state. \"\"\" return self . has_tasks and self . has_workers @property def has_workers ( self ) -> bool : return self . num_workers > 0 @property def needs_workers ( self ) -> bool : if self . num_workers < self . maxWorkers : if self . num_queued_tasks > self . inactive_workers : return True return False @property def num_workers ( self ) -> int : try : return len ( self . workers ) except Exception : return 0 @property def active_workers ( self ) -> int : return len ([ i for i in self . workers if i . is_active ]) @property def inactive_workers ( self ) -> int : return len ([ i for i in self . workers if not i . is_active ]) @property def highest_priority ( self ) -> int : return max ([ i . current_priority for i in self . workers ]) @property def workers ( self ) -> List : \"\"\"+ This is a protected (wrapped in a lock) List of Workers managed by this pool. \"\"\" try : with wait_lock ( self . __workerListLock , self . __timeout ): return self . __workerList except RuntimeError : pass @workers . setter def workers ( self , value ) -> None : try : with wait_lock ( self . __workerListLock , self . __timeout ): self . __workerList = value except RuntimeError : pass @workers . deleter def workers ( self ) -> None : try : with wait_lock ( self . __workerListLock , self . __timeout ): self . __workerList = [] except RuntimeError : pass @property def state ( self ) -> str : \"\"\"+ This is a string that has only 4 valid string values that determines the state of the Pool.\"\"\" try : with wait_lock ( self . __stateLock , self . __timeout ): return self . _state except RuntimeError : pass @state . setter def state ( self , value ) -> None : try : with wait_lock ( self . __stateLock , self . __timeout ): if value in __THREADPOOL_STATES__ : self . _state = __THREADPOOL_STATES__ [ value ] else : raise TypeError ( 'Invalid ThreadPool STATE: %s ' % str ( value )) except RuntimeError : pass @state . deleter def state ( self ) -> None : try : with wait_lock ( self . __stateLock , self . __timeout ): self . _state = __INACTIVE__ except RuntimeError : pass # noinspection PyUnresolvedReferences class MultiEvent ( Event ): \"\"\" <a name=\"MultiEvent\"></a> Designed to only get set if more the set function is called multiple times. \"\"\" _counter : int = None _counterMax : int = None _ActionLock : Lock = None def __init__ ( self , counter : int = 1 ): \"\"\" Constructor for the MultiEvent. This requires one parameter named 'counter'. - :param counter: (int, default 1) This is how many times 'set' method has to be called for the event to be set. \"\"\" self . _counter = counter self . _counterMax = counter self . _ActionLock = Lock () super ( MultiEvent , self ) . __init__ () def set ( self ) -> None : \"\"\" A wrapper method for 'set' in threading's modules 'Event' class. This simply counts down and will attempt to set the Event once the '_counter' is at zero. - :return: None \"\"\" with self . _ActionLock : self . _counter -= 1 if self . _counter <= 0 : super ( MultiEvent , self ) . set () def clear ( self ) -> None : \"\"\" A wrapper method for 'clear' in threading's modules 'Event' class. This resets the '_counter' variable before calling 'clear' method of 'Event'. :return: None \"\"\" with self . _ActionLock : self . _counter = self . _counterMax super ( MultiEvent , self ) . clear () def remaining_sets ( self ) -> int : \"\"\" Is a wrapper around the private variable '_counter'. - :return: (int) \"\"\" with self . _ActionLock : return self . _counter @property def num_required_sets ( self ) -> int : return self . _counterMax class MultipleEvents ( object ): \"\"\" <a name=\"MultipleEvents\"></a> Designed to take multiple events and put them together to be waited on as a whole. \"\"\" _events = None def __init__ ( self , events : Iterable [ Event ]): \"\"\" Make a new MultipleEvents object using a iterable array of events. - :param events: (a list/tuple/iterable of events) \"\"\" self . _events = events super ( MultipleEvents , self ) . __init__ () def wait ( self , timeout : int = 60 , delay : Union [ int , float ] = 0.1 ) -> bool : \"\"\" Wait on all events by using the 'is_set' method on each event in the event list. - :param timeout: (int) default is 60. This will not throw an exception it will simply return False. - :param delay: How long to wait between checking if all events have been set. - :return: (bool) \"\"\" if type ( self . _events ) is not list : return False e = Event () endTime = time . monotonic () + timeout while time . monotonic () <= endTime : if self . isSet (): return True e . wait ( timeout = delay ) return False def isSet ( self ) -> bool : \"\"\" Uses the 'is_set' method on each event in the list and returns True if all is set and False otherwise. - :return: (bool) \"\"\" if not filter ( MultipleEvents . wait_filter , self . _events ): return True return False def clear ( self ) -> None : \"\"\" Reset the internal flag to false on all events. - :return: (None) \"\"\" for event in self . _events : event . clear () def remove_events ( self ) -> None : \"\"\" This deletes all events making this object useless until new events are added. - :return: (None) \"\"\" del self . _events self . _events = [] def add_event ( self , event : Event ) -> None : \"\"\" This adds a new event to the private variable '_event'. It assumes '_event' is a List object. - :param event: (Event) - :return: (None) \"\"\" if self . _events is None : self . _events = [] self . _events . append ( event ) @staticmethod def set () -> None : \"\"\" This is ignored. This object is not meant to set Events simply wait on events. - :return: (None) \"\"\" _log . warning ( \"This set is ignored!\" ) @staticmethod def wait_filter ( event : Event ) -> bool : \"\"\" Simply calls and returns 'is_set' method of a given Event object. - :param event: (Event) - :return: (bool) \"\"\" return not event . is_set ()","title":"Summary of Classes"},{"location":"reference/PyMultiTasking/utils/#functions","text":"","title":"Functions"},{"location":"reference/PyMultiTasking/utils/#limiter","text":"def Limiter ( num , blocking = True ) This is a decorator designed to decorate Threaded and Proccessed decorators to limit the number of simultaneous calls. View Source def Limiter ( num , blocking = True ) : \"\"\" This is a decorator designed to decorate Threaded and Proccessed decorators to limit the number of simultaneous calls. \"\"\" sem = Semaphore ( num ) def wrapper ( func ) : @wraps ( func ) def wrapped ( * args , ** kwargs ) : if blocking : with sem : return func ( * args , ** kwargs ) else : kwargs . update ( { '_task_semaphore' : sem } ) return func ( * args , ** kwargs ) return wrapped return wrapper","title":"Limiter"},{"location":"reference/PyMultiTasking/utils/#dummy_func","text":"def dummy_func ( * args , ** kwargs ) View Source def dummy_func(*args, **kwargs): return kwargs.get('_default', None)","title":"dummy_func"},{"location":"reference/PyMultiTasking/utils/#get_cpu_count","text":"def get_cpu_count ( ) -> 'int' Return the number of Logic CPU Cores on the system View Source def get_cpu_count () -> int : \"\"\"Return the number of Logic CPU Cores on the system\"\"\" try : from multiprocessing import cpu_count return cpu_count () except : return _DEFAULT_MAX_WORKERS","title":"get_cpu_count"},{"location":"reference/PyMultiTasking/utils/#method_wait","text":"def method_wait ( func : 'Callable[..., Any]' , timeout : 'int' = 60 , delay : 'float' = 0.1 , delayPercent : 'bool' = False , delayAscending : 'Optional[bool]' = None , incompleteVar : 'Optional[bool]' = None , raiseExc : 'Union[bool, Exception]' = False , * args , ** kwargs ) Allows one to safely wait on a method to return. func : (callable) Function to be executed using the method wait timeout : (int, default 60) Amount of time to wait until giving up on the function delay : (int or float, default 0.1) Amount of time to pause inbetween asking the function for results incompleteVar : (any) Variable that indicates the function is not yet finished raiseExc : (bool, default False) Causes methodWait to raise an exception instead of returning None args : args that will be passed to the function kwargs : kwargs that will be passed to the function return could be anything View Source def method_wait ( func : Callable [ ..., Any ] , timeout : int = 60 , delay : float = 0.1 , delayPercent : bool = False , delayAscending : Optional [ bool ] = None , incompleteVar : Optional [ bool ] = None , raiseExc : Union [ bool, Exception ] = False , * args , ** kwargs ) : \"\"\" <a name=\" method_wait \"></a>Allows one to safely wait on a method to return. - *func*: (callable) Function to be executed using the method wait - *timeout*: (int, default 60) Amount of time to wait until giving up on the function - *delay*: (int or float, default 0.1) Amount of time to pause inbetween asking the function for results - *incompleteVar*: (any) Variable that indicates the function is not yet finished - *raiseExc*: (bool, default False) Causes methodWait to raise an exception instead of returning None - *args*: args that will be passed to the function - *kwargs*: kwargs that will be passed to the function - *return* could be anything \"\"\" e = Event () def ascending_helper ( num , multipler ) : if num * multipler > 1 : yield num * multipler yield ascending_helper ( num * multipler , multipler ) else : yield num def delay_ascender ( time_delay ) : if len ( time_delay ) > 1 : e . wait ( timeout = time_delay . pop ()) else : e . wait ( timeout = time_delay [ 0 ] ) return time_delay def delay_by_time ( time_delay ) : e . wait ( timeout = time_delay ) return time_delay def delay_by_percent ( time_delay ) : e . wait ( timeout = max ( 0.1 , ( time . monotonic () - start_time ) * time_delay )) return time_delay rawKwargs = {} rawKwargs . update ( kwargs ) kwargs . pop ( 'failureVar' , None ) if delayPercent and delayAscending is None : delayer = delay_by_percent elif delayAscending is True : delay = [ num for num in ascending_helper(timeout, delay) ] delayer = delay_ascender elif delayAscending is False : delay = [ num for num in ascending_helper(timeout, delay) ] delay . sort () delayer = delay_ascender else : delayer = delay_by_time try : current_time = start_time = time . monotonic () while current_time < start_time + timeout : results = func ( * args , ** kwargs ) if 'failureVar' in rawKwargs and rawKwargs [ 'failureVar' ] == results : return results elif results == incompleteVar : delay = delayer ( delay ) current_time = time . monotonic () elif results is not incompleteVar : return results except Exception as e : _log . error ( f 'The function {func} has thrown an exception. {e}' ) _log . debug ( f '[DEBUG]: trace for error: {traceback.format_exc()}' ) if raiseExc is True : raise e elif inspect . isclass ( raiseExc ) and issubclass ( raiseExc , BaseException ) : raise raiseExc ( f 'The function {func} has thrown an exception. {e}' ) from e elif isinstance ( raiseExc , Exception ) : raise raiseExc from e return e return incompleteVar","title":"method_wait"},{"location":"reference/PyMultiTasking/utils/#safe_acquire","text":"def safe_acquire ( lock : 'Union[Lock, RLock]' , timeout : 'Union[int, float]' ) -> 'bool' Meant to be used as a safe way to wait on a lock. Returns False if time runs out. :param lock: (Lock/RLock) the lock that will be acquired or return False :param timeout: The amount of time to wait on attempting to gain lock. :return: bools View Source def safe_acquire ( lock : Union [ Lock, RLock ] , timeout : Union [ int, float ] ) -> bool : \"\"\" <a name=\" safe_acquire \"></a> Meant to be used as a safe way to wait on a lock. Returns False if time runs out. - :param lock: (Lock/RLock) the lock that will be acquired or return False - :param timeout: The amount of time to wait on attempting to gain lock. - :return: bools \"\"\" e = Event () try : current_time = start_time = time . monotonic () while current_time < start_time + timeout : if lock . acquire ( blocking = False ) : return True e . wait ( timeout = 0.1 ) current_time = time . monotonic () return lock . acquire ( blocking = False ) except Exception as e : _log . error ( f \"ERROR in safe_acquire with timeout {timeout} : {e}\" ) _log . debug ( f \"[DEBUG] for safe_acquire: {traceback.format_exc()}\" ) return False","title":"safe_acquire"},{"location":"reference/PyMultiTasking/utils/#safe_release","text":"def safe_release ( lock : 'Union[Lock, RLock]' ) -> 'bool' Meant to be used as a safe way to release a lock. Returns False if the lock has already been released. :param lock: (Lock/RLock) the lock that will be acquired or return False :return: bools View Source def safe_release ( lock : Union [ Lock, RLock ] ) -> bool : \"\"\"<a name=\" safe_acquire \"></a> Meant to be used as a safe way to release a lock. Returns False if the lock has already been released. - :param lock: (Lock/RLock) the lock that will be acquired or return False - :return: bools \"\"\" try : lock . release () return True except Exception as e : _log . error ( f \"ERROR in safe_release: {e}\" ) _log . debug ( f \"[DEBUG] for safe_release: {traceback.format_exc()}\" ) return False","title":"safe_release"},{"location":"reference/PyMultiTasking/utils/#wait_lock","text":"def wait_lock ( lock : 'Any' , timeout : 'Union[int, float]' , blocking : 'bool' = True , raise_exc : 'bool' = True ) -> 'Iterator[bool]' Meant to be used within a 'with' statement to throw an exception when timing out on a lock :param lock: (Lock/RLock/Semephore) the lock that will be acquired or an exception will be thrown :param timeout: The amount of time to wait on attempting to gain lock. :return: (generator of bools) This is used with a contextmanager decorator View Source @contextmanager def wait_lock ( lock : Any , timeout : Union [ int, float ] , blocking : bool = True , raise_exc : bool = True ) -> Iterator [ bool ] : \"\"\" <a name=\" method_wait \"></a> Meant to be used within a 'with' statement to throw an exception when timing out on a lock - :param lock: (Lock/RLock/Semephore) the lock that will be acquired or an exception will be thrown - :param timeout: The amount of time to wait on attempting to gain lock. - :return: (generator of bools) This is used with a contextmanager decorator \"\"\" if isinstance ( lock , SemLock ) : result = lock . acquire ( timeout = timeout ) else : result = lock . acquire ( blocking = blocking , timeout = timeout ) if result is False and raise_exc : raise RuntimeError ( \"The Lock was unable to be obtained within the timeout: %s\" % timeout ) yield result if result : lock . release ()","title":"wait_lock"},{"location":"reference/PyMultiTasking/utils/#classes","text":"","title":"Classes"},{"location":"reference/PyMultiTasking/utils/#multievent","text":"class MultiEvent ( counter : 'int' = 1 ) Designed to only get set if more the set function is called multiple times. View Source class MultiEvent(Event): \"\"\" <a name= \"MultiEvent\" ></a> Designed to only get set if more the set function is called multiple times. \"\"\" _counter: int = None _counterMax: int = None _ActionLock: Lock = None def __init__(self, counter: int = 1): \"\"\" Constructor for the MultiEvent. This requires one parameter named 'counter'. - :param counter: (int, default 1) This is how many times 'set' method has to be called for the event to be set. \"\"\" self._counter = counter self._counterMax = counter self._ActionLock = Lock() super(MultiEvent, self).__init__() def set(self) -> None: \"\"\" A wrapper method for 'set' in threading's modules 'Event' class. This simply counts down and will attempt to set the Event once the '_counter' is at zero. - :return: None \"\"\" with self._ActionLock: self._counter -= 1 if self._counter < = 0: super(MultiEvent, self).set() def clear(self) -> None: \"\"\" A wrapper method for 'clear' in threading's modules 'Event' class. This resets the '_counter' variable before calling 'clear' method of 'Event'. :return: None \"\"\" with self._ActionLock: self._counter = self._counterMax super(MultiEvent, self).clear() def remaining_sets(self) -> int: \"\"\" Is a wrapper around the private variable '_counter'. - :return: (int) \"\"\" with self._ActionLock: return self._counter @property def num_required_sets(self) -> int: return self._counterMax","title":"MultiEvent"},{"location":"reference/PyMultiTasking/utils/#ancestors-in-mro","text":"threading.Event","title":"Ancestors (in MRO)"},{"location":"reference/PyMultiTasking/utils/#instance-variables","text":"num_required_sets","title":"Instance variables"},{"location":"reference/PyMultiTasking/utils/#methods","text":"","title":"Methods"},{"location":"reference/PyMultiTasking/utils/#clear","text":"def clear ( self ) -> 'None' A wrapper method for 'clear' in threading's modules 'Event' class. This resets the '_counter' variable before calling 'clear' method of 'Event'. Returns: Type Description None None View Source def clear ( self ) -> None : \"\"\" A wrapper method for 'clear' in threading's modules 'Event' class. This resets the '_counter' variable before calling 'clear' method of 'Event'. :return: None \"\"\" with self . _ActionLock : self . _counter = self . _counterMax super ( MultiEvent , self ) . clear ()","title":"clear"},{"location":"reference/PyMultiTasking/utils/#isset","text":"def isSet ( self ) Return true if and only if the internal flag is true. This method is deprecated, use is_set() instead. View Source def isSet ( self ): \"\"\"Return true if and only if the internal flag is true. This method is deprecated, use is_set() instead. \"\"\" import warnings warnings . warn ( 'isSet() is deprecated, use is_set() instead' , DeprecationWarning , stacklevel = 2 ) return self . is_set ()","title":"isSet"},{"location":"reference/PyMultiTasking/utils/#is_set","text":"def is_set ( self ) Return true if and only if the internal flag is true. View Source def is_set(self): \"\"\"Return true if and only if the internal flag is true.\"\"\" return self._flag","title":"is_set"},{"location":"reference/PyMultiTasking/utils/#remaining_sets","text":"def remaining_sets ( self ) -> 'int' Is a wrapper around the private variable '_counter'. :return: (int) View Source def remaining_sets ( self ) -> int : \"\"\" Is a wrapper around the private variable '_counter'. - :return: (int) \"\"\" with self . _ActionLock : return self . _counter","title":"remaining_sets"},{"location":"reference/PyMultiTasking/utils/#set","text":"def set ( self ) -> 'None' A wrapper method for 'set' in threading's modules 'Event' class. This simply counts down and will attempt to set the Event once the '_counter' is at zero. :return: None View Source def set ( self ) -> None : \"\"\" A wrapper method for 'set' in threading's modules 'Event' class. This simply counts down and will attempt to set the Event once the '_counter' is at zero. - :return: None \"\"\" with self . _ActionLock : self . _counter -= 1 if self . _counter <= 0 : super ( MultiEvent , self ). set ()","title":"set"},{"location":"reference/PyMultiTasking/utils/#wait","text":"def wait ( self , timeout = None ) Block until the internal flag is true. If the internal flag is true on entry, return immediately. Otherwise, block until another thread calls set() to set the flag to true, or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). This method returns the internal flag on exit, so it will always return True except if a timeout is given and the operation times out. View Source def wait ( self , timeout = None ): \"\"\"Block until the internal flag is true. If the internal flag is true on entry, return immediately. Otherwise, block until another thread calls set() to set the flag to true, or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). This method returns the internal flag on exit, so it will always return True except if a timeout is given and the operation times out. \"\"\" with self . _cond : signaled = self . _flag if not signaled : signaled = self . _cond . wait ( timeout ) return signaled","title":"wait"},{"location":"reference/PyMultiTasking/utils/#multipleevents","text":"class MultipleEvents ( events : 'Iterable[Event]' ) Designed to take multiple events and put them together to be waited on as a whole. View Source class MultipleEvents ( object ) : \"\"\" <a name=\" MultipleEvents \"></a> Designed to take multiple events and put them together to be waited on as a whole. \"\"\" _events = None def __init__ ( self , events : Iterable [ Event ] ) : \"\"\" Make a new MultipleEvents object using a iterable array of events. - :param events: (a list/tuple/iterable of events) \"\"\" self . _events = events super ( MultipleEvents , self ). __init__ () def wait ( self , timeout : int = 60 , delay : Union [ int, float ] = 0.1 ) -> bool : \"\"\" Wait on all events by using the 'is_set' method on each event in the event list. - :param timeout: (int) default is 60. This will not throw an exception it will simply return False. - :param delay: How long to wait between checking if all events have been set. - :return: (bool) \"\"\" if type ( self . _events ) is not list : return False e = Event () endTime = time . monotonic () + timeout while time . monotonic () <= endTime : if self . isSet () : return True e . wait ( timeout = delay ) return False def isSet ( self ) -> bool : \"\"\" Uses the 'is_set' method on each event in the list and returns True if all is set and False otherwise. - :return: (bool) \"\"\" if not filter ( MultipleEvents . wait_filter , self . _events ) : return True return False def clear ( self ) -> None : \"\"\" Reset the internal flag to false on all events. - :return: (None) \"\"\" for event in self . _events : event . clear () def remove_events ( self ) -> None : \"\"\" This deletes all events making this object useless until new events are added. - :return: (None) \"\"\" del self . _events self . _events = [] def add_event ( self , event : Event ) -> None : \"\"\" This adds a new event to the private variable '_event'. It assumes '_event' is a List object. - :param event: (Event) - :return: (None) \"\"\" if self . _events is None : self . _events = [] self . _events . append ( event ) @staticmethod def set () -> None : \"\"\" This is ignored. This object is not meant to set Events simply wait on events. - :return: (None) \"\"\" _log . warning ( \"This set is ignored!\" ) @staticmethod def wait_filter ( event : Event ) -> bool : \"\"\" Simply calls and returns 'is_set' method of a given Event object. - :param event: (Event) - :return: (bool) \"\"\" return not event . is_set ()","title":"MultipleEvents"},{"location":"reference/PyMultiTasking/utils/#static-methods","text":"","title":"Static methods"},{"location":"reference/PyMultiTasking/utils/#set_1","text":"def set ( ) -> 'None' This is ignored. This object is not meant to set Events simply wait on events. :return: (None) View Source @ staticmethod def set () -> None : \"\"\" This is ignored. This object is not meant to set Events simply wait on events. - :return: (None) \"\"\" _log . warning ( \"This set is ignored!\" )","title":"set"},{"location":"reference/PyMultiTasking/utils/#wait_filter","text":"def wait_filter ( event : 'Event' ) -> 'bool' Simply calls and returns 'is_set' method of a given Event object. :param event: (Event) :return: (bool) View Source @ staticmethod def wait_filter ( event : Event ) -> bool : \"\"\" Simply calls and returns 'is_set' method of a given Event object. - :param event: (Event) - :return: (bool) \"\"\" return not event . is_set ()","title":"wait_filter"},{"location":"reference/PyMultiTasking/utils/#methods_1","text":"","title":"Methods"},{"location":"reference/PyMultiTasking/utils/#add_event","text":"def add_event ( self , event : 'Event' ) -> 'None' This adds a new event to the private variable '_event'. It assumes '_event' is a List object. :param event: (Event) :return: (None) View Source def add_event ( self , event : Event ) -> None : \"\"\" This adds a new event to the private variable '_event'. It assumes '_event' is a List object. - :param event: (Event) - :return: (None) \"\"\" if self . _events is None : self . _events = [] self . _events . append ( event )","title":"add_event"},{"location":"reference/PyMultiTasking/utils/#clear_1","text":"def clear ( self ) -> 'None' Reset the internal flag to false on all events. :return: (None) View Source def clear ( self ) -> None : \"\"\" Reset the internal flag to false on all events. - :return: (None) \"\"\" for event in self . _events : event . clear ()","title":"clear"},{"location":"reference/PyMultiTasking/utils/#isset_1","text":"def isSet ( self ) -> 'bool' Uses the 'is_set' method on each event in the list and returns True if all is set and False otherwise. :return: (bool) View Source def isSet ( self ) -> bool : \"\"\" Uses the ' is_set ' method on each event in the list and returns True if all is set and False otherwise. - :return: (bool) \"\"\" if not filter ( MultipleEvents . wait_filter , self . _events ) : return True return False","title":"isSet"},{"location":"reference/PyMultiTasking/utils/#remove_events","text":"def remove_events ( self ) -> 'None' This deletes all events making this object useless until new events are added. :return: (None) View Source def remove_events ( self ) -> None : \"\"\" This deletes all events making this object useless until new events are added. - :return: (None) \"\"\" del self . _events self . _events = []","title":"remove_events"},{"location":"reference/PyMultiTasking/utils/#wait_1","text":"def wait ( self , timeout : 'int' = 60 , delay : 'Union[int, float]' = 0.1 ) -> 'bool' Wait on all events by using the 'is_set' method on each event in the event list. :param timeout: (int) default is 60. This will not throw an exception it will simply return False. :param delay: How long to wait between checking if all events have been set. :return: (bool) View Source def wait ( self , timeout : int = 60 , delay : Union [ int , float ] = 0.1 ) -> bool : \"\"\" Wait on all events by using the 'is_set' method on each event in the event list. - :param timeout: (int) default is 60. This will not throw an exception it will simply return False. - :param delay: How long to wait between checking if all events have been set. - :return: (bool) \"\"\" if type ( self . _events ) is not list : return False e = Event () endTime = time . monotonic () + timeout while time . monotonic () <= endTime : if self . isSet (): return True e . wait ( timeout = delay ) return False","title":"wait"},{"location":"reference/PyMultiTasking/utils/#pool","text":"class Pool ( workerType : 'type' , maxWorkers : 'Optional[int]' = None , tasks : 'Optional[Queue]' = None , daemon : 'bool' = True , timeout : 'int' = 60 , workerAutoKill : 'bool' = True , prepopulate : 'int' = 0 , name : 'str' = '' , log : 'Optional[logging]' = None ) This manages a pool of Workers and a queue of Tasks. The workers consume tasks from the taskQueue until they are told to stop. View Source class Pool : \"\"\" <a name=\"ThreadPool\"></a> This manages a pool of Workers and a queue of Tasks. The workers consume tasks from the taskQueue until they are told to stop. \"\"\" _state = __INACTIVE__ __regRLock = None __pool_registry = None def __init__ ( self , workerType : type , maxWorkers : Optional [ int ] = None , tasks : Optional [ Queue ] = None , daemon : bool = True , timeout : int = 60 , workerAutoKill : bool = True , prepopulate : int = 0 , name : str = \"\" , log : Optional [ logging ] = None ): self . workerType = workerType self . log = _log if log is None else log self . uuid = str ( uuid . uuid4 ()) self . name = name if name else self . uuid self . maxWorkers = maxWorkers or get_cpu_count () self . __timeout = timeout self . __workerAutoKill = workerAutoKill self . __workerListLock = RLock () if getattr ( workerType , 'workerType' , 'THREAD' ) == 'THREAD' else MultiProcRLock () self . __workerList = None self . __stateLock = RLock () if getattr ( workerType , 'workerType' , 'THREAD' ) == 'THREAD' else MultiProcRLock () self . __taskLock = RLock () if getattr ( workerType , 'workerType' , 'THREAD' ) == 'THREAD' else MultiProcRLock () self . taskQueue = tasks or PriorityTaskQueue () self . workers = [] self . state = __STARTING__ self . daemon = daemon self . ignoredTasks = [] if prepopulate : self . setup_workers ( numOfWorkers = prepopulate , workerAutoKill = self . __workerAutoKill ) elif self . taskQueue . qsize () > 0 : self . setup_workers ( numOfWorkers = self . taskQueue . qsize () if self . taskQueue . qsize () <= self . maxWorkers else self . maxWorkers , workerAutoKill = not daemon ) if daemon is False : self . state = __ACTIVE__ self . join ( self . __timeout ) self . shutdown ( timeout = self . __timeout ) def __enter__ ( self ): self . __taskLock . acquire () return self def __exit__ ( self , exc_type , exc_val , exc_tb ): try : if self . daemon is False : self . join ( self . __timeout ) self . shutdown ( timeout = self . __timeout ) else : self . wait_completion ( timeout = self . __timeout ) self . __taskLock . release () except Exception as e : self . log . error ( f \"ERROR in __exit__ of Pool: {e}\" ) self . log . debug ( f \"[DEBUG] for __exit__ of Pool: {traceback.format_exc()}\" ) def __str__ ( self ): return f 'Pool(UUID={self.uuid}, State={self._state})' def setup_workers ( self , numOfWorkers : int = 1 , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False ) -> bool : \"\"\" Generally only used by init. This setups Worker threads to be managed by the Pool. - :param numOfWorkers: (int) Number workers setup. IF the number of workers is higher then the value of 'maxWorkers' then 'maxWorkers' is updated. The numOfWorkers is how many Workers the Pool has *not* now many new Workers get added. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in the 'taskQueue'. - :return: (bool) \"\"\" if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if numOfWorkers > self . maxWorkers : self . set_max_workers ( numOfWorkers ) numOfNewWorkers = ( numOfWorkers - self . num_workers ) elif numOfWorkers > ( self . maxWorkers - self . num_workers ): numOfNewWorkers = ( self . maxWorkers - self . num_workers ) else : numOfNewWorkers = numOfWorkers for _ in range ( 0 , numOfNewWorkers ): self . add_worker ( workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill , allow_restart = allow_restart ) return numOfNewWorkers > 0 def add_worker ( self , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False , ** kwargs ) -> bool : \"\"\" Adds a single new worker too the Pool. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in - :return: (bool) \"\"\" self . log . debug ( \"Attempting to add new worker!\" ) if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if self . num_workers >= self . maxWorkers : return False self . workers . append ( self . workerType ( self , workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill )) return True def remove_worker ( self , workerTooRemove : Optional [ Worker ] = None , timeout : int = 30 , allow_abandon : bool = False ) -> bool : \"\"\" Removes a single new worker from the Pool. This can be called to remove the last Worker or you can specify a Worker to remove. - :param workerTooRemove: (Worker) This is usually sent when a Worker is self terminating - :param timeout: (int) 30, How much time it is willing to wait. NOTE: This is doubled when specifying a worker with the workerTooRemove parameter. - :param allow_abandon: (bool) False, This determines if the thread will simply be abandoned if it cannot normally remove it from the pool. It will only do this if 'safe_stop' and 'terminate' methods fail. - :return: (bool) \"\"\" def wait_helper ( wait_time , start_time , ev , wtr ): current_time = time . monotonic () while current_time < start_time + wait_time and wtr in self . workers : ev . wait ( timeout = 0.1 ) return wtr not in self . workers try : if self . num_workers <= 0 : return False if workerTooRemove in self . workers and workerTooRemove . killed : self . workers . pop ( self . workers . index ( workerTooRemove )) return True e = Event () if workerTooRemove is not None : workerTooRemove . safe_stop () if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ): return True self . log . warning ( f '[WARN]: worker({workerTooRemove}) needs to be terminated in order to be removed.' ) getattr ( workerTooRemove , 'terminate' , dummy_func )() if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ): return True if allow_abandon : self . log . warning ( f '[WARN]: worker({workerTooRemove}) is being abandoned.' ) worker = self . workers . pop ( self . workers . index ( workerTooRemove )) if worker . killed is not True : worker . killed = True return True return False else : current_num = self . num_workers self . submit ( Task ( Worker . __KILL__ , priority = self . highest_priority + 1 , kill = True ), submit_task_autospawn = False ) if timeout > 0 : current = start = time . monotonic () while current < start + timeout and self . num_workers >= current_num : e . wait ( timeout = 0.1 ) return self . num_workers < current_num return True except Exception as e : self . log . error ( f '[ERROR]: Error occurred while attempting to remove worker: {e}' ) self . log . debug ( f '[DEBUG]: Trace for error while attempting to remove worker: {traceback.format_exc()}' ) return False finally : if self . num_workers == 0 : self . state = __INACTIVE__ def set_max_workers ( self , maxWorkers : int ) -> int : \"\"\" Set the maximum number of threads that will remain active. Return the maximum thread limit. - :param maxWorkers: (int) Max thread limit - :return: (int) \"\"\" if type ( maxWorkers ) is int and maxWorkers > - 1 : self . maxWorkers = maxWorkers return self . maxWorkers def wait_completion ( self , timeout : Union [ int , float ], delay : Union [ int , float ] = 0.1 , block : bool = False ) -> bool : \"\"\" This method waits until all Tasks in the PriorityTaskQueue is done. If the parameter block is True it will stop any new Task from being submitted while waiting. - :param timeout: (int/float) How long to wait for all tasks in the 'taskQueue' to be finished. - :param delay: (int/float) The amount of time to wait before checking again in seconds. Default 0.1. - :param block: (bool) This will stop new tasks from being submitted to the Queue until finished. - :return: (bool) \"\"\" e = Event () def _wait_completion ( waitTime : Union [ int , float ]) -> bool : current_time = start_time = time . monotonic () while current_time < start_time + waitTime and self . has_workers : if self . unfinished_tasks == 0 : return True e . wait ( timeout = delay ) current_time = time . monotonic () return False if block : start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): return _wait_completion ( max ( 0.1 , ( start + timeout ) - time . monotonic ())) return _wait_completion ( timeout ) def shutdown ( self , timeout : Optional [ int ] = None , unsafe : Optional [ bool ] = None ) -> bool : \"\"\" This sends a kill operation too all the workers and waits for them to complete and then removes the threads. It can also attempt to kill Workers in an unsafe way with the 'terminate' Worker method. - :param timeout: (int) The length of time to wait on tasks to be stopped - :param unsafe: (bool/None) True: The 'terminate' method will be called on each Worker. False: Even if the timeout is reached the 'terminate' method will *not* be called. None: This will attempt to safely wait for the Workers too finish but if timeout is reached then the 'terminate' method will be called. - :return: (bool) \"\"\" e = Event () self . state = __STOPPING__ if timeout is None : timeout = self . __timeout def _clear_helper ( task ): return task . task . func != Worker . __KILL__ def _clear_shutdown_tasks (): try : tasks = [] while not self . taskQueue . empty (): tasks . append ( self . taskQueue . get ()) self . taskQueue . task_done () for task in filter ( _clear_helper , tasks ): if self . has_workers : self . taskQueue . put_nowait ( task ) else : self . ignoredTasks . append ( task ) except Exception as e : self . log . error ( f '[ERROR]: Error while clearing old tasks: {e}' ) self . log . debug ( f '[DEBUG]: Trace for error clearing old tasks: {traceback.format_exc()}' ) def _unsafe_shutdown (): for worker in self . workers : self . log . info ( f 'Worker: {worker} will be killed unsafely.' ) worker . terminate () if unsafe : _unsafe_shutdown () e . wait ( timeout = 0.1 ) return self . num_workers == 0 start_time = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): for x in range ( 0 , self . num_workers ): self . remove_worker ( timeout = 0 ) current_time = time . monotonic () while current_time < start_time + timeout : if self . num_workers <= 0 : self . log . info ( 'There are no more workers. No need for forced timeout' ) break e . wait ( timeout = 0.1 ) current_time = time . monotonic () if unsafe is None : _unsafe_shutdown () e . wait ( timeout = 0.1 ) _clear_shutdown_tasks () if self . num_workers == 0 : self . state = __STOPPED__ return True return False def join ( self , timeout : int ) -> bool : \"\"\" This first calls 'waitCompletion' with 'block=True' and then calls 'shutdown'. The goal is to try to wait for all Tasks to complete and then close out the Pool. - :param timeout: (int)The length of time to wait on both join and shutdown. - :return: (bool) \"\"\" with wait_lock ( self . __taskLock , timeout = timeout ): start_time = time . monotonic () self . wait_completion ( timeout , block = True ) return self . shutdown ( timeout = int ( max ( timeout - ( time . monotonic () - start_time ), 1 ))) def map ( self , fn : Callable , params : Tuple , chunksize : int = 0 , * args , ** kwargs ) -> None : \"\"\" A simple mapping tool that takes different params (a List of tuples formatted like [(*args, **kwargs)]) and pass them too a function. chunksize determines how too break up the list and distribute it across Workers. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param params: (Tuple) The Tuple should be formatted like so ( ((arg1, ), {'kwarg1': 'value'}), ...). Each item within the Tuple is a Tuple itself with two items. The first item is positional arguments (args) and the second item is keyword arguments (kwargs). Even if they are empty they need to exist. - :param chunksize: (int) If left at 0 the method will attempt to spread the tasks as evenly as possible. Otherwise it will take the number to mean how many Tasks will be given to a single Worker. - :param kwargs: These are keyword arguments that get passed to the 'submit' method. - :return: (None) \"\"\" if 'submit_task_autospawn' not in kwargs : kwargs [ 'submit_task_autospawn' ] = True if chunksize == 0 : if len ( params ) <= self . maxWorkers : chunksize = 1 else : chunksize = round ( len ( params ) / self . maxWorkers ) def chunkHelper ( func , chunkList ): return [ func ( * parms [ 0 ], ** parms [ 1 ]) for parms in chunkList ] def listIntoChunks ( lst ): return [ lst [ i * chunksize :( i + 1 ) * chunksize ] for i in range (( len ( lst ) + chunksize - 1 ) // chunksize )] for item in listIntoChunks ( params ): self . submit ( partial ( chunkHelper , func = fn , chunkList = item ), ** kwargs ) def submit ( self , fn : Callable , * args , ** kwargs ) -> Union [ Task , bool ]: \"\"\" This is the function used to submit a Task to the Pool. Simply provide a function as 'fn' and then arguments that need to be passed too that function and it will create a Task and add it to the PriorityTaskQueue to be worked. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param args: These args will be passed to the Task object. - :param kwargs: The following keywords will be pulled out. 'submit_task_nowait', 'submit_task_timeout', 'submit_task_autospawn', 'submit_task_priority'. All others will be passed to Task. + 'submit_task_nowait': (bool) tells 'submit' to use the 'put_nowait' method on PriorityTaskQueue. + 'submit_task_timeout': (int/float) how long should one wait too submit. + 'submit_task_autospawn': (bool/None) determines if new Worker should be spawned because of more tasks. + 'submit_task_priority': (int) changes the priority of the task. - :return: (Task/bool) \"\"\" if fn is None : return False def autospawn_parser ( tmpAutospawn , state ): if state == __STOPPING__ or state == __STOPPED__ : return False if self . needs_workers and tmpAutospawn is None : return True return tmpAutospawn nowait = kwargs . pop ( 'submit_task_nowait' , True ) timeout = kwargs . pop ( 'submit_task_timeout' , 10 ) autospawn = autospawn_parser ( kwargs . pop ( 'submit_task_autospawn' , None ), self . state ) priority = kwargs . pop ( 'submit_task_priority' , 10 ) or 10 start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): if isinstance ( fn , Task ): task = fn else : task = Task ( fn , priority , * args , ** kwargs ) try : if nowait : self . taskQueue . put_nowait ( task ) else : self . taskQueue . put ( task , timeout = max ( 0.1 , ( start + timeout ) - time . monotonic ())) if autospawn or autospawn is None and self . needs_workers : self . add_worker ( ** kwargs ) return task except Exception as e : self . log . error ( f 'Error in submitting task: {e} \\n {traceback.format_exc()}' ) return False finally : if self . state is not __ACTIVE__ and self . num_workers > 0 : self . state = __ACTIVE__ @ staticmethod def as_completed ( tasks : List [ Task ]): def _finished_tasks ( task_item ): return task_item if task_item . is_set () else None lengthOfTasks = len ( tasks ) finished_tasks = set () while len ( finished_tasks ) < lengthOfTasks : for task in filter ( _finished_tasks , tasks ): if task not in finished_tasks : finished_tasks . add ( task ) yield task time . sleep ( 0.01 ) @ property def unfinished_tasks ( self ) -> int : \"\"\"+ This calls the 'unfinishedTasks' property of PriorityTaskQueue. And is equal to the number of tasks submitted minus the number of times a Task has been Worked by a Worker. \"\"\" return self . taskQueue . unfinished_tasks @ property def num_queued_tasks ( self ) -> int : \"\"\" This is a wrapper for the 'qsize()' method from PriorityTaskQueue.\"\"\" return self . taskQueue . qsize () @ property def num_active_tasks ( self ) -> int : return self . unfinished_tasks - self . num_queued_tasks @ property def has_tasks ( self ) -> bool : return self . unfinished_tasks > 0 @ property def is_idle ( self ) -> bool : return not ( self . has_tasks and self . has_workers ) @ property def is_active ( self ) -> bool : \"\"\"+ This determines is the Pool both has workers and has work to do. This doesn't have anything to do with a Pool's state. \"\"\" return self . has_tasks and self . has_workers @ property def has_workers ( self ) -> bool : return self . num_workers > 0 @ property def needs_workers ( self ) -> bool : if self . num_workers < self . maxWorkers : if self . num_queued_tasks > self . inactive_workers : return True return False @ property def num_workers ( self ) -> int : try : return len ( self . workers ) except Exception : return 0 @ property def active_workers ( self ) -> int : return len ([ i for i in self . workers if i . is_active ]) @ property def inactive_workers ( self ) -> int : return len ([ i for i in self . workers if not i . is_active ]) @ property def highest_priority ( self ) -> int : return max ([ i . current_priority for i in self . workers ]) @ property def workers ( self ) -> List : \"\"\"+ This is a protected (wrapped in a lock) List of Workers managed by this pool. \"\"\" try : with wait_lock ( self . __workerListLock , self . __timeout ): return self . __workerList except RuntimeError : pass @ workers . setter def workers ( self , value ) -> None : try : with wait_lock ( self . __workerListLock , self . __timeout ): self . __workerList = value except RuntimeError : pass @ workers . deleter def workers ( self ) -> None : try : with wait_lock ( self . __workerListLock , self . __timeout ): self . __workerList = [] except RuntimeError : pass @ property def state ( self ) -> str : \"\"\"+ This is a string that has only 4 valid string values that determines the state of the Pool.\"\"\" try : with wait_lock ( self . __stateLock , self . __timeout ): return self . _state except RuntimeError : pass @ state . setter def state ( self , value ) -> None : try : with wait_lock ( self . __stateLock , self . __timeout ): if value in __THREADPOOL_STATES__ : self . _state = __THREADPOOL_STATES__ [ value ] else : raise TypeError ( 'Invalid ThreadPool STATE: %s ' % str ( value )) except RuntimeError : pass @ state . deleter def state ( self ) -> None : try : with wait_lock ( self . __stateLock , self . __timeout ): self . _state = __INACTIVE__ except RuntimeError : pass","title":"Pool"},{"location":"reference/PyMultiTasking/utils/#descendants","text":"PyMultiTasking.ThreadingUtils.ThreadPool","title":"Descendants"},{"location":"reference/PyMultiTasking/utils/#static-methods_1","text":"","title":"Static methods"},{"location":"reference/PyMultiTasking/utils/#as_completed","text":"def as_completed ( tasks : 'List[Task]' ) View Source @staticmethod def as_completed ( tasks : List [ Task ] ) : def _finished_tasks ( task_item ) : return task_item if task_item . is_set () else None lengthOfTasks = len ( tasks ) finished_tasks = set () while len ( finished_tasks ) < lengthOfTasks : for task in filter ( _finished_tasks , tasks ) : if task not in finished_tasks : finished_tasks . add ( task ) yield task time . sleep ( 0.01 )","title":"as_completed"},{"location":"reference/PyMultiTasking/utils/#instance-variables_1","text":"active_workers has_tasks has_workers highest_priority inactive_workers is_active This determines is the Pool both has workers and has work to do. This doesn't have anything to do with a Pool's state. is_idle needs_workers num_active_tasks num_queued_tasks This is a wrapper for the 'qsize()' method from PriorityTaskQueue. num_workers state This is a string that has only 4 valid string values that determines the state of the Pool. unfinished_tasks This calls the 'unfinishedTasks' property of PriorityTaskQueue. And is equal to the number of tasks submitted minus the number of times a Task has been Worked by a Worker. workers This is a protected (wrapped in a lock) List of Workers managed by this pool.","title":"Instance variables"},{"location":"reference/PyMultiTasking/utils/#methods_2","text":"","title":"Methods"},{"location":"reference/PyMultiTasking/utils/#add_worker","text":"def add_worker ( self , workerAutoKill : 'Optional[bool]' = None , allow_restart : 'bool' = False , ** kwargs ) -> 'bool' Adds a single new worker too the Pool. :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in :return: (bool) View Source def add_worker ( self , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False , ** kwargs ) -> bool : \"\"\" Adds a single new worker too the Pool. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in - :return: (bool) \"\"\" self . log . debug ( \"Attempting to add new worker!\" ) if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if self . num_workers >= self . maxWorkers : return False self . workers . append ( self . workerType ( self , workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill )) return True","title":"add_worker"},{"location":"reference/PyMultiTasking/utils/#join","text":"def join ( self , timeout : 'int' ) -> 'bool' This first calls 'waitCompletion' with 'block=True' and then calls 'shutdown'. The goal is to try to wait for all Tasks to complete and then close out the Pool. :param timeout: (int)The length of time to wait on both join and shutdown. :return: (bool) View Source def join ( self , timeout : int ) -> bool : \"\"\" This first calls ' waitCompletion ' with ' block = True ' and then calls ' shutdown '. The goal is to try to wait for all Tasks to complete and then close out the Pool. - :param timeout: (int)The length of time to wait on both join and shutdown. - :return: (bool) \"\"\" with wait_lock ( self . __taskLock , timeout = timeout ) : start_time = time . monotonic () self . wait_completion ( timeout , block = True ) return self . shutdown ( timeout = int ( max ( timeout - ( time . monotonic () - start_time ), 1 )))","title":"join"},{"location":"reference/PyMultiTasking/utils/#map","text":"def map ( self , fn : 'Callable' , params : 'Tuple' , chunksize : 'int' = 0 , * args , ** kwargs ) -> 'None' A simple mapping tool that takes different params (a List of tuples formatted like [( args, *kwargs)]) and pass them too a function. chunksize determines how too break up the list and distribute it across Workers. :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task :param params: (Tuple) The Tuple should be formatted like so ( ((arg1, ), {'kwarg1': 'value'}), ...). Each item within the Tuple is a Tuple itself with two items. The first item is positional arguments (args) and the second item is keyword arguments (kwargs). Even if they are empty they need to exist. :param chunksize: (int) If left at 0 the method will attempt to spread the tasks as evenly as possible. Otherwise it will take the number to mean how many Tasks will be given to a single Worker. :param kwargs: These are keyword arguments that get passed to the 'submit' method. :return: (None) View Source def map ( self , fn : Callable , params : Tuple , chunksize : int = 0 , * args , ** kwargs ) -> None : \"\"\" A simple mapping tool that takes different params (a List of tuples formatted like [(*args, **kwargs)]) and pass them too a function. chunksize determines how too break up the list and distribute it across Workers. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param params: (Tuple) The Tuple should be formatted like so ( ((arg1, ), {'kwarg1': 'value'}), ...). Each item within the Tuple is a Tuple itself with two items. The first item is positional arguments (args) and the second item is keyword arguments (kwargs). Even if they are empty they need to exist. - :param chunksize: (int) If left at 0 the method will attempt to spread the tasks as evenly as possible. Otherwise it will take the number to mean how many Tasks will be given to a single Worker. - :param kwargs: These are keyword arguments that get passed to the 'submit' method. - :return: (None) \"\"\" if 'submit_task_autospawn' not in kwargs : kwargs [ 'submit_task_autospawn' ] = True if chunksize == 0 : if len ( params ) <= self . maxWorkers : chunksize = 1 else : chunksize = round ( len ( params ) / self . maxWorkers ) def chunkHelper ( func , chunkList ): return [ func ( * parms [ 0 ], ** parms [ 1 ]) for parms in chunkList ] def listIntoChunks ( lst ): return [ lst [ i * chunksize :( i + 1 ) * chunksize ] for i in range (( len ( lst ) + chunksize - 1 ) // chunksize )] for item in listIntoChunks ( params ): self . submit ( partial ( chunkHelper , func = fn , chunkList = item ), ** kwargs )","title":"map"},{"location":"reference/PyMultiTasking/utils/#remove_worker","text":"def remove_worker ( self , workerTooRemove : 'Optional[Worker]' = None , timeout : 'int' = 30 , allow_abandon : 'bool' = False ) -> 'bool' Removes a single new worker from the Pool. This can be called to remove the last Worker or you can specify a Worker to remove. :param workerTooRemove: (Worker) This is usually sent when a Worker is self terminating :param timeout: (int) 30, How much time it is willing to wait. NOTE: This is doubled when specifying a worker with the workerTooRemove parameter. :param allow_abandon: (bool) False, This determines if the thread will simply be abandoned if it cannot normally remove it from the pool. It will only do this if 'safe_stop' and 'terminate' methods fail. :return: (bool) View Source def remove_worker ( self , workerTooRemove : Optional [ Worker ] = None , timeout : int = 30 , allow_abandon : bool = False ) -> bool : \"\"\" Removes a single new worker from the Pool. This can be called to remove the last Worker or you can specify a Worker to remove. - :param workerTooRemove: (Worker) This is usually sent when a Worker is self terminating - :param timeout: (int) 30, How much time it is willing to wait. NOTE: This is doubled when specifying a worker with the workerTooRemove parameter. - :param allow_abandon: (bool) False, This determines if the thread will simply be abandoned if it cannot normally remove it from the pool. It will only do this if 'safe_stop' and 'terminate' methods fail. - :return: (bool) \"\"\" def wait_helper ( wait_time , start_time , ev , wtr ) : current_time = time . monotonic () while current_time < start_time + wait_time and wtr in self . workers : ev . wait ( timeout = 0.1 ) return wtr not in self . workers try : if self . num_workers <= 0 : return False if workerTooRemove in self . workers and workerTooRemove . killed : self . workers . pop ( self . workers . index ( workerTooRemove )) return True e = Event () if workerTooRemove is not None : workerTooRemove . safe_stop () if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ) : return True self . log . warning ( f '[WARN]: worker({workerTooRemove}) needs to be terminated in order to be removed.' ) getattr ( workerTooRemove , 'terminate' , dummy_func )() if wait_helper ( timeout , time . monotonic (), e , workerTooRemove ) : return True if allow_abandon : self . log . warning ( f '[WARN]: worker({workerTooRemove}) is being abandoned.' ) worker = self . workers . pop ( self . workers . index ( workerTooRemove )) if worker . killed is not True : worker . killed = True return True return False else : current_num = self . num_workers self . submit ( Task ( Worker . __KILL__ , priority = self . highest_priority + 1 , kill = True ), submit_task_autospawn = False ) if timeout > 0 : current = start = time . monotonic () while current < start + timeout and self . num_workers >= current_num : e . wait ( timeout = 0.1 ) return self . num_workers < current_num return True except Exception as e : self . log . error ( f '[ERROR]: Error occurred while attempting to remove worker: {e}' ) self . log . debug ( f '[DEBUG]: Trace for error while attempting to remove worker: {traceback.format_exc()}' ) return False finally : if self . num_workers == 0 : self . state = __INACTIVE__","title":"remove_worker"},{"location":"reference/PyMultiTasking/utils/#set_max_workers","text":"def set_max_workers ( self , maxWorkers : 'int' ) -> 'int' Set the maximum number of threads that will remain active. Return the maximum thread limit. :param maxWorkers: (int) Max thread limit :return: (int) View Source def set_max_workers ( self , maxWorkers : int ) -> int : \"\"\" Set the maximum number of threads that will remain active. Return the maximum thread limit. - :param maxWorkers: (int) Max thread limit - :return: (int) \"\"\" if type ( maxWorkers ) is int and maxWorkers > - 1 : self . maxWorkers = maxWorkers return self . maxWorkers","title":"set_max_workers"},{"location":"reference/PyMultiTasking/utils/#setup_workers","text":"def setup_workers ( self , numOfWorkers : 'int' = 1 , workerAutoKill : 'Optional[bool]' = None , allow_restart : 'bool' = False ) -> 'bool' Generally only used by init. This setups Worker threads to be managed by the Pool. :param numOfWorkers: (int) Number workers setup. IF the number of workers is higher then the value of 'maxWorkers' then 'maxWorkers' is updated. The numOfWorkers is how many Workers the Pool has not now many new Workers get added. :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in the 'taskQueue'. :return: (bool) View Source def setup_workers ( self , numOfWorkers : int = 1 , workerAutoKill : Optional [ bool ] = None , allow_restart : bool = False ) -> bool : \"\"\" Generally only used by init. This setups Worker threads to be managed by the Pool. - :param numOfWorkers: (int) Number workers setup. IF the number of workers is higher then the value of 'maxWorkers' then 'maxWorkers' is updated. The numOfWorkers is how many Workers the Pool has *not* now many new Workers get added. - :param workerAutoKill: (bool) This determines if the worker ends once their is no longer any work left in the 'taskQueue'. - :return: (bool) \"\"\" if self . state in ( __STOPPING__ , __STOPPED__ ) and allow_restart is False : return False if numOfWorkers > self . maxWorkers : self . set_max_workers ( numOfWorkers ) numOfNewWorkers = ( numOfWorkers - self . num_workers ) elif numOfWorkers > ( self . maxWorkers - self . num_workers ) : numOfNewWorkers = ( self . maxWorkers - self . num_workers ) else : numOfNewWorkers = numOfWorkers for _ in range ( 0 , numOfNewWorkers ) : self . add_worker ( workerAutoKill = self . __workerAutoKill if workerAutoKill is None else workerAutoKill , allow_restart = allow_restart ) return numOfNewWorkers > 0","title":"setup_workers"},{"location":"reference/PyMultiTasking/utils/#shutdown","text":"def shutdown ( self , timeout : 'Optional[int]' = None , unsafe : 'Optional[bool]' = None ) -> 'bool' This sends a kill operation too all the workers and waits for them to complete and then removes the threads. It can also attempt to kill Workers in an unsafe way with the 'terminate' Worker method. :param timeout: (int) The length of time to wait on tasks to be stopped :param unsafe: (bool/None) True: The 'terminate' method will be called on each Worker. False: Even if the timeout is reached the 'terminate' method will not be called. None: This will attempt to safely wait for the Workers too finish but if timeout is reached then the 'terminate' method will be called. :return: (bool) View Source def shutdown ( self , timeout : Optional [ int ] = None , unsafe : Optional [ bool ] = None ) -> bool : \"\"\" This sends a kill operation too all the workers and waits for them to complete and then removes the threads. It can also attempt to kill Workers in an unsafe way with the 'terminate' Worker method. - :param timeout: (int) The length of time to wait on tasks to be stopped - :param unsafe: (bool/None) True: The 'terminate' method will be called on each Worker. False: Even if the timeout is reached the 'terminate' method will *not* be called. None: This will attempt to safely wait for the Workers too finish but if timeout is reached then the 'terminate' method will be called. - :return: (bool) \"\"\" e = Event () self . state = __STOPPING__ if timeout is None : timeout = self . __timeout def _clear_helper ( task ) : return task . task . func != Worker . __KILL__ def _clear_shutdown_tasks () : try : tasks = [] while not self . taskQueue . empty () : tasks . append ( self . taskQueue . get ()) self . taskQueue . task_done () for task in filter ( _clear_helper , tasks ) : if self . has_workers : self . taskQueue . put_nowait ( task ) else : self . ignoredTasks . append ( task ) except Exception as e : self . log . error ( f '[ERROR]: Error while clearing old tasks: {e}' ) self . log . debug ( f '[DEBUG]: Trace for error clearing old tasks: {traceback.format_exc()}' ) def _unsafe_shutdown () : for worker in self . workers : self . log . info ( f 'Worker: {worker} will be killed unsafely.' ) worker . terminate () if unsafe : _unsafe_shutdown () e . wait ( timeout = 0.1 ) return self . num_workers == 0 start_time = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ) : for x in range ( 0 , self . num_workers ) : self . remove_worker ( timeout = 0 ) current_time = time . monotonic () while current_time < start_time + timeout : if self . num_workers <= 0 : self . log . info ( 'There are no more workers. No need for forced timeout' ) break e . wait ( timeout = 0.1 ) current_time = time . monotonic () if unsafe is None : _unsafe_shutdown () e . wait ( timeout = 0.1 ) _clear_shutdown_tasks () if self . num_workers == 0 : self . state = __STOPPED__ return True return False","title":"shutdown"},{"location":"reference/PyMultiTasking/utils/#submit","text":"def submit ( self , fn : 'Callable' , * args , ** kwargs ) -> 'Union[Task, bool]' This is the function used to submit a Task to the Pool. Simply provide a function as 'fn' and then arguments that need to be passed too that function and it will create a Task and add it to the PriorityTaskQueue to be worked. :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task :param args: These args will be passed to the Task object. :param kwargs: The following keywords will be pulled out. 'submit_task_nowait', 'submit_task_timeout', 'submit_task_autospawn', 'submit_task_priority'. All others will be passed to Task. 'submit_task_nowait': (bool) tells 'submit' to use the 'put_nowait' method on PriorityTaskQueue. 'submit_task_timeout': (int/float) how long should one wait too submit. 'submit_task_autospawn': (bool/None) determines if new Worker should be spawned because of more tasks. 'submit_task_priority': (int) changes the priority of the task. :return: (Task/bool) View Source def submit ( self , fn : Callable , * args , ** kwargs ) -> Union [ Task , bool ]: \"\"\" This is the function used to submit a Task to the Pool. Simply provide a function as 'fn' and then arguments that need to be passed too that function and it will create a Task and add it to the PriorityTaskQueue to be worked. - :param fn: (Callable) This is something like a function or a partial that will be transformed into a Task - :param args: These args will be passed to the Task object. - :param kwargs: The following keywords will be pulled out. 'submit_task_nowait', 'submit_task_timeout', 'submit_task_autospawn', 'submit_task_priority'. All others will be passed to Task. + 'submit_task_nowait': (bool) tells 'submit' to use the 'put_nowait' method on PriorityTaskQueue. + 'submit_task_timeout': (int/float) how long should one wait too submit. + 'submit_task_autospawn': (bool/None) determines if new Worker should be spawned because of more tasks. + 'submit_task_priority': (int) changes the priority of the task. - :return: (Task/bool) \"\"\" if fn is None : return False def autospawn_parser ( tmpAutospawn , state ): if state == __STOPPING__ or state == __STOPPED__ : return False if self . needs_workers and tmpAutospawn is None : return True return tmpAutospawn nowait = kwargs . pop ( ' submit_task_nowait ' , True ) timeout = kwargs . pop ( ' submit_task_timeout ' , 10 ) autospawn = autospawn_parser ( kwargs . pop ( ' submit_task_autospawn ' , None ), self . state ) priority = kwargs . pop ( ' submit_task_priority ' , 10 ) or 10 start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ): if isinstance ( fn , Task ): task = fn else : task = Task ( fn , priority , * args , ** kwargs ) try : if nowait : self . taskQueue . put_nowait ( task ) else : self . taskQueue . put ( task , timeout = max ( 0.1 , ( start + timeout ) - time . monotonic ())) if autospawn or autospawn is None and self . needs_workers : self . add_worker ( ** kwargs ) return task except Exception as e : self . log . error ( f ' Error in submitting task : { e } \\ n { traceback . format_exc ()} ' ) return False finally : if self . state is not __ACTIVE__ and self . num_workers > 0 : self . state = __ACTIVE__","title":"submit"},{"location":"reference/PyMultiTasking/utils/#wait_completion","text":"def wait_completion ( self , timeout : 'Union[int, float]' , delay : 'Union[int, float]' = 0.1 , block : 'bool' = False ) -> 'bool' This method waits until all Tasks in the PriorityTaskQueue is done. If the parameter block is True it will stop any new Task from being submitted while waiting. :param timeout: (int/float) How long to wait for all tasks in the 'taskQueue' to be finished. :param delay: (int/float) The amount of time to wait before checking again in seconds. Default 0.1. :param block: (bool) This will stop new tasks from being submitted to the Queue until finished. :return: (bool) View Source def wait_completion ( self , timeout : Union [ int , float ], delay : Union [ int , float ] = 0.1 , block : bool = False ) -> bool : \"\"\" This method waits until all Tasks in the PriorityTaskQueue is done. If the parameter block is True it will stop any new Task from being submitted while waiting. - :param timeout: (int/float) How long to wait for all tasks in the ' taskQueue ' to be finished. - :param delay: (int/float) The amount of time to wait before checking again in seconds. Default 0.1. - :param block: (bool) This will stop new tasks from being submitted to the Queue until finished. - :return: (bool) \"\"\" e = Event () def _wait_completion ( waitTime : Union [ int , float ]) -> bool : current_time = start_time = time . monotonic () while current_time < start_time + waitTime and self . has_workers : if self . unfinished_tasks == 0 : return True e . wait ( timeout = delay ) current_time = time . monotonic () return False if block : start = time . monotonic () with wait_lock ( self . __taskLock , timeout = timeout ) : return _wait_completion ( max ( 0.1 , ( start + timeout ) - time . monotonic ())) return _wait_completion ( timeout )","title":"wait_completion"},{"location":"reference/PyMultiTasking/utils/#prioritytaskqueue","text":"class PriorityTaskQueue ( maxsize = 0 ) This is a simple override of the PriorityQueue class that ensures the 'item' is a Task class meant to be used ONLY in ThreadingPool View Source class PriorityTaskQueue ( PriorityQueue ) : \"\"\" <a name=\" PriorityTaskQueue \"></a> This is a simple override of the PriorityQueue class that ensures the 'item' is a Task class meant to be used ONLY in ThreadingPool \"\"\" def put_nowait ( self , item : Task ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put_nowait ( item ) def put ( self , item : Task , block : bool = True , timeout : Union [ int, float, None ] = None ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put ( item , block = block , timeout = timeout )","title":"PriorityTaskQueue"},{"location":"reference/PyMultiTasking/utils/#ancestors-in-mro_1","text":"queue.PriorityQueue queue.Queue","title":"Ancestors (in MRO)"},{"location":"reference/PyMultiTasking/utils/#methods_3","text":"","title":"Methods"},{"location":"reference/PyMultiTasking/utils/#empty","text":"def empty ( self ) Return True if the queue is empty, False otherwise (not reliable!). This method is likely to be removed at some point. Use qsize() == 0 as a direct substitute, but be aware that either approach risks a race condition where a queue can grow before the result of empty() or qsize() can be used. To create code that needs to wait for all queued tasks to be completed, the preferred technique is to use the join() method. View Source def empty(self): '''Return True if the queue is empty, False otherwise (not reliable!). This method is likely to be removed at some point. Use qsize() == 0 as a direct substitute, but be aware that either approach risks a race condition where a queue can grow before the result of empty() or qsize() can be used. To create code that needs to wait for all queued tasks to be completed, the preferred technique is to use the join() method. ''' with self.mutex: return not self._qsize()","title":"empty"},{"location":"reference/PyMultiTasking/utils/#full","text":"def full ( self ) Return True if the queue is full, False otherwise (not reliable!). This method is likely to be removed at some point. Use qsize() >= n as a direct substitute, but be aware that either approach risks a race condition where a queue can shrink before the result of full() or qsize() can be used. View Source def full(self): '''Return True if the queue is full, False otherwise (not reliable!). This method is likely to be removed at some point. Use qsize() >= n as a direct substitute, but be aware that either approach risks a race condition where a queue can shrink before the result of full() or qsize() can be used. ''' with self.mutex: return 0 < self.maxsize <= self._qsize()","title":"full"},{"location":"reference/PyMultiTasking/utils/#get","text":"def get ( self , block = True , timeout = None ) Remove and return an item from the queue. If optional args 'block' is true and 'timeout' is None (the default), block if necessary until an item is available. If 'timeout' is a non-negative number, it blocks at most 'timeout' seconds and raises the Empty exception if no item was available within that time. Otherwise ('block' is false), return an item if one is immediately available, else raise the Empty exception ('timeout' is ignored in that case). View Source def get(self, block=True, timeout=None): '''Remove and return an item from the queue. If optional args 'block' is true and 'timeout' is None (the default), block if necessary until an item is available. If 'timeout' is a non-negative number, it blocks at most 'timeout' seconds and raises the Empty exception if no item was available within that time. Otherwise ('block' is false), return an item if one is immediately available, else raise the Empty exception ('timeout' is ignored in that case). ''' with self.not_empty: if not block: if not self._qsize(): raise Empty elif timeout is None: while not self._qsize(): self.not_empty.wait() elif timeout < 0: raise ValueError(\"'timeout' must be a non-negative number\") else: endtime = time() + timeout while not self._qsize(): remaining = endtime - time() if remaining <= 0.0: raise Empty self.not_empty.wait(remaining) item = self._get() self.not_full.notify() return item","title":"get"},{"location":"reference/PyMultiTasking/utils/#get_nowait","text":"def get_nowait ( self ) Remove and return an item from the queue without blocking. Only get an item if one is immediately available. Otherwise raise the Empty exception. View Source def get_nowait(self): '''Remove and return an item from the queue without blocking. Only get an item if one is immediately available. Otherwise raise the Empty exception. ''' return self.get(block=False)","title":"get_nowait"},{"location":"reference/PyMultiTasking/utils/#join_1","text":"def join ( self ) Blocks until all items in the Queue have been gotten and processed. The count of unfinished tasks goes up whenever an item is added to the queue. The count goes down whenever a consumer thread calls task_done() to indicate the item was retrieved and all work on it is complete. When the count of unfinished tasks drops to zero, join() unblocks. View Source def join(self): '''Blocks until all items in the Queue have been gotten and processed. The count of unfinished tasks goes up whenever an item is added to the queue. The count goes down whenever a consumer thread calls task_done() to indicate the item was retrieved and all work on it is complete. When the count of unfinished tasks drops to zero, join() unblocks. ''' with self.all_tasks_done: while self.unfinished_tasks: self.all_tasks_done.wait()","title":"join"},{"location":"reference/PyMultiTasking/utils/#put","text":"def put ( self , item : 'Task' , block : 'bool' = True , timeout : 'Union[int, float, None]' = None ) -> 'None' Put an item into the queue. If optional args 'block' is true and 'timeout' is None (the default), block if necessary until a free slot is available. If 'timeout' is a non-negative number, it blocks at most 'timeout' seconds and raises the Full exception if no free slot was available within that time. Otherwise ('block' is false), put an item on the queue if a free slot is immediately available, else raise the Full exception ('timeout' is ignored in that case). View Source def put ( self , item : Task , block : bool = True , timeout : Union [ int, float, None ] = None ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put ( item , block = block , timeout = timeout )","title":"put"},{"location":"reference/PyMultiTasking/utils/#put_nowait","text":"def put_nowait ( self , item : 'Task' ) -> 'None' Put an item into the queue without blocking. Only enqueue the item if a free slot is immediately available. Otherwise raise the Full exception. View Source def put_nowait ( self , item : Task ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put_nowait ( item )","title":"put_nowait"},{"location":"reference/PyMultiTasking/utils/#qsize","text":"def qsize ( self ) Return the approximate size of the queue (not reliable!). View Source def qsize(self): '''Return the approximate size of the queue (not reliable!).''' with self.mutex: return self._qsize()","title":"qsize"},{"location":"reference/PyMultiTasking/utils/#task_done","text":"def task_done ( self ) Indicate that a formerly enqueued task is complete. Used by Queue consumer threads. For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task is complete. If a join() is currently blocking, it will resume when all items have been processed (meaning that a task_done() call was received for every item that had been put() into the queue). Raises a ValueError if called more times than there were items placed in the queue. View Source def task_done(self): '''Indicate that a formerly enqueued task is complete. Used by Queue consumer threads. For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task is complete. If a join() is currently blocking, it will resume when all items have been processed (meaning that a task_done() call was received for every item that had been put() into the queue). Raises a ValueError if called more times than there were items placed in the queue. ''' with self.all_tasks_done: unfinished = self.unfinished_tasks - 1 if unfinished <= 0: if unfinished < 0: raise ValueError('task_done() called too many times') self.all_tasks_done.notify_all() self.unfinished_tasks = unfinished","title":"task_done"},{"location":"reference/PyMultiTasking/utils/#processtaskqueue","text":"class ProcessTaskQueue ( maxsize = 0 , * , ctx = None ) This is a simple override of the JoinableQueue class that ensures the 'item' is a Task class meant to be used ONLY in ProcessingPool View Source class ProcessTaskQueue ( JoinableQueue ) : \"\"\" <a name=\" ProcessTaskQueue \"></a> This is a simple override of the JoinableQueue class that ensures the 'item' is a Task class meant to be used ONLY in ProcessingPool \"\"\" def __init__ ( self , maxsize = 0 , * , ctx = None ) : super ( ProcessTaskQueue , self ). __init__ ( maxsize = maxsize , ctx = ctx or multiprocessing . get_context ()) def put_nowait ( self , item : Task ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put_nowait ( item ) def put ( self , item : Task , block : bool = True , timeout : Union [ int, float, None ] = None ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put ( item , block = block , timeout = timeout )","title":"ProcessTaskQueue"},{"location":"reference/PyMultiTasking/utils/#ancestors-in-mro_2","text":"multiprocessing.queues.JoinableQueue multiprocessing.queues.Queue","title":"Ancestors (in MRO)"},{"location":"reference/PyMultiTasking/utils/#methods_4","text":"","title":"Methods"},{"location":"reference/PyMultiTasking/utils/#cancel_join_thread","text":"def cancel_join_thread ( self ) View Source def cancel_join_thread(self): debug('Queue.cancel_join_thread()') self._joincancelled = True try: self._jointhread.cancel() except AttributeError: pass","title":"cancel_join_thread"},{"location":"reference/PyMultiTasking/utils/#close","text":"def close ( self ) View Source def close(self): self._closed = True close = self._close if close: self._close = None close()","title":"close"},{"location":"reference/PyMultiTasking/utils/#empty_1","text":"def empty ( self ) View Source def empty(self): return not self._poll()","title":"empty"},{"location":"reference/PyMultiTasking/utils/#full_1","text":"def full ( self ) View Source def full(self): return self._sem._semlock._is_zero()","title":"full"},{"location":"reference/PyMultiTasking/utils/#get_1","text":"def get ( self , block = True , timeout = None ) View Source def get ( self , block = True , timeout = None ): if self . _closed : raise ValueError ( f \"Queue {self!r} is closed\" ) if block and timeout is None : with self . _rlock : res = self . _recv_bytes () self . _sem . release () else : if block : deadline = time . monotonic () + timeout if not self . _rlock . acquire ( block , timeout ): raise Empty try : if block : timeout = deadline - time . monotonic () if not self . _poll ( timeout ): raise Empty elif not self . _poll (): raise Empty res = self . _recv_bytes () self . _sem . release () finally : self . _rlock . release () # unserialize the data after having released the lock return _ForkingPickler . loads ( res )","title":"get"},{"location":"reference/PyMultiTasking/utils/#get_nowait_1","text":"def get_nowait ( self ) View Source def get_nowait(self): return self.get(False)","title":"get_nowait"},{"location":"reference/PyMultiTasking/utils/#join_2","text":"def join ( self ) View Source def join(self): with self._cond: if not self._unfinished_tasks._semlock._is_zero(): self._cond.wait()","title":"join"},{"location":"reference/PyMultiTasking/utils/#join_thread","text":"def join_thread ( self ) View Source def join_thread(self): debug('Queue.join_thread()') assert self._closed, \"Queue {0!r} not closed\".format(self) if self._jointhread: self._jointhread()","title":"join_thread"},{"location":"reference/PyMultiTasking/utils/#put_1","text":"def put ( self , item : 'Task' , block : 'bool' = True , timeout : 'Union[int, float, None]' = None ) -> 'None' View Source def put ( self , item : Task , block : bool = True , timeout : Union [ int, float, None ] = None ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put ( item , block = block , timeout = timeout )","title":"put"},{"location":"reference/PyMultiTasking/utils/#put_nowait_1","text":"def put_nowait ( self , item : 'Task' ) -> 'None' View Source def put_nowait ( self , item : Task ) -> None : if not isinstance ( item , Task ) : raise TypeError ( '[ERROR]: item is not a Task object cannot be put into PriorityTaskQueue' ) return super (). put_nowait ( item )","title":"put_nowait"},{"location":"reference/PyMultiTasking/utils/#qsize_1","text":"def qsize ( self ) View Source def qsize(self): # Raises NotImplementedError on Mac OSX because of broken sem_getvalue() return self._maxsize - self._sem._semlock._get_value()","title":"qsize"},{"location":"reference/PyMultiTasking/utils/#task_done_1","text":"def task_done ( self ) View Source def task_done(self): with self._cond: if not self._unfinished_tasks.acquire(False): raise ValueError('task_done() called too many times') if self._unfinished_tasks._semlock._is_zero(): self._cond.notify_all()","title":"task_done"},{"location":"reference/PyMultiTasking/utils/#task","text":"class Task ( fn : 'Callable' , priority : 'int' = 1 , kill : 'bool' = False , inject_task : 'bool' = True , store_return : 'bool' = True , ignore_queue : 'bool' = False , callback_func : 'Optional[Callable]' = None , semaphore : 'Optional[Semaphore]' = None , * args , ** kwargs ) This is a wrapper class that inherits from an Event Object and is used inside the Worker. It is designed to hold the function ran and save the results of the function. View Source class Task ( Event ) : \"\"\" <a name=\" Task \"></a> This is a wrapper class that inherits from an Event Object and is used inside the Worker. It is designed to hold the function ran and save the results of the function. \"\"\" defaultriority : int = 1 def __init__ ( self , fn : Callable , priority : int = 1 , kill : bool = False , inject_task : bool = True , store_return : bool = True , ignore_queue : bool = False , callback_func : Optional [ Callable ] = None , semaphore : Optional [ Semaphore ] = None , * args , ** kwargs ) : super (). __init__ () self . args = args self . kwargs = kwargs self . priority = priority self . kill = kill self . ignore_queue = ignore_queue self . callback_fun = callback_func self . semaphore = semaphore if semaphore is not None else Semaphore ( 1 ) if isinstance ( fn , partial ) : if inject_task and Task . __inspect_kwargs ( fn . func ) : fn . keywords . update ( { 'TaskObject' : self } ) self . task = fn else : if inject_task and Task . __inspect_kwargs ( fn ) : self . kwargs . update ( { 'TaskObject' : self } ) self . task = partial ( fn , * self . args , ** self . kwargs ) self . store_return = store_return self . uuid = str ( uuid . uuid4 ()) self . __updateRLock = MultiProcRLock () self . __worker = None self . __results = None def run ( self , * args , ** kwargs ) -> Any : \"\"\" This is used to run the stored partial function and store the results. - :param args: Positional arguments to be passed to the task. - :param kwargs: Keyword arguments to be passed to the task - :return: (Anything) \"\"\" if self . is_set () : raise Exception ( 'A Task Object cannot be ran more than once!' ) try : self . semaphore . acquire () if self . store_return : self . results = self . task ( * args , ** kwargs ) if self . callback_fun : return self . callback_fun ( self . results ) else : if self . callback_fun : return self . callback_fun ( self . task ( * args , ** kwargs )) else : return self . task ( * args , ** kwargs ) except Exception as e : _log . info ( f '{self} failed' ) raise e else : _log . info ( f '{self} succeeded' ) finally : self . set () self . semaphore . release () if self . store_return : return self . results def clear ( self ) -> None : if self . is_set () : raise Exception ( 'A Task Object cannot be cleared once set!' ) return super ( Task , self ). clear () @staticmethod def __inspect_kwargs ( func , keyword = 'TaskObject' ) : try : return [ key for key in inspect.signature(func).parameters.keys() if keyword == key or 'kwargs' == key ] except : return [] def __hash__ ( self ) : return hash ( self . uuid ) def __call__ ( self , * args , ** kwargs ) : return self . run ( * args , ** kwargs ) def __str__ ( self ) : return f 'Task(UUID={self.uuid},Priority={self.priority}): {self.task.func}' def __gt__ ( self , other : Task ) : return self . priority > other . priority def __lt__ ( self , other : Task ) : return self . priority < other . priority def __ge__ ( self , other : Task ) : return self . priority >= other . priority def __le__ ( self , other : Task ) : return self . priority <= other . priority @property def worker ( self ) : with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = False ) as acquired : if acquired : return self . __worker @worker . setter def worker ( self , value ) : with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ) : self . __worker = value @worker . deleter def worker ( self ) : with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ) : del self . __worker @property def results ( self ) : with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = False ) as acquired : if acquired : return self . __results @results . setter def results ( self , value ) : with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ) : self . __results = value @results . deleter def results ( self ) : with wait_lock ( self . __updateRLock , timeout = 1 , raise_exc = True ) : del self . __results","title":"Task"},{"location":"reference/PyMultiTasking/utils/#ancestors-in-mro_3","text":"threading.Event","title":"Ancestors (in MRO)"},{"location":"reference/PyMultiTasking/utils/#class-variables","text":"defaultriority","title":"Class variables"},{"location":"reference/PyMultiTasking/utils/#instance-variables_2","text":"results worker","title":"Instance variables"},{"location":"reference/PyMultiTasking/utils/#methods_5","text":"","title":"Methods"},{"location":"reference/PyMultiTasking/utils/#clear_2","text":"def clear ( self ) -> 'None' Reset the internal flag to false. Subsequently, threads calling wait() will block until set() is called to set the internal flag to true again. View Source def clear ( self ) -> None : if self . is_set () : raise Exception ( 'A Task Object cannot be cleared once set!' ) return super ( Task , self ). clear ()","title":"clear"},{"location":"reference/PyMultiTasking/utils/#isset_2","text":"def isSet ( self ) Return true if and only if the internal flag is true. This method is deprecated, use is_set() instead. View Source def isSet ( self ): \"\"\"Return true if and only if the internal flag is true. This method is deprecated, use is_set() instead. \"\"\" import warnings warnings . warn ( 'isSet() is deprecated, use is_set() instead' , DeprecationWarning , stacklevel = 2 ) return self . is_set ()","title":"isSet"},{"location":"reference/PyMultiTasking/utils/#is_set_1","text":"def is_set ( self ) Return true if and only if the internal flag is true. View Source def is_set(self): \"\"\"Return true if and only if the internal flag is true.\"\"\" return self._flag","title":"is_set"},{"location":"reference/PyMultiTasking/utils/#run","text":"def run ( self , * args , ** kwargs ) -> 'Any' This is used to run the stored partial function and store the results. :param args: Positional arguments to be passed to the task. :param kwargs: Keyword arguments to be passed to the task :return: (Anything) View Source def run(self, *args, * *kwargs) -> Any: \"\"\" This is used to run the stored partial function and store the results. - :param args: Positional arguments to be passed to the task. - :param kwargs: Keyword arguments to be passed to the task - :return: (Anything) \"\"\" if self.is_set(): raise Exception('A Task Object cannot be ran more than once!') try: self.semaphore.acquire() if self.store_return: self.results = self.task(*args, **kwargs) if self.callback_fun: return self.callback_fun(self.results) else: if self.callback_fun: return self.callback_fun(self.task(*args, **kwargs)) else: return self.task(*args, **kwargs) except Exception as e: _log.info(f'{self} failed') raise e else: _log.info(f'{self} succeeded') finally: self.set() self.semaphore.release() if self.store_return: return self.results","title":"run"},{"location":"reference/PyMultiTasking/utils/#set_2","text":"def set ( self ) Set the internal flag to true. All threads waiting for it to become true are awakened. Threads that call wait() once the flag is true will not block at all. View Source def set(self): \"\"\"Set the internal flag to true. All threads waiting for it to become true are awakened. Threads that call wait() once the flag is true will not block at all. \"\"\" with self._cond: self._flag = True self._cond.notify_all()","title":"set"},{"location":"reference/PyMultiTasking/utils/#wait_2","text":"def wait ( self , timeout = None ) Block until the internal flag is true. If the internal flag is true on entry, return immediately. Otherwise, block until another thread calls set() to set the flag to true, or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). This method returns the internal flag on exit, so it will always return True except if a timeout is given and the operation times out. View Source def wait ( self , timeout = None ): \"\"\"Block until the internal flag is true. If the internal flag is true on entry, return immediately. Otherwise, block until another thread calls set() to set the flag to true, or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). This method returns the internal flag on exit, so it will always return True except if a timeout is given and the operation times out. \"\"\" with self . _cond : signaled = self . _flag if not signaled : signaled = self . _cond . wait ( timeout ) return signaled","title":"wait"},{"location":"reference/PyMultiTasking/utils/#worker","text":"class Worker ( pool : 'Optional[Pool]' = None , workerAutoKill : 'bool' = True , defaultTimeout : 'int' = 10 , personalQue : 'Optional[ProcessTaskQueue]' = None , target : 'Optional[Callable]' = None , name : 'Optional[str]' = None , daemon : 'bool' = True , log : 'Optional[logging]' = None , ** kwargs ) This is designed to be managed by a ThreadPool. However, it can run on its own as well. It runs until told to stop and works tasks that come from a the PriorityTaskQueue maintained by the Pool. View Source class Worker : \"\"\" <a name=\" Worker \"></a> This is designed to be managed by a ThreadPool. However, it can run on its own as well. It runs until told to stop and works tasks that come from a the PriorityTaskQueue maintained by the Pool. \"\"\" __workerAutoKill = True __defaultTimeout = 10 workerType = None name = None def __init__ ( self , pool : Optional [ Pool ] = None , workerAutoKill : bool = True , defaultTimeout : int = 10 , personalQue : Optional [ ProcessTaskQueue ] = None , target : Optional [ Callable ] = None , name : Optional [ str ] = None , daemon : bool = True , log : Optional [ logging ] = None , ** kwargs ) : self . uuid = str ( uuid . uuid4 ()) self . log = _log if log is None else log self . __defaultTimeout = defaultTimeout self . __timeout = defaultTimeout self . __personalQue = personalQue self . __currentTask = None if target is not None and not isinstance ( target , Task ) : target = Task ( target , kill = True , ignore_queue = True ) super ( Worker , self ). __init__ ( target = target , name = self . uuid if name is None else name , daemon = daemon , args = kwargs . get ( 'args' , ()), kwargs = kwargs . get ( 'kwargs' , {} )) self . pool = pool self . killed = False self . __workerAutoKill = workerAutoKill if self . __personalQue is None else False if pool : self . log . info ( f '[INFO]: Starting new {self}' ) self . start () def __str__ ( self ) : return f 'Worker: {self.name if self.name == self.uuid else f\"{self.name}-{self.uuid}\"} for Pool: {self.pool}' def __hash__ ( self ) : return hash ( self . uuid ) def safe_stop ( self ) : self . killed = True # noinspection PyUnresolvedReferences def get_next_task ( self ) -> Union [ Task, bool, None ] : \"\"\" This gets the next Task in the taskQueue - :return: (Task) \"\"\" try : self . __currentTask = None if self . pool is None and self . _target is not None : self . __currentTask = self . _target self . __currentTask . worker = self self . __currentTask . kill = True self . __currentTask . ignore_queue = True elif self . pool is None and self . __personalQue is None : self . __currentTask = None else : self . __currentTask = self . task_queue . get ( timeout = self . __timeout ) self . __currentTask . worker = self return self . __currentTask except Empty : if self . timeout == 0 : return Task ( Worker . __KILL__ , kill = True , ignore_queue = True ) return False except Exception as e : self . log . error ( f '[ERROR]: Error in getting task: {e}' ) self . log . debug ( f '[DEBUG]: trace for error in getting task: {traceback.format_exc()}' ) return None def run ( self ) -> None : \"\"\" This is an override of the run method within Thread that loops constantly waiting on another task. - :return: (None) \"\"\" try : while not self . killed : task = self . get_next_task () if task is None : self . log . info ( 'task is None an error occurred in get_next_task method closing the thread' ) break elif task is not False : self . log . info ( f 'The task is: {task}' ) task ( * self . _args , ** self . _kwargs ) self . __currentTask = None if not task . ignore_queue : self . task_queue . task_done () if task . kill : self . log . info ( f 'Killing thread once task is complete: {task}' ) self . killed = True except Exception as e : self . log . error ( f '[ERROR]: While Worker thread is running with task: {self.__currentTask} Error: {e}' ) self . log . debug ( f '[DEBUG]: trace for error: {traceback.format_exc()}' ) if self . __currentTask is not None : if not self . __currentTask . isSet () : self . __currentTask . set () if not self . __currentTask . ignore_queue : getattr ( self . task_queue , 'task_done' , dummy_func )() self . __currentTask = None finally : if self . killed is not True : self . killed = True if self . pool is not None : self . pool . remove_worker ( workerTooRemove = self ) @staticmethod def __KILL__ ( * args , ** kwargs ) -> None : pass @property def task_queue ( self ) : if self . pool is None and self . __personalQue is not None : return self . __personalQue return getattr ( getattr ( self , 'pool' , None ), 'taskQueue' , None ) @property def timeout ( self ) -> int : \"\"\" This property will return 0 if it thinks it doesn't need to run any longer and is ready to self terminate \"\"\" if self . killed is True : return 0 elif self . pool is not None and (( self . __workerAutoKill and self . pool . num_workers > 1 ) or self . pool . num_workers > self . pool . maxWorkers ) : self . __timeout //= 2 elif self . __defaultTimeout != self . __timeout : self . __timeout = self . __defaultTimeout return self . __timeout @property def current_priority ( self ) -> int : \"\"\" This changes to the priority of each incoming task. \"\"\" try : if self . __currentTask : return self . __currentTask . priority return 0 except Exception as e : self . log . error ( f 'ERROR: {e}' ) return 0 @property def is_active ( self ) -> bool : \"\"\" This determines if the Worker currently has a Task to work. \"\"\" return self . __currentTask is not None","title":"Worker"},{"location":"reference/PyMultiTasking/utils/#descendants_1","text":"PyMultiTasking.ThreadingUtils.ThreadWorker","title":"Descendants"},{"location":"reference/PyMultiTasking/utils/#class-variables_1","text":"name workerType","title":"Class variables"},{"location":"reference/PyMultiTasking/utils/#instance-variables_3","text":"current_priority This changes to the priority of each incoming task. is_active This determines if the Worker currently has a Task to work. task_queue timeout This property will return 0 if it thinks it doesn't need to run any longer and is ready to self terminate","title":"Instance variables"},{"location":"reference/PyMultiTasking/utils/#methods_6","text":"","title":"Methods"},{"location":"reference/PyMultiTasking/utils/#get_next_task","text":"def get_next_task ( self ) -> 'Union[Task, bool, None]' This gets the next Task in the taskQueue :return: (Task) View Source def get_next_task ( self ) -> Union [ Task, bool, None ] : \"\"\" This gets the next Task in the taskQueue - :return: (Task) \"\"\" try : self . __currentTask = None if self . pool is None and self . _target is not None : self . __currentTask = self . _target self . __currentTask . worker = self self . __currentTask . kill = True self . __currentTask . ignore_queue = True elif self . pool is None and self . __personalQue is None : self . __currentTask = None else : self . __currentTask = self . task_queue . get ( timeout = self . __timeout ) self . __currentTask . worker = self return self . __currentTask except Empty : if self . timeout == 0 : return Task ( Worker . __KILL__ , kill = True , ignore_queue = True ) return False except Exception as e : self . log . error ( f '[ERROR]: Error in getting task: {e}' ) self . log . debug ( f '[DEBUG]: trace for error in getting task: {traceback.format_exc()}' ) return None","title":"get_next_task"},{"location":"reference/PyMultiTasking/utils/#run_1","text":"def run ( self ) -> 'None' This is an override of the run method within Thread that loops constantly waiting on another task. :return: (None) View Source def run ( self ) -> None : \"\"\" This is an override of the run method within Thread that loops constantly waiting on another task. - :return: (None) \"\"\" try : while not self . killed : task = self . get_next_task () if task is None : self . log . info ( 'task is None an error occurred in get_next_task method closing the thread' ) break elif task is not False : self . log . info ( f 'The task is: {task}' ) task ( * self . _args , ** self . _kwargs ) self . __currentTask = None if not task . ignore_queue : self . task_queue . task_done () if task . kill : self . log . info ( f 'Killing thread once task is complete: {task}' ) self . killed = True except Exception as e : self . log . error ( f '[ERROR]: While Worker thread is running with task: {self.__currentTask} Error: {e}' ) self . log . debug ( f '[DEBUG]: trace for error: {traceback.format_exc()}' ) if self . __currentTask is not None : if not self . __currentTask . isSet () : self . __currentTask . set () if not self . __currentTask . ignore_queue : getattr ( self . task_queue , 'task_done' , dummy_func )() self . __currentTask = None finally : if self . killed is not True : self . killed = True if self . pool is not None : self . pool . remove_worker ( workerTooRemove = self )","title":"run"},{"location":"reference/PyMultiTasking/utils/#safe_stop","text":"def safe_stop ( self ) View Source def safe_stop(self): self.killed = True","title":"safe_stop"}]}